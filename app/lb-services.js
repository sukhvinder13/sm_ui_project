// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var hostname = location.host;
  if (hostname == 'studymonitor.in')
      var urlBase = 'https://api.studymonitor.in/api';
  else if (hostname == 'dev.studymonitor.in')
      var urlBase = 'http://139.162.6.194:3000/api';
  else if (hostname == 'test.studymonitor.in')
      var urlBase = 'http://173.255.217.199:3000/api';
  else
      var urlBase = 'http://localhost:3000/api';

  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Users/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__findById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__destroyById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__updateById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__get__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__create__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__delete__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__count__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Counts accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Users",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Users/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsertWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Users/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Users/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$patchAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Users/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$verify
             * @methodOf lbServices.User
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Users/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Users/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#changePassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Users/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#setPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Users/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreateWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/RoleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/RoleMappings",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/RoleMappings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsertWithWhere
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/RoleMappings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RoleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RoleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/RoleMappings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RoleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/RoleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RoleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RoleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$patchAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - RoleMapping id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/RoleMappings/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RoleMappings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreateWithWhere
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - RoleMapping id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - RoleMapping id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#create
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createMany
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Roles",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Roles/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsertWithWhere
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Roles/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#exists
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Roles/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#find
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findOne
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAll
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#deleteById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#count
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$patchAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Roles/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Role#upsert
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Role#updateOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreateWithWhere
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Role#update
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Role#destroyById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#removeById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Student
 * @header lbServices.Student
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Student` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Student",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Students/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__findById__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__updateById__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Students/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Student.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Students/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Student.libraries.findById() instead.
            "prototype$__findById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.libraries.destroyById() instead.
            "prototype$__destroyById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.libraries.updateById() instead.
            "prototype$__updateById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentParents.findById() instead.
            "prototype$__findById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.destroyById() instead.
            "prototype$__destroyById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.updateById() instead.
            "prototype$__updateById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.busSubscriptions() instead.
            "prototype$__get__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "GET",
            },

            // INTERNAL. Use Student.busSubscriptions.create() instead.
            "prototype$__create__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions.update() instead.
            "prototype$__update__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "PUT",
            },

            // INTERNAL. Use Student.busSubscriptions.destroy() instead.
            "prototype$__destroy__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.remarks.findById() instead.
            "prototype$__findById__remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.destroyById() instead.
            "prototype$__destroyById__remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.updateById() instead.
            "prototype$__updateById__remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentFees.findById() instead.
            "prototype$__findById__studentFees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentFees/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentFees.destroyById() instead.
            "prototype$__destroyById__studentFees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentFees/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentFees.updateById() instead.
            "prototype$__updateById__studentFees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentFees/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.enquiry.findById() instead.
            "prototype$__findById__enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/enquiry/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.enquiry.destroyById() instead.
            "prototype$__destroyById__enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/enquiry/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.enquiry.updateById() instead.
            "prototype$__updateById__enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/enquiry/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.fOmarks.findById() instead.
            "prototype$__findById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.fOmarks.destroyById() instead.
            "prototype$__destroyById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.fOmarks.updateById() instead.
            "prototype$__updateById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.smsreports.findById() instead.
            "prototype$__findById__smsreports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/smsreports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.smsreports.destroyById() instead.
            "prototype$__destroyById__smsreports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/smsreports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.smsreports.updateById() instead.
            "prototype$__updateById__smsreports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/smsreports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.complaints.findById() instead.
            "prototype$__findById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/complaints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.complaints.destroyById() instead.
            "prototype$__destroyById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/complaints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.complaints.updateById() instead.
            "prototype$__updateById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/complaints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.managerole() instead.
            "prototype$__get__managerole": {
              url: urlBase + "/Students/:id/managerole",
              method: "GET",
            },

            // INTERNAL. Use Student.discounts.findById() instead.
            "prototype$__findById__discounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/discounts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.discounts.destroyById() instead.
            "prototype$__destroyById__discounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/discounts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.discounts.updateById() instead.
            "prototype$__updateById__discounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/discounts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.optionals.findById() instead.
            "prototype$__findById__optionals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/optionals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.optionals.destroyById() instead.
            "prototype$__destroyById__optionals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/optionals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.optionals.updateById() instead.
            "prototype$__updateById__optionals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/optionals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentPayments.findById() instead.
            "prototype$__findById__studentPayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentPayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentPayments.destroyById() instead.
            "prototype$__destroyById__studentPayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentPayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentPayments.updateById() instead.
            "prototype$__updateById__studentPayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentPayments/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__get__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries accessTokens of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Students/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__create__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Students/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__delete__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Students/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__count__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Counts accessTokens of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Students/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Student.libraries() instead.
            "prototype$__get__libraries": {
              isArray: true,
              url: urlBase + "/Students/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use Student.libraries.create() instead.
            "prototype$__create__libraries": {
              url: urlBase + "/Students/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use Student.libraries.destroyAll() instead.
            "prototype$__delete__libraries": {
              url: urlBase + "/Students/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use Student.libraries.count() instead.
            "prototype$__count__libraries": {
              url: urlBase + "/Students/:id/libraries/count",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents() instead.
            "prototype$__get__studentParents": {
              isArray: true,
              url: urlBase + "/Students/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.create() instead.
            "prototype$__create__studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.destroyAll() instead.
            "prototype$__delete__studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.count() instead.
            "prototype$__count__studentParents": {
              url: urlBase + "/Students/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use Student.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Students/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Students/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Students/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Students/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Student.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/Students/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use Student.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/Students/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Student.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/Students/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use Student.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/Students/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks() instead.
            "prototype$__get__remarks": {
              isArray: true,
              url: urlBase + "/Students/:id/remarks",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.create() instead.
            "prototype$__create__remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.destroyAll() instead.
            "prototype$__delete__remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.count() instead.
            "prototype$__count__remarks": {
              url: urlBase + "/Students/:id/remarks/count",
              method: "GET",
            },

            // INTERNAL. Use Student.studentFees() instead.
            "prototype$__get__studentFees": {
              isArray: true,
              url: urlBase + "/Students/:id/studentFees",
              method: "GET",
            },

            // INTERNAL. Use Student.studentFees.create() instead.
            "prototype$__create__studentFees": {
              url: urlBase + "/Students/:id/studentFees",
              method: "POST",
            },

            // INTERNAL. Use Student.studentFees.destroyAll() instead.
            "prototype$__delete__studentFees": {
              url: urlBase + "/Students/:id/studentFees",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentFees.count() instead.
            "prototype$__count__studentFees": {
              url: urlBase + "/Students/:id/studentFees/count",
              method: "GET",
            },

            // INTERNAL. Use Student.enquiry() instead.
            "prototype$__get__enquiry": {
              isArray: true,
              url: urlBase + "/Students/:id/enquiry",
              method: "GET",
            },

            // INTERNAL. Use Student.enquiry.create() instead.
            "prototype$__create__enquiry": {
              url: urlBase + "/Students/:id/enquiry",
              method: "POST",
            },

            // INTERNAL. Use Student.enquiry.destroyAll() instead.
            "prototype$__delete__enquiry": {
              url: urlBase + "/Students/:id/enquiry",
              method: "DELETE",
            },

            // INTERNAL. Use Student.enquiry.count() instead.
            "prototype$__count__enquiry": {
              url: urlBase + "/Students/:id/enquiry/count",
              method: "GET",
            },

            // INTERNAL. Use Student.fOmarks() instead.
            "prototype$__get__fOmarks": {
              isArray: true,
              url: urlBase + "/Students/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use Student.fOmarks.create() instead.
            "prototype$__create__fOmarks": {
              url: urlBase + "/Students/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use Student.fOmarks.destroyAll() instead.
            "prototype$__delete__fOmarks": {
              url: urlBase + "/Students/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.fOmarks.count() instead.
            "prototype$__count__fOmarks": {
              url: urlBase + "/Students/:id/fOmarks/count",
              method: "GET",
            },

            // INTERNAL. Use Student.smsreports() instead.
            "prototype$__get__smsreports": {
              isArray: true,
              url: urlBase + "/Students/:id/smsreports",
              method: "GET",
            },

            // INTERNAL. Use Student.smsreports.create() instead.
            "prototype$__create__smsreports": {
              url: urlBase + "/Students/:id/smsreports",
              method: "POST",
            },

            // INTERNAL. Use Student.smsreports.destroyAll() instead.
            "prototype$__delete__smsreports": {
              url: urlBase + "/Students/:id/smsreports",
              method: "DELETE",
            },

            // INTERNAL. Use Student.smsreports.count() instead.
            "prototype$__count__smsreports": {
              url: urlBase + "/Students/:id/smsreports/count",
              method: "GET",
            },

            // INTERNAL. Use Student.complaints() instead.
            "prototype$__get__complaints": {
              isArray: true,
              url: urlBase + "/Students/:id/complaints",
              method: "GET",
            },

            // INTERNAL. Use Student.complaints.create() instead.
            "prototype$__create__complaints": {
              url: urlBase + "/Students/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Student.complaints.destroyAll() instead.
            "prototype$__delete__complaints": {
              url: urlBase + "/Students/:id/complaints",
              method: "DELETE",
            },

            // INTERNAL. Use Student.complaints.count() instead.
            "prototype$__count__complaints": {
              url: urlBase + "/Students/:id/complaints/count",
              method: "GET",
            },

            // INTERNAL. Use Student.discounts() instead.
            "prototype$__get__discounts": {
              isArray: true,
              url: urlBase + "/Students/:id/discounts",
              method: "GET",
            },

            // INTERNAL. Use Student.discounts.create() instead.
            "prototype$__create__discounts": {
              url: urlBase + "/Students/:id/discounts",
              method: "POST",
            },

            // INTERNAL. Use Student.discounts.destroyAll() instead.
            "prototype$__delete__discounts": {
              url: urlBase + "/Students/:id/discounts",
              method: "DELETE",
            },

            // INTERNAL. Use Student.discounts.count() instead.
            "prototype$__count__discounts": {
              url: urlBase + "/Students/:id/discounts/count",
              method: "GET",
            },

            // INTERNAL. Use Student.optionals() instead.
            "prototype$__get__optionals": {
              isArray: true,
              url: urlBase + "/Students/:id/optionals",
              method: "GET",
            },

            // INTERNAL. Use Student.optionals.create() instead.
            "prototype$__create__optionals": {
              url: urlBase + "/Students/:id/optionals",
              method: "POST",
            },

            // INTERNAL. Use Student.optionals.destroyAll() instead.
            "prototype$__delete__optionals": {
              url: urlBase + "/Students/:id/optionals",
              method: "DELETE",
            },

            // INTERNAL. Use Student.optionals.count() instead.
            "prototype$__count__optionals": {
              url: urlBase + "/Students/:id/optionals/count",
              method: "GET",
            },

            // INTERNAL. Use Student.studentPayments() instead.
            "prototype$__get__studentPayments": {
              isArray: true,
              url: urlBase + "/Students/:id/studentPayments",
              method: "GET",
            },

            // INTERNAL. Use Student.studentPayments.create() instead.
            "prototype$__create__studentPayments": {
              url: urlBase + "/Students/:id/studentPayments",
              method: "POST",
            },

            // INTERNAL. Use Student.studentPayments.destroyAll() instead.
            "prototype$__delete__studentPayments": {
              url: urlBase + "/Students/:id/studentPayments",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentPayments.count() instead.
            "prototype$__count__studentPayments": {
              url: urlBase + "/Students/:id/studentPayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#create
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Students",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#createMany
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Students",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#patchOrCreate
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Students",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#replaceOrCreate
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Students/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#upsertWithWhere
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Students/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#exists
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Students/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#findById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Students/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#replaceById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Students/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#find
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Students",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#findOne
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Students/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#updateAll
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Students/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#deleteById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Students/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#count
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Students/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$patchAttributes
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Students/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#createChangeStream
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Students/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#login
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Students/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#logout
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Students/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$verify
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Students/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#confirm
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Students/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#resetPassword
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Students/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#changePassword
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Students/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#setPassword
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Students/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#getStudents
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Send classId and date to get students
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `classId` – `{string=}` -
             *
             *  - `date` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `students` – `{*=}` -
             */
            "getStudents": {
              url: urlBase + "/Students/getStudents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#forgotPassword
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Enter email to reset the password
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `email` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "forgotPassword": {
              url: urlBase + "/Students/forgotPassword",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#findrecords
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Enter schoolId to findrecords
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `schoolId` – `{string=}` -
             *
             *  - `numb` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "findrecords": {
              url: urlBase + "/Students/findrecords",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#AddRoleIdtoallStudents
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Add Role id to all Admin
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `status` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `Run` – `{string=}` -
             */
            "AddRoleIdtoallStudents": {
              url: urlBase + "/Students/AddRoleIdtoallStudents",
              method: "GET",
            },

            // INTERNAL. Use School.students.findById() instead.
            "::findById::School::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.students.destroyById() instead.
            "::destroyById::School::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.updateById() instead.
            "::updateById::School::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.students() instead.
            "::get::School::students": {
              isArray: true,
              url: urlBase + "/Schools/:id/students",
              method: "GET",
            },

            // INTERNAL. Use School.students.create() instead.
            "::create::School::students": {
              url: urlBase + "/Schools/:id/students",
              method: "POST",
            },

            // INTERNAL. Use School.students.createMany() instead.
            "::createMany::School::students": {
              isArray: true,
              url: urlBase + "/Schools/:id/students",
              method: "POST",
            },

            // INTERNAL. Use School.students.destroyAll() instead.
            "::delete::School::students": {
              url: urlBase + "/Schools/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.count() instead.
            "::count::School::students": {
              url: urlBase + "/Schools/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Class.students.findById() instead.
            "::findById::Class::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.students.destroyById() instead.
            "::destroyById::Class::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.updateById() instead.
            "::updateById::Class::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.students() instead.
            "::get::Class::students": {
              isArray: true,
              url: urlBase + "/Classes/:id/students",
              method: "GET",
            },

            // INTERNAL. Use Class.students.create() instead.
            "::create::Class::students": {
              url: urlBase + "/Classes/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Class.students.createMany() instead.
            "::createMany::Class::students": {
              isArray: true,
              url: urlBase + "/Classes/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Class.students.destroyAll() instead.
            "::delete::Class::students": {
              url: urlBase + "/Classes/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.count() instead.
            "::count::Class::students": {
              url: urlBase + "/Classes/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Library.student() instead.
            "::get::Library::student": {
              url: urlBase + "/Libraries/:id/student",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.student() instead.
            "::get::StudentParent::student": {
              url: urlBase + "/StudentParents/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Attendance.student() instead.
            "::get::Attendance::student": {
              url: urlBase + "/Attendances/:id/student",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.student() instead.
            "::get::BusSubscription::student": {
              url: urlBase + "/BusSubscriptions/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Marks.student() instead.
            "::get::Marks::student": {
              url: urlBase + "/Marks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.student() instead.
            "::get::FeePayment::student": {
              url: urlBase + "/FeePayments/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Remarks.student() instead.
            "::get::Remarks::student": {
              url: urlBase + "/Remarks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use StudentFees.student() instead.
            "::get::StudentFees::student": {
              url: urlBase + "/studentFees/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.student() instead.
            "::get::Enquiry::student": {
              url: urlBase + "/Enquiries/:id/student",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.student() instead.
            "::get::FOmarks::student": {
              url: urlBase + "/FOmarks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.student.findById() instead.
            "::findById::Onlinetransactions::student": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/onlinetransactions/:id/student/:fk",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.student.destroyById() instead.
            "::destroyById::Onlinetransactions::student": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/onlinetransactions/:id/student/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Onlinetransactions.student.updateById() instead.
            "::updateById::Onlinetransactions::student": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/onlinetransactions/:id/student/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Onlinetransactions.student() instead.
            "::get::Onlinetransactions::student": {
              isArray: true,
              url: urlBase + "/onlinetransactions/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.student.create() instead.
            "::create::Onlinetransactions::student": {
              url: urlBase + "/onlinetransactions/:id/student",
              method: "POST",
            },

            // INTERNAL. Use Onlinetransactions.student.createMany() instead.
            "::createMany::Onlinetransactions::student": {
              isArray: true,
              url: urlBase + "/onlinetransactions/:id/student",
              method: "POST",
            },

            // INTERNAL. Use Onlinetransactions.student.destroyAll() instead.
            "::delete::Onlinetransactions::student": {
              url: urlBase + "/onlinetransactions/:id/student",
              method: "DELETE",
            },

            // INTERNAL. Use Onlinetransactions.student.count() instead.
            "::count::Onlinetransactions::student": {
              url: urlBase + "/onlinetransactions/:id/student/count",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.student() instead.
            "::get::Smsreport::student": {
              url: urlBase + "/smsreports/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Identity.students.findById() instead.
            "::findById::Identity::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.students.destroyById() instead.
            "::destroyById::Identity::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.students.updateById() instead.
            "::updateById::Identity::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.students() instead.
            "::get::Identity::students": {
              isArray: true,
              url: urlBase + "/Identities/:id/students",
              method: "GET",
            },

            // INTERNAL. Use Identity.students.create() instead.
            "::create::Identity::students": {
              url: urlBase + "/Identities/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Identity.students.createMany() instead.
            "::createMany::Identity::students": {
              isArray: true,
              url: urlBase + "/Identities/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Identity.students.destroyAll() instead.
            "::delete::Identity::students": {
              url: urlBase + "/Identities/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.students.count() instead.
            "::count::Identity::students": {
              url: urlBase + "/Identities/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Complaint.student() instead.
            "::get::Complaint::student": {
              url: urlBase + "/Complaints/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#getCurrent
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Students" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Student#upsert
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Student#updateOrCreate
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Student#patchOrCreateWithWhere
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Student#update
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Student#destroyById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Student#removeById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Student#updateAttributes
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Student#getCachedCurrent
         * @methodOf lbServices.Student
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Student#login} or
         * {@link lbServices.Student#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Student instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Student#isAuthenticated
         * @methodOf lbServices.Student
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Student#getCurrentId
         * @methodOf lbServices.Student
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Student#modelName
        * @propertyOf lbServices.Student
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Student`.
        */
        R.modelName = "Student";


            /**
             * @ngdoc method
             * @name lbServices.Student#school
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Student::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student#class
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Student::class"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.libraries
     * @header lbServices.Student.libraries
     * @object
     * @description
     *
     * The object `Student.libraries` groups methods
     * manipulating `Library` instances related to `Student`.
     *
     * Call {@link lbServices.Student#libraries Student.libraries()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#libraries
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries libraries of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::get::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#count
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Counts libraries of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.libraries.count = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::count::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#create
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.create = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::create::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#createMany
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.createMany = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::createMany::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#destroyAll
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Deletes all libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyAll = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::delete::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#destroyById
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Delete a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::destroyById::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#findById
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Find a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.findById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::findById::Student::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.libraries#updateById
             * @methodOf lbServices.Student.libraries
             *
             * @description
             *
             * Update a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.updateById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::updateById::Student::libraries"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.studentParents
     * @header lbServices.Student.studentParents
     * @object
     * @description
     *
     * The object `Student.studentParents` groups methods
     * manipulating `StudentParent` instances related to `Student`.
     *
     * Call {@link lbServices.Student#studentParents Student.studentParents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#studentParents
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries studentParents of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::get::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#count
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Counts studentParents of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentParents.count = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::count::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#create
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.create = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::create::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#createMany
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.createMany = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::createMany::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#destroyAll
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Deletes all studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyAll = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::delete::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#destroyById
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Delete a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::destroyById::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#findById
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Find a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.findById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::findById::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#updateById
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Update a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.updateById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::updateById::Student::studentParents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.busSubscriptions
     * @header lbServices.Student.busSubscriptions
     * @object
     * @description
     *
     * The object `Student.busSubscriptions` groups methods
     * manipulating `BusSubscription` instances related to `Student`.
     *
     * Call {@link lbServices.Student#busSubscriptions Student.busSubscriptions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#busSubscriptions
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches hasOne relation busSubscriptions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::get::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#create
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Creates a new instance in busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.create = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::create::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#createMany
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Creates a new instance in busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.createMany = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::createMany::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#destroy
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Deletes busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busSubscriptions.destroy = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::destroy::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#update
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Update busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.update = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::update::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.marks
     * @header lbServices.Student.marks
     * @object
     * @description
     *
     * The object `Student.marks` groups methods
     * manipulating `Marks` instances related to `Student`.
     *
     * Call {@link lbServices.Student#marks Student.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#marks
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries marks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#count
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Counts marks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#create
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#createMany
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#destroyAll
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#destroyById
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#findById
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#updateById
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Student::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.feePayments
     * @header lbServices.Student.feePayments
     * @object
     * @description
     *
     * The object `Student.feePayments` groups methods
     * manipulating `FeePayment` instances related to `Student`.
     *
     * Call {@link lbServices.Student#feePayments Student.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#feePayments
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries feePayments of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#count
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Counts feePayments of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#create
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#createMany
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#destroyAll
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#destroyById
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#findById
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::Student::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.feePayments#updateById
             * @methodOf lbServices.Student.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::Student::feePayments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.remarks
     * @header lbServices.Student.remarks
     * @object
     * @description
     *
     * The object `Student.remarks` groups methods
     * manipulating `Remarks` instances related to `Student`.
     *
     * Call {@link lbServices.Student#remarks Student.remarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#remarks
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries remarks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::get::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#count
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Counts remarks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.remarks.count = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::count::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#create
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Creates a new instance in remarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.create = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::create::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#createMany
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Creates a new instance in remarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.createMany = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::createMany::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#destroyAll
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Deletes all remarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.remarks.destroyAll = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::delete::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#destroyById
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Delete a related item by id for remarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for remarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.remarks.destroyById = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::destroyById::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#findById
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Find a related item by id for remarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for remarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.findById = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::findById::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#updateById
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Update a related item by id for remarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for remarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.updateById = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::updateById::Student::remarks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.studentFees
     * @header lbServices.Student.studentFees
     * @object
     * @description
     *
     * The object `Student.studentFees` groups methods
     * manipulating `StudentFees` instances related to `Student`.
     *
     * Call {@link lbServices.Student#studentFees Student.studentFees()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#studentFees
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries studentFees of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R.studentFees = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::get::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#count
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Counts studentFees of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentFees.count = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::count::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#create
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Creates a new instance in studentFees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R.studentFees.create = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::create::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#createMany
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Creates a new instance in studentFees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R.studentFees.createMany = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::createMany::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#destroyAll
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Deletes all studentFees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentFees.destroyAll = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::delete::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#destroyById
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Delete a related item by id for studentFees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentFees
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentFees.destroyById = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::destroyById::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#findById
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Find a related item by id for studentFees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentFees
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R.studentFees.findById = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::findById::Student::studentFees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentFees#updateById
             * @methodOf lbServices.Student.studentFees
             *
             * @description
             *
             * Update a related item by id for studentFees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for studentFees
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R.studentFees.updateById = function() {
          var TargetResource = $injector.get("StudentFees");
          var action = TargetResource["::updateById::Student::studentFees"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.enquiry
     * @header lbServices.Student.enquiry
     * @object
     * @description
     *
     * The object `Student.enquiry` groups methods
     * manipulating `Enquiry` instances related to `Student`.
     *
     * Call {@link lbServices.Student#enquiry Student.enquiry()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#enquiry
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries enquiry of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::get::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#count
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Counts enquiry of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.enquiry.count = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::count::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#create
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Creates a new instance in enquiry of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.create = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::create::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#createMany
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Creates a new instance in enquiry of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.createMany = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::createMany::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#destroyAll
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Deletes all enquiry of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiry.destroyAll = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::delete::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#destroyById
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Delete a related item by id for enquiry.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiry
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiry.destroyById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::destroyById::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#findById
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Find a related item by id for enquiry.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiry
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.findById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::findById::Student::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.enquiry#updateById
             * @methodOf lbServices.Student.enquiry
             *
             * @description
             *
             * Update a related item by id for enquiry.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for enquiry
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.updateById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::updateById::Student::enquiry"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.fOmarks
     * @header lbServices.Student.fOmarks
     * @object
     * @description
     *
     * The object `Student.fOmarks` groups methods
     * manipulating `FOmarks` instances related to `Student`.
     *
     * Call {@link lbServices.Student#fOmarks Student.fOmarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#fOmarks
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries fOmarks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::get::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#count
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Counts fOmarks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOmarks.count = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::count::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#create
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.create = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::create::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#createMany
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.createMany = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::createMany::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#destroyAll
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Deletes all fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyAll = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::delete::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#destroyById
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Delete a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::destroyById::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#findById
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Find a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.findById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::findById::Student::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.fOmarks#updateById
             * @methodOf lbServices.Student.fOmarks
             *
             * @description
             *
             * Update a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.updateById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::updateById::Student::fOmarks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.smsreports
     * @header lbServices.Student.smsreports
     * @object
     * @description
     *
     * The object `Student.smsreports` groups methods
     * manipulating `Smsreport` instances related to `Student`.
     *
     * Call {@link lbServices.Student#smsreports Student.smsreports()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#smsreports
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries smsreports of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R.smsreports = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::get::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#count
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Counts smsreports of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.smsreports.count = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::count::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#create
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Creates a new instance in smsreports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R.smsreports.create = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::create::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#createMany
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Creates a new instance in smsreports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R.smsreports.createMany = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::createMany::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#destroyAll
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Deletes all smsreports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.smsreports.destroyAll = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::delete::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#destroyById
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Delete a related item by id for smsreports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for smsreports
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.smsreports.destroyById = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::destroyById::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#findById
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Find a related item by id for smsreports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for smsreports
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R.smsreports.findById = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::findById::Student::smsreports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.smsreports#updateById
             * @methodOf lbServices.Student.smsreports
             *
             * @description
             *
             * Update a related item by id for smsreports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for smsreports
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R.smsreports.updateById = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::updateById::Student::smsreports"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.complaints
     * @header lbServices.Student.complaints
     * @object
     * @description
     *
     * The object `Student.complaints` groups methods
     * manipulating `Complaint` instances related to `Student`.
     *
     * Call {@link lbServices.Student#complaints Student.complaints()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#complaints
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries complaints of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::get::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#count
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Counts complaints of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.complaints.count = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::count::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#create
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Creates a new instance in complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.create = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::create::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#createMany
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Creates a new instance in complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.createMany = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::createMany::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#destroyAll
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Deletes all complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.complaints.destroyAll = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::delete::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#destroyById
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Delete a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.complaints.destroyById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::destroyById::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#findById
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Find a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.findById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::findById::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.complaints#updateById
             * @methodOf lbServices.Student.complaints
             *
             * @description
             *
             * Update a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.updateById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::updateById::Student::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student#managerole
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches belongsTo relation managerole.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R.managerole = function() {
          var TargetResource = $injector.get("ManageRole");
          var action = TargetResource["::get::Student::managerole"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.discounts
     * @header lbServices.Student.discounts
     * @object
     * @description
     *
     * The object `Student.discounts` groups methods
     * manipulating `Discount` instances related to `Student`.
     *
     * Call {@link lbServices.Student#discounts Student.discounts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#discounts
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries discounts of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::get::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#count
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Counts discounts of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.discounts.count = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::count::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#create
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Creates a new instance in discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.create = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::create::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#createMany
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Creates a new instance in discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.createMany = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::createMany::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#destroyAll
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Deletes all discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.discounts.destroyAll = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::delete::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#destroyById
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Delete a related item by id for discounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for discounts
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.discounts.destroyById = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::destroyById::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#findById
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Find a related item by id for discounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for discounts
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.findById = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::findById::Student::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.discounts#updateById
             * @methodOf lbServices.Student.discounts
             *
             * @description
             *
             * Update a related item by id for discounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for discounts
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.updateById = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::updateById::Student::discounts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.optionals
     * @header lbServices.Student.optionals
     * @object
     * @description
     *
     * The object `Student.optionals` groups methods
     * manipulating `Optionals` instances related to `Student`.
     *
     * Call {@link lbServices.Student#optionals Student.optionals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#optionals
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries optionals of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R.optionals = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::get::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#count
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Counts optionals of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.optionals.count = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::count::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#create
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Creates a new instance in optionals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R.optionals.create = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::create::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#createMany
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Creates a new instance in optionals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R.optionals.createMany = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::createMany::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#destroyAll
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Deletes all optionals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.optionals.destroyAll = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::delete::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#destroyById
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Delete a related item by id for optionals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for optionals
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.optionals.destroyById = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::destroyById::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#findById
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Find a related item by id for optionals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for optionals
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R.optionals.findById = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::findById::Student::optionals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.optionals#updateById
             * @methodOf lbServices.Student.optionals
             *
             * @description
             *
             * Update a related item by id for optionals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for optionals
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R.optionals.updateById = function() {
          var TargetResource = $injector.get("Optionals");
          var action = TargetResource["::updateById::Student::optionals"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.studentPayments
     * @header lbServices.Student.studentPayments
     * @object
     * @description
     *
     * The object `Student.studentPayments` groups methods
     * manipulating `StudentPayments` instances related to `Student`.
     *
     * Call {@link lbServices.Student#studentPayments Student.studentPayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#studentPayments
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries studentPayments of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R.studentPayments = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::get::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#count
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Counts studentPayments of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentPayments.count = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::count::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#create
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Creates a new instance in studentPayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R.studentPayments.create = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::create::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#createMany
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Creates a new instance in studentPayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R.studentPayments.createMany = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::createMany::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#destroyAll
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Deletes all studentPayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentPayments.destroyAll = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::delete::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#destroyById
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Delete a related item by id for studentPayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentPayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentPayments.destroyById = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::destroyById::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#findById
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Find a related item by id for studentPayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentPayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R.studentPayments.findById = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::findById::Student::studentPayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentPayments#updateById
             * @methodOf lbServices.Student.studentPayments
             *
             * @description
             *
             * Update a related item by id for studentPayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Student id
             *
             *  - `fk` – `{*}` - Foreign key for studentPayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R.studentPayments.updateById = function() {
          var TargetResource = $injector.get("StudentPayments");
          var action = TargetResource["::updateById::Student::studentPayments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Staff
 * @header lbServices.Staff
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Staff` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Staff",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Staffs/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__findById__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__updateById__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Staff.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Staffs/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Staff.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Staffs/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries.findById() instead.
            "prototype$__findById__enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/enquiries/:fk",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries.destroyById() instead.
            "prototype$__destroyById__enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/enquiries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.enquiries.updateById() instead.
            "prototype$__updateById__enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/enquiries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Staff.complaints.findById() instead.
            "prototype$__findById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/complaints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Staff.complaints.destroyById() instead.
            "prototype$__destroyById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/complaints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.complaints.updateById() instead.
            "prototype$__updateById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/complaints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Staff.managerole() instead.
            "prototype$__get__managerole": {
              url: urlBase + "/Staffs/:id/managerole",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__get__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Queries accessTokens of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Staffs/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__create__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Staffs/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__delete__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Staffs/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__count__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Counts accessTokens of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Staffs/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries() instead.
            "prototype$__get__enquiries": {
              isArray: true,
              url: urlBase + "/Staffs/:id/enquiries",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries.create() instead.
            "prototype$__create__enquiries": {
              url: urlBase + "/Staffs/:id/enquiries",
              method: "POST",
            },

            // INTERNAL. Use Staff.enquiries.destroyAll() instead.
            "prototype$__delete__enquiries": {
              url: urlBase + "/Staffs/:id/enquiries",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.enquiries.count() instead.
            "prototype$__count__enquiries": {
              url: urlBase + "/Staffs/:id/enquiries/count",
              method: "GET",
            },

            // INTERNAL. Use Staff.complaints() instead.
            "prototype$__get__complaints": {
              isArray: true,
              url: urlBase + "/Staffs/:id/complaints",
              method: "GET",
            },

            // INTERNAL. Use Staff.complaints.create() instead.
            "prototype$__create__complaints": {
              url: urlBase + "/Staffs/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Staff.complaints.destroyAll() instead.
            "prototype$__delete__complaints": {
              url: urlBase + "/Staffs/:id/complaints",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.complaints.count() instead.
            "prototype$__count__complaints": {
              url: urlBase + "/Staffs/:id/complaints/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#create
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Staffs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#createMany
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Staffs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#patchOrCreate
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Staffs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#replaceOrCreate
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Staffs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#upsertWithWhere
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Staffs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#exists
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Staffs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#findById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Staffs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#replaceById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Staffs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#find
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Staffs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#findOne
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Staffs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#updateAll
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Staffs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#deleteById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Staffs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#count
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Staffs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$patchAttributes
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Staffs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#createChangeStream
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Staffs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#login
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Staffs/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#logout
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Staffs/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$verify
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Staffs/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#confirm
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Staffs/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#resetPassword
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Staffs/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#changePassword
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Staffs/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#setPassword
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Staffs/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#forgotPassword
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Enter email to reset the password
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `email` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "forgotPassword": {
              url: urlBase + "/Staffs/forgotPassword",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#AddRoleIdtoallStaffs
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Add Role id to all Staff
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `status` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "AddRoleIdtoallStaffs": {
              url: urlBase + "/Staffs/AddRoleIdtoallStaffs",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.findById() instead.
            "::findById::School::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.destroyById() instead.
            "::destroyById::School::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.updateById() instead.
            "::updateById::School::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.staffs() instead.
            "::get::School::staffs": {
              isArray: true,
              url: urlBase + "/Schools/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.create() instead.
            "::create::School::staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.createMany() instead.
            "::createMany::School::staffs": {
              isArray: true,
              url: urlBase + "/Schools/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.destroyAll() instead.
            "::delete::School::staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.count() instead.
            "::count::School::staffs": {
              url: urlBase + "/Schools/:id/staffs/count",
              method: "GET",
            },

            // INTERNAL. Use Class.staff() instead.
            "::get::Class::staff": {
              url: urlBase + "/Classes/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Subject.staff() instead.
            "::get::Subject::staff": {
              url: urlBase + "/Subjects/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.staff() instead.
            "::get::Enquiry::staff": {
              url: urlBase + "/Enquiries/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.staff() instead.
            "::get::FOsubject::staff": {
              url: urlBase + "/FOsubjects/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Identity.staffs.findById() instead.
            "::findById::Identity::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/staffs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.staffs.destroyById() instead.
            "::destroyById::Identity::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/staffs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.staffs.updateById() instead.
            "::updateById::Identity::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/staffs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.staffs() instead.
            "::get::Identity::staffs": {
              isArray: true,
              url: urlBase + "/Identities/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use Identity.staffs.create() instead.
            "::create::Identity::staffs": {
              url: urlBase + "/Identities/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use Identity.staffs.createMany() instead.
            "::createMany::Identity::staffs": {
              isArray: true,
              url: urlBase + "/Identities/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use Identity.staffs.destroyAll() instead.
            "::delete::Identity::staffs": {
              url: urlBase + "/Identities/:id/staffs",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.staffs.count() instead.
            "::count::Identity::staffs": {
              url: urlBase + "/Identities/:id/staffs/count",
              method: "GET",
            },

            // INTERNAL. Use Complaint.staff() instead.
            "::get::Complaint::staff": {
              url: urlBase + "/Complaints/:id/staff",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#getCurrent
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Staffs" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Staff#upsert
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#updateOrCreate
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#patchOrCreateWithWhere
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#update
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#destroyById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#removeById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#updateAttributes
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Staff#getCachedCurrent
         * @methodOf lbServices.Staff
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Staff#login} or
         * {@link lbServices.Staff#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Staff instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Staff#isAuthenticated
         * @methodOf lbServices.Staff
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Staff#getCurrentId
         * @methodOf lbServices.Staff
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Staff#modelName
        * @propertyOf lbServices.Staff
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Staff`.
        */
        R.modelName = "Staff";


            /**
             * @ngdoc method
             * @name lbServices.Staff#school
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Staff::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff#subject
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Staff::subject"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Staff.enquiries
     * @header lbServices.Staff.enquiries
     * @object
     * @description
     *
     * The object `Staff.enquiries` groups methods
     * manipulating `Enquiry` instances related to `Staff`.
     *
     * Call {@link lbServices.Staff#enquiries Staff.enquiries()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Staff#enquiries
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Queries enquiries of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::get::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#count
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Counts enquiries of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.enquiries.count = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::count::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#create
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Creates a new instance in enquiries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.create = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::create::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#createMany
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Creates a new instance in enquiries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.createMany = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::createMany::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#destroyAll
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Deletes all enquiries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiries.destroyAll = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::delete::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#destroyById
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Delete a related item by id for enquiries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiries.destroyById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::destroyById::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#findById
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Find a related item by id for enquiries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.findById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::findById::Staff::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.enquiries#updateById
             * @methodOf lbServices.Staff.enquiries
             *
             * @description
             *
             * Update a related item by id for enquiries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `fk` – `{*}` - Foreign key for enquiries
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.updateById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::updateById::Staff::enquiries"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Staff.complaints
     * @header lbServices.Staff.complaints
     * @object
     * @description
     *
     * The object `Staff.complaints` groups methods
     * manipulating `Complaint` instances related to `Staff`.
     *
     * Call {@link lbServices.Staff#complaints Staff.complaints()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Staff#complaints
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Queries complaints of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::get::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#count
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Counts complaints of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.complaints.count = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::count::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#create
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Creates a new instance in complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.create = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::create::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#createMany
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Creates a new instance in complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.createMany = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::createMany::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#destroyAll
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Deletes all complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.complaints.destroyAll = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::delete::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#destroyById
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Delete a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.complaints.destroyById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::destroyById::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#findById
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Find a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.findById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::findById::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff.complaints#updateById
             * @methodOf lbServices.Staff.complaints
             *
             * @description
             *
             * Update a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.updateById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::updateById::Staff::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff#managerole
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Fetches belongsTo relation managerole.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Staff id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R.managerole = function() {
          var TargetResource = $injector.get("ManageRole");
          var action = TargetResource["::get::Staff::managerole"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Parent
 * @header lbServices.Parent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Parent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Parent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Parents/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__findById__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__updateById__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Parent.studentParents.findById() instead.
            "prototype$__findById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.destroyById() instead.
            "prototype$__destroyById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.updateById() instead.
            "prototype$__updateById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__get__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Queries accessTokens of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Parents/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__create__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Parents/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__delete__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Parents/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__count__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Counts accessTokens of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Parents/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents() instead.
            "prototype$__get__studentParents": {
              isArray: true,
              url: urlBase + "/Parents/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.create() instead.
            "prototype$__create__studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Parent.studentParents.destroyAll() instead.
            "prototype$__delete__studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.count() instead.
            "prototype$__count__studentParents": {
              url: urlBase + "/Parents/:id/studentParents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#create
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Parents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#createMany
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Parents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#patchOrCreate
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Parents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#replaceOrCreate
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Parents/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#upsertWithWhere
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Parents/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#exists
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Parents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#findById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Parents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#replaceById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Parents/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#find
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Parents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#findOne
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Parents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#updateAll
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Parents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#deleteById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Parents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#count
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Parents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$patchAttributes
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Parents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#createChangeStream
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Parents/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#login
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Parents/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#logout
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Parents/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$verify
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Parents/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#confirm
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Parents/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#resetPassword
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Parents/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#changePassword
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Parents/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#setPassword
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Parents/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#forgotPassword
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Enter email to reset the password
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `email` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "forgotPassword": {
              url: urlBase + "/Parents/forgotPassword",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#AddRoleIdtoallParents
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Add Role id to all Parent
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `status` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "AddRoleIdtoallParents": {
              url: urlBase + "/Parents/AddRoleIdtoallParents",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.parent() instead.
            "::get::StudentParent::parent": {
              url: urlBase + "/StudentParents/:id/parent",
              method: "GET",
            },

            // INTERNAL. Use Identity.parents.findById() instead.
            "::findById::Identity::parents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/parents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.parents.destroyById() instead.
            "::destroyById::Identity::parents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/parents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.parents.updateById() instead.
            "::updateById::Identity::parents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/parents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.parents() instead.
            "::get::Identity::parents": {
              isArray: true,
              url: urlBase + "/Identities/:id/parents",
              method: "GET",
            },

            // INTERNAL. Use Identity.parents.create() instead.
            "::create::Identity::parents": {
              url: urlBase + "/Identities/:id/parents",
              method: "POST",
            },

            // INTERNAL. Use Identity.parents.createMany() instead.
            "::createMany::Identity::parents": {
              isArray: true,
              url: urlBase + "/Identities/:id/parents",
              method: "POST",
            },

            // INTERNAL. Use Identity.parents.destroyAll() instead.
            "::delete::Identity::parents": {
              url: urlBase + "/Identities/:id/parents",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.parents.count() instead.
            "::count::Identity::parents": {
              url: urlBase + "/Identities/:id/parents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#getCurrent
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Parents" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Parent#upsert
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#updateOrCreate
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#patchOrCreateWithWhere
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#update
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#destroyById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#removeById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#updateAttributes
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Parent#getCachedCurrent
         * @methodOf lbServices.Parent
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Parent#login} or
         * {@link lbServices.Parent#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Parent instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Parent#isAuthenticated
         * @methodOf lbServices.Parent
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Parent#getCurrentId
         * @methodOf lbServices.Parent
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Parent#modelName
        * @propertyOf lbServices.Parent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Parent`.
        */
        R.modelName = "Parent";

    /**
     * @ngdoc object
     * @name lbServices.Parent.studentParents
     * @header lbServices.Parent.studentParents
     * @object
     * @description
     *
     * The object `Parent.studentParents` groups methods
     * manipulating `StudentParent` instances related to `Parent`.
     *
     * Call {@link lbServices.Parent#studentParents Parent.studentParents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Parent#studentParents
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Queries studentParents of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::get::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#count
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Counts studentParents of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentParents.count = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::count::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#create
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.create = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::create::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#createMany
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.createMany = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::createMany::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#destroyAll
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Deletes all studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyAll = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::delete::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#destroyById
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Delete a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::destroyById::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#findById
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Find a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.findById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::findById::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#updateById
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Update a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Parent id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.updateById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::updateById::Parent::studentParents"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.School
 * @header lbServices.School
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `School` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "School",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Schools/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use School.staffs.findById() instead.
            "prototype$__findById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.destroyById() instead.
            "prototype$__destroyById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.updateById() instead.
            "prototype$__updateById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.students.findById() instead.
            "prototype$__findById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.students.destroyById() instead.
            "prototype$__destroyById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.updateById() instead.
            "prototype$__updateById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.classes.findById() instead.
            "prototype$__findById__classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.classes.destroyById() instead.
            "prototype$__destroyById__classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.updateById() instead.
            "prototype$__updateById__classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.bus.findById() instead.
            "prototype$__findById__bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.bus.destroyById() instead.
            "prototype$__destroyById__bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.updateById() instead.
            "prototype$__updateById__bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.buses.findById() instead.
            "prototype$__findById__buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.buses.destroyById() instead.
            "prototype$__destroyById__buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.updateById() instead.
            "prototype$__updateById__buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.timetables.findById() instead.
            "prototype$__findById__timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.destroyById() instead.
            "prototype$__destroyById__timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.updateById() instead.
            "prototype$__updateById__timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.calendars() instead.
            "prototype$__get__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "GET",
            },

            // INTERNAL. Use School.calendars.create() instead.
            "prototype$__create__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "POST",
            },

            // INTERNAL. Use School.calendars.update() instead.
            "prototype$__update__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "PUT",
            },

            // INTERNAL. Use School.calendars.destroy() instead.
            "prototype$__destroy__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.findById() instead.
            "prototype$__findById__noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.destroyById() instead.
            "prototype$__destroyById__noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.updateById() instead.
            "prototype$__updateById__noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.assignments.findById() instead.
            "prototype$__findById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.destroyById() instead.
            "prototype$__destroyById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.updateById() instead.
            "prototype$__updateById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.libraries.findById() instead.
            "prototype$__findById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.destroyById() instead.
            "prototype$__destroyById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.updateById() instead.
            "prototype$__updateById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.studentParents.findById() instead.
            "prototype$__findById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.destroyById() instead.
            "prototype$__destroyById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.updateById() instead.
            "prototype$__updateById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.busServices.findById() instead.
            "prototype$__findById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.destroyById() instead.
            "prototype$__destroyById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.updateById() instead.
            "prototype$__updateById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.expensePayments.findById() instead.
            "prototype$__findById__expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.destroyById() instead.
            "prototype$__destroyById__expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.updateById() instead.
            "prototype$__updateById__expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feeSetups.findById() instead.
            "prototype$__findById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.destroyById() instead.
            "prototype$__destroyById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.updateById() instead.
            "prototype$__updateById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.busSubscriptions.findById() instead.
            "prototype$__findById__busSubscriptions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busSubscriptions/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.busSubscriptions.destroyById() instead.
            "prototype$__destroyById__busSubscriptions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busSubscriptions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.busSubscriptions.updateById() instead.
            "prototype$__updateById__busSubscriptions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busSubscriptions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.exams.findById() instead.
            "prototype$__findById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.exams.destroyById() instead.
            "prototype$__destroyById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.updateById() instead.
            "prototype$__updateById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.grades.findById() instead.
            "prototype$__findById__grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.grades.destroyById() instead.
            "prototype$__destroyById__grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.updateById() instead.
            "prototype$__updateById__grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.workingDays.findById() instead.
            "prototype$__findById__workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.destroyById() instead.
            "prototype$__destroyById__workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.updateById() instead.
            "prototype$__updateById__workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.chats.findById() instead.
            "prototype$__findById__chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/chats/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.chats.destroyById() instead.
            "prototype$__destroyById__chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/chats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.chats.updateById() instead.
            "prototype$__updateById__chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/chats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.leaves.findById() instead.
            "prototype$__findById__leaves": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/leaves/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.leaves.destroyById() instead.
            "prototype$__destroyById__leaves": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/leaves/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.leaves.updateById() instead.
            "prototype$__updateById__leaves": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/leaves/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.media.findById() instead.
            "prototype$__findById__media": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/media/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.media.destroyById() instead.
            "prototype$__destroyById__media": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/media/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.media.updateById() instead.
            "prototype$__updateById__media": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/media/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.lessonPlanners.findById() instead.
            "prototype$__findById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/lessonPlanners/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.lessonPlanners.destroyById() instead.
            "prototype$__destroyById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/lessonPlanners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.lessonPlanners.updateById() instead.
            "prototype$__updateById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/lessonPlanners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.enquiries.findById() instead.
            "prototype$__findById__enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/enquiries/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.enquiries.destroyById() instead.
            "prototype$__destroyById__enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/enquiries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.enquiries.updateById() instead.
            "prototype$__updateById__enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/enquiries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.fOsubjects.findById() instead.
            "prototype$__findById__fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOsubjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.fOsubjects.destroyById() instead.
            "prototype$__destroyById__fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOsubjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOsubjects.updateById() instead.
            "prototype$__updateById__fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOsubjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.fOexams.findById() instead.
            "prototype$__findById__fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOexams/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.fOexams.destroyById() instead.
            "prototype$__destroyById__fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOexams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOexams.updateById() instead.
            "prototype$__updateById__fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOexams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.examTypes.findById() instead.
            "prototype$__findById__examTypes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/examTypes/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.examTypes.destroyById() instead.
            "prototype$__destroyById__examTypes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/examTypes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.examTypes.updateById() instead.
            "prototype$__updateById__examTypes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/examTypes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feeCategories.findById() instead.
            "prototype$__findById__feeCategories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeCategories/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feeCategories.destroyById() instead.
            "prototype$__destroyById__feeCategories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeCategories/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeCategories.updateById() instead.
            "prototype$__updateById__feeCategories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeCategories/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.deposits.findById() instead.
            "prototype$__findById__deposits": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/deposits/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.deposits.destroyById() instead.
            "prototype$__destroyById__deposits": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/deposits/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.deposits.updateById() instead.
            "prototype$__updateById__deposits": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/deposits/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.staffs() instead.
            "prototype$__get__staffs": {
              isArray: true,
              url: urlBase + "/Schools/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.create() instead.
            "prototype$__create__staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.destroyAll() instead.
            "prototype$__delete__staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.count() instead.
            "prototype$__count__staffs": {
              url: urlBase + "/Schools/:id/staffs/count",
              method: "GET",
            },

            // INTERNAL. Use School.students() instead.
            "prototype$__get__students": {
              isArray: true,
              url: urlBase + "/Schools/:id/students",
              method: "GET",
            },

            // INTERNAL. Use School.students.create() instead.
            "prototype$__create__students": {
              url: urlBase + "/Schools/:id/students",
              method: "POST",
            },

            // INTERNAL. Use School.students.destroyAll() instead.
            "prototype$__delete__students": {
              url: urlBase + "/Schools/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.count() instead.
            "prototype$__count__students": {
              url: urlBase + "/Schools/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use School.classes() instead.
            "prototype$__get__classes": {
              isArray: true,
              url: urlBase + "/Schools/:id/classes",
              method: "GET",
            },

            // INTERNAL. Use School.classes.create() instead.
            "prototype$__create__classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "POST",
            },

            // INTERNAL. Use School.classes.destroyAll() instead.
            "prototype$__delete__classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.count() instead.
            "prototype$__count__classes": {
              url: urlBase + "/Schools/:id/classes/count",
              method: "GET",
            },

            // INTERNAL. Use School.bus() instead.
            "prototype$__get__bus": {
              isArray: true,
              url: urlBase + "/Schools/:id/bus",
              method: "GET",
            },

            // INTERNAL. Use School.bus.create() instead.
            "prototype$__create__bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "POST",
            },

            // INTERNAL. Use School.bus.destroyAll() instead.
            "prototype$__delete__bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.count() instead.
            "prototype$__count__bus": {
              url: urlBase + "/Schools/:id/bus/count",
              method: "GET",
            },

            // INTERNAL. Use School.buses() instead.
            "prototype$__get__buses": {
              isArray: true,
              url: urlBase + "/Schools/:id/buses",
              method: "GET",
            },

            // INTERNAL. Use School.buses.create() instead.
            "prototype$__create__buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "POST",
            },

            // INTERNAL. Use School.buses.destroyAll() instead.
            "prototype$__delete__buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.count() instead.
            "prototype$__count__buses": {
              url: urlBase + "/Schools/:id/buses/count",
              method: "GET",
            },

            // INTERNAL. Use School.timetables() instead.
            "prototype$__get__timetables": {
              isArray: true,
              url: urlBase + "/Schools/:id/timetables",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.create() instead.
            "prototype$__create__timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.destroyAll() instead.
            "prototype$__delete__timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.count() instead.
            "prototype$__count__timetables": {
              url: urlBase + "/Schools/:id/timetables/count",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards() instead.
            "prototype$__get__noticeboards": {
              isArray: true,
              url: urlBase + "/Schools/:id/noticeboards",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.create() instead.
            "prototype$__create__noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.destroyAll() instead.
            "prototype$__delete__noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.count() instead.
            "prototype$__count__noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards/count",
              method: "GET",
            },

            // INTERNAL. Use School.assignments() instead.
            "prototype$__get__assignments": {
              isArray: true,
              url: urlBase + "/Schools/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.create() instead.
            "prototype$__create__assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.destroyAll() instead.
            "prototype$__delete__assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.count() instead.
            "prototype$__count__assignments": {
              url: urlBase + "/Schools/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use School.libraries() instead.
            "prototype$__get__libraries": {
              isArray: true,
              url: urlBase + "/Schools/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.create() instead.
            "prototype$__create__libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.destroyAll() instead.
            "prototype$__delete__libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.count() instead.
            "prototype$__count__libraries": {
              url: urlBase + "/Schools/:id/libraries/count",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents() instead.
            "prototype$__get__studentParents": {
              isArray: true,
              url: urlBase + "/Schools/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.create() instead.
            "prototype$__create__studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use School.studentParents.destroyAll() instead.
            "prototype$__delete__studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.count() instead.
            "prototype$__count__studentParents": {
              url: urlBase + "/Schools/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use School.busServices() instead.
            "prototype$__get__busServices": {
              isArray: true,
              url: urlBase + "/Schools/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.create() instead.
            "prototype$__create__busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.destroyAll() instead.
            "prototype$__delete__busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.count() instead.
            "prototype$__count__busServices": {
              url: urlBase + "/Schools/:id/busServices/count",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments() instead.
            "prototype$__get__expensePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/expensePayments",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.create() instead.
            "prototype$__create__expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.destroyAll() instead.
            "prototype$__delete__expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.count() instead.
            "prototype$__count__expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments/count",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups() instead.
            "prototype$__get__feeSetups": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.create() instead.
            "prototype$__create__feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.destroyAll() instead.
            "prototype$__delete__feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.count() instead.
            "prototype$__count__feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use School.busSubscriptions() instead.
            "prototype$__get__busSubscriptions": {
              isArray: true,
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "GET",
            },

            // INTERNAL. Use School.busSubscriptions.create() instead.
            "prototype$__create__busSubscriptions": {
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use School.busSubscriptions.destroyAll() instead.
            "prototype$__delete__busSubscriptions": {
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "DELETE",
            },

            // INTERNAL. Use School.busSubscriptions.count() instead.
            "prototype$__count__busSubscriptions": {
              url: urlBase + "/Schools/:id/busSubscriptions/count",
              method: "GET",
            },

            // INTERNAL. Use School.exams() instead.
            "prototype$__get__exams": {
              isArray: true,
              url: urlBase + "/Schools/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use School.exams.create() instead.
            "prototype$__create__exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use School.exams.destroyAll() instead.
            "prototype$__delete__exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.count() instead.
            "prototype$__count__exams": {
              url: urlBase + "/Schools/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use School.grades() instead.
            "prototype$__get__grades": {
              isArray: true,
              url: urlBase + "/Schools/:id/grades",
              method: "GET",
            },

            // INTERNAL. Use School.grades.create() instead.
            "prototype$__create__grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "POST",
            },

            // INTERNAL. Use School.grades.destroyAll() instead.
            "prototype$__delete__grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.count() instead.
            "prototype$__count__grades": {
              url: urlBase + "/Schools/:id/grades/count",
              method: "GET",
            },

            // INTERNAL. Use School.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use School.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/Schools/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use School.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/Schools/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use School.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/Schools/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays() instead.
            "prototype$__get__workingDays": {
              isArray: true,
              url: urlBase + "/Schools/:id/workingDays",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.create() instead.
            "prototype$__create__workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.destroyAll() instead.
            "prototype$__delete__workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.count() instead.
            "prototype$__count__workingDays": {
              url: urlBase + "/Schools/:id/workingDays/count",
              method: "GET",
            },

            // INTERNAL. Use School.chats() instead.
            "prototype$__get__chats": {
              isArray: true,
              url: urlBase + "/Schools/:id/chats",
              method: "GET",
            },

            // INTERNAL. Use School.chats.create() instead.
            "prototype$__create__chats": {
              url: urlBase + "/Schools/:id/chats",
              method: "POST",
            },

            // INTERNAL. Use School.chats.destroyAll() instead.
            "prototype$__delete__chats": {
              url: urlBase + "/Schools/:id/chats",
              method: "DELETE",
            },

            // INTERNAL. Use School.chats.count() instead.
            "prototype$__count__chats": {
              url: urlBase + "/Schools/:id/chats/count",
              method: "GET",
            },

            // INTERNAL. Use School.leaves() instead.
            "prototype$__get__leaves": {
              isArray: true,
              url: urlBase + "/Schools/:id/leaves",
              method: "GET",
            },

            // INTERNAL. Use School.leaves.create() instead.
            "prototype$__create__leaves": {
              url: urlBase + "/Schools/:id/leaves",
              method: "POST",
            },

            // INTERNAL. Use School.leaves.destroyAll() instead.
            "prototype$__delete__leaves": {
              url: urlBase + "/Schools/:id/leaves",
              method: "DELETE",
            },

            // INTERNAL. Use School.leaves.count() instead.
            "prototype$__count__leaves": {
              url: urlBase + "/Schools/:id/leaves/count",
              method: "GET",
            },

            // INTERNAL. Use School.media() instead.
            "prototype$__get__media": {
              isArray: true,
              url: urlBase + "/Schools/:id/media",
              method: "GET",
            },

            // INTERNAL. Use School.media.create() instead.
            "prototype$__create__media": {
              url: urlBase + "/Schools/:id/media",
              method: "POST",
            },

            // INTERNAL. Use School.media.destroyAll() instead.
            "prototype$__delete__media": {
              url: urlBase + "/Schools/:id/media",
              method: "DELETE",
            },

            // INTERNAL. Use School.media.count() instead.
            "prototype$__count__media": {
              url: urlBase + "/Schools/:id/media/count",
              method: "GET",
            },

            // INTERNAL. Use School.lessonPlanners() instead.
            "prototype$__get__lessonPlanners": {
              isArray: true,
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "GET",
            },

            // INTERNAL. Use School.lessonPlanners.create() instead.
            "prototype$__create__lessonPlanners": {
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use School.lessonPlanners.destroyAll() instead.
            "prototype$__delete__lessonPlanners": {
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "DELETE",
            },

            // INTERNAL. Use School.lessonPlanners.count() instead.
            "prototype$__count__lessonPlanners": {
              url: urlBase + "/Schools/:id/lessonPlanners/count",
              method: "GET",
            },

            // INTERNAL. Use School.enquiries() instead.
            "prototype$__get__enquiries": {
              isArray: true,
              url: urlBase + "/Schools/:id/enquiries",
              method: "GET",
            },

            // INTERNAL. Use School.enquiries.create() instead.
            "prototype$__create__enquiries": {
              url: urlBase + "/Schools/:id/enquiries",
              method: "POST",
            },

            // INTERNAL. Use School.enquiries.destroyAll() instead.
            "prototype$__delete__enquiries": {
              url: urlBase + "/Schools/:id/enquiries",
              method: "DELETE",
            },

            // INTERNAL. Use School.enquiries.count() instead.
            "prototype$__count__enquiries": {
              url: urlBase + "/Schools/:id/enquiries/count",
              method: "GET",
            },

            // INTERNAL. Use School.fOsubjects() instead.
            "prototype$__get__fOsubjects": {
              isArray: true,
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "GET",
            },

            // INTERNAL. Use School.fOsubjects.create() instead.
            "prototype$__create__fOsubjects": {
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "POST",
            },

            // INTERNAL. Use School.fOsubjects.destroyAll() instead.
            "prototype$__delete__fOsubjects": {
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOsubjects.count() instead.
            "prototype$__count__fOsubjects": {
              url: urlBase + "/Schools/:id/fOsubjects/count",
              method: "GET",
            },

            // INTERNAL. Use School.fOexams() instead.
            "prototype$__get__fOexams": {
              isArray: true,
              url: urlBase + "/Schools/:id/fOexams",
              method: "GET",
            },

            // INTERNAL. Use School.fOexams.create() instead.
            "prototype$__create__fOexams": {
              url: urlBase + "/Schools/:id/fOexams",
              method: "POST",
            },

            // INTERNAL. Use School.fOexams.destroyAll() instead.
            "prototype$__delete__fOexams": {
              url: urlBase + "/Schools/:id/fOexams",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOexams.count() instead.
            "prototype$__count__fOexams": {
              url: urlBase + "/Schools/:id/fOexams/count",
              method: "GET",
            },

            // INTERNAL. Use School.examTypes() instead.
            "prototype$__get__examTypes": {
              isArray: true,
              url: urlBase + "/Schools/:id/examTypes",
              method: "GET",
            },

            // INTERNAL. Use School.examTypes.create() instead.
            "prototype$__create__examTypes": {
              url: urlBase + "/Schools/:id/examTypes",
              method: "POST",
            },

            // INTERNAL. Use School.examTypes.destroyAll() instead.
            "prototype$__delete__examTypes": {
              url: urlBase + "/Schools/:id/examTypes",
              method: "DELETE",
            },

            // INTERNAL. Use School.examTypes.count() instead.
            "prototype$__count__examTypes": {
              url: urlBase + "/Schools/:id/examTypes/count",
              method: "GET",
            },

            // INTERNAL. Use School.feeCategories() instead.
            "prototype$__get__feeCategories": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeCategories",
              method: "GET",
            },

            // INTERNAL. Use School.feeCategories.create() instead.
            "prototype$__create__feeCategories": {
              url: urlBase + "/Schools/:id/feeCategories",
              method: "POST",
            },

            // INTERNAL. Use School.feeCategories.destroyAll() instead.
            "prototype$__delete__feeCategories": {
              url: urlBase + "/Schools/:id/feeCategories",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeCategories.count() instead.
            "prototype$__count__feeCategories": {
              url: urlBase + "/Schools/:id/feeCategories/count",
              method: "GET",
            },

            // INTERNAL. Use School.deposits() instead.
            "prototype$__get__deposits": {
              isArray: true,
              url: urlBase + "/Schools/:id/deposits",
              method: "GET",
            },

            // INTERNAL. Use School.deposits.create() instead.
            "prototype$__create__deposits": {
              url: urlBase + "/Schools/:id/deposits",
              method: "POST",
            },

            // INTERNAL. Use School.deposits.destroyAll() instead.
            "prototype$__delete__deposits": {
              url: urlBase + "/Schools/:id/deposits",
              method: "DELETE",
            },

            // INTERNAL. Use School.deposits.count() instead.
            "prototype$__count__deposits": {
              url: urlBase + "/Schools/:id/deposits/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#create
             * @methodOf lbServices.School
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Schools",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#createMany
             * @methodOf lbServices.School
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Schools",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#patchOrCreate
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Schools",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#replaceOrCreate
             * @methodOf lbServices.School
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Schools/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#upsertWithWhere
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Schools/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#exists
             * @methodOf lbServices.School
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Schools/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#findById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Schools/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#replaceById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Schools/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#find
             * @methodOf lbServices.School
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Schools",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#findOne
             * @methodOf lbServices.School
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Schools/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#updateAll
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Schools/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#deleteById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Schools/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#count
             * @methodOf lbServices.School
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Schools/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#prototype$patchAttributes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Schools/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#createChangeStream
             * @methodOf lbServices.School
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Schools/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.school() instead.
            "::get::Student::school": {
              url: urlBase + "/Students/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Staff.school() instead.
            "::get::Staff::school": {
              url: urlBase + "/Staffs/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Class.school() instead.
            "::get::Class::school": {
              url: urlBase + "/Classes/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Admin.school() instead.
            "::get::Admin::school": {
              url: urlBase + "/Admins/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Subject.school() instead.
            "::get::Subject::school": {
              url: urlBase + "/Subjects/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Bus.school() instead.
            "::get::Bus::school": {
              url: urlBase + "/Buses/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Timetable.school() instead.
            "::get::Timetable::school": {
              url: urlBase + "/Timetables/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Noticeboard.school() instead.
            "::get::Noticeboard::school": {
              url: urlBase + "/Noticeboards/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Assignment.school() instead.
            "::get::Assignment::school": {
              url: urlBase + "/Assignments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Library.school() instead.
            "::get::Library::school": {
              url: urlBase + "/Libraries/:id/school",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.school() instead.
            "::get::StudentParent::school": {
              url: urlBase + "/StudentParents/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Attendance.school() instead.
            "::get::Attendance::school": {
              url: urlBase + "/Attendances/:id/school",
              method: "GET",
            },

            // INTERNAL. Use BusService.school() instead.
            "::get::BusService::school": {
              url: urlBase + "/BusServices/:id/school",
              method: "GET",
            },

            // INTERNAL. Use ExpensePayment.school() instead.
            "::get::ExpensePayment::school": {
              url: urlBase + "/ExpensePayments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.school() instead.
            "::get::FeeSetup::school": {
              url: urlBase + "/FeeSetups/:id/school",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.school() instead.
            "::get::BusSubscription::school": {
              url: urlBase + "/BusSubscriptions/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Exam.school() instead.
            "::get::Exam::school": {
              url: urlBase + "/Exams/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Grade.school() instead.
            "::get::Grade::school": {
              url: urlBase + "/Grades/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.school() instead.
            "::get::FeePayment::school": {
              url: urlBase + "/FeePayments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.school() instead.
            "::get::WorkingDay::school": {
              url: urlBase + "/WorkingDays/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Chat.school() instead.
            "::get::Chat::school": {
              url: urlBase + "/Chats/:id/school",
              method: "GET",
            },

            // INTERNAL. Use SMUser.school() instead.
            "::get::SMUser::school": {
              url: urlBase + "/SMUsers/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Leave.school() instead.
            "::get::Leave::school": {
              url: urlBase + "/Leaves/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Media.school() instead.
            "::get::Media::school": {
              url: urlBase + "/Media/:id/school",
              method: "GET",
            },

            // INTERNAL. Use LessonPlanner.school() instead.
            "::get::LessonPlanner::school": {
              url: urlBase + "/LessonPlanners/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.school() instead.
            "::get::Enquiry::school": {
              url: urlBase + "/Enquiries/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.school() instead.
            "::get::FOsubject::school": {
              url: urlBase + "/FOsubjects/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FOexam.school() instead.
            "::get::FOexam::school": {
              url: urlBase + "/FOexams/:id/school",
              method: "GET",
            },

            // INTERNAL. Use ExamType.school() instead.
            "::get::ExamType::school": {
              url: urlBase + "/ExamTypes/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.school() instead.
            "::get::FeeCategory::school": {
              url: urlBase + "/FeeCategories/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.School() instead.
            "::get::Onlinetransactions::School": {
              url: urlBase + "/onlinetransactions/:id/School",
              method: "GET",
            },

            // INTERNAL. Use Btperms.school() instead.
            "::get::Btperms::school": {
              url: urlBase + "/btperms/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Accountant.school() instead.
            "::get::Accountant::school": {
              url: urlBase + "/Accountants/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.school() instead.
            "::get::Smsreport::school": {
              url: urlBase + "/smsreports/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Complaint.school() instead.
            "::get::Complaint::school": {
              url: urlBase + "/Complaints/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Visitor.school() instead.
            "::get::Visitor::school": {
              url: urlBase + "/Visitors/:id/school",
              method: "GET",
            },

            // INTERNAL. Use AcademicBatch.school() instead.
            "::get::AcademicBatch::school": {
              url: urlBase + "/AcademicBatches/:id/school",
              method: "GET",
            },

            // INTERNAL. Use ManageRole.school() instead.
            "::get::ManageRole::school": {
              url: urlBase + "/ManageRoles/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Deposit.school() instead.
            "::get::Deposit::school": {
              url: urlBase + "/Deposits/:id/school",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.School#upsert
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.School#updateOrCreate
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.School#patchOrCreateWithWhere
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.School#update
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.School#destroyById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.School#removeById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.School#updateAttributes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.School#modelName
        * @propertyOf lbServices.School
        * @description
        * The name of the model represented by this $resource,
        * i.e. `School`.
        */
        R.modelName = "School";

    /**
     * @ngdoc object
     * @name lbServices.School.staffs
     * @header lbServices.School.staffs
     * @object
     * @description
     *
     * The object `School.staffs` groups methods
     * manipulating `Staff` instances related to `School`.
     *
     * Call {@link lbServices.School#staffs School.staffs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#staffs
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries staffs of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#count
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Counts staffs of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.staffs.count = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::count::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#create
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Creates a new instance in staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.create = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::create::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#createMany
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Creates a new instance in staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.createMany = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::createMany::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#destroyAll
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Deletes all staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.staffs.destroyAll = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::delete::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#destroyById
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Delete a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.staffs.destroyById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::destroyById::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#findById
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Find a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.findById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::findById::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#updateById
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Update a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.updateById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::updateById::School::staffs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.students
     * @header lbServices.School.students
     * @object
     * @description
     *
     * The object `School.students` groups methods
     * manipulating `Student` instances related to `School`.
     *
     * Call {@link lbServices.School#students School.students()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#students
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries students of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#count
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Counts students of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.students.count = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::count::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#create
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.create = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::create::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#createMany
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.createMany = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::createMany::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#destroyAll
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Deletes all students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyAll = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::delete::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#destroyById
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Delete a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::destroyById::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#findById
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Find a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.findById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::findById::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#updateById
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Update a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.updateById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::updateById::School::students"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.classes
     * @header lbServices.School.classes
     * @object
     * @description
     *
     * The object `School.classes` groups methods
     * manipulating `Class` instances related to `School`.
     *
     * Call {@link lbServices.School#classes School.classes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#classes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries classes of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#count
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Counts classes of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.classes.count = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::count::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#create
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Creates a new instance in classes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.create = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::create::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#createMany
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Creates a new instance in classes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.createMany = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::createMany::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#destroyAll
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Deletes all classes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.classes.destroyAll = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::delete::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#destroyById
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Delete a related item by id for classes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for classes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.classes.destroyById = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::destroyById::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#findById
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Find a related item by id for classes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for classes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.findById = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::findById::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#updateById
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Update a related item by id for classes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for classes
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.updateById = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::updateById::School::classes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.bus
     * @header lbServices.School.bus
     * @object
     * @description
     *
     * The object `School.bus` groups methods
     * manipulating `Bus` instances related to `School`.
     *
     * Call {@link lbServices.School#bus School.bus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#bus
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries bus of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::get::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#count
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Counts bus of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bus.count = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::count::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#create
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Creates a new instance in bus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.create = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::create::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#createMany
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Creates a new instance in bus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.createMany = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::createMany::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#destroyAll
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Deletes all bus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bus.destroyAll = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::delete::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#destroyById
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Delete a related item by id for bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for bus
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bus.destroyById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::destroyById::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#findById
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Find a related item by id for bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for bus
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.findById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::findById::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#updateById
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Update a related item by id for bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for bus
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.updateById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::updateById::School::bus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.buses
     * @header lbServices.School.buses
     * @object
     * @description
     *
     * The object `School.buses` groups methods
     * manipulating `Bus` instances related to `School`.
     *
     * Call {@link lbServices.School#buses School.buses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#buses
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries buses of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::get::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#count
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Counts buses of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.buses.count = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::count::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#create
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Creates a new instance in buses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.create = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::create::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#createMany
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Creates a new instance in buses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.createMany = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::createMany::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#destroyAll
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Deletes all buses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.buses.destroyAll = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::delete::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#destroyById
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Delete a related item by id for buses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for buses
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.buses.destroyById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::destroyById::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#findById
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Find a related item by id for buses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for buses
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.findById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::findById::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#updateById
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Update a related item by id for buses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for buses
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.updateById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::updateById::School::buses"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.timetables
     * @header lbServices.School.timetables
     * @object
     * @description
     *
     * The object `School.timetables` groups methods
     * manipulating `Timetable` instances related to `School`.
     *
     * Call {@link lbServices.School#timetables School.timetables()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#timetables
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries timetables of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::get::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#count
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Counts timetables of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.timetables.count = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::count::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#create
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Creates a new instance in timetables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.create = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::create::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#createMany
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Creates a new instance in timetables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.createMany = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::createMany::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#destroyAll
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Deletes all timetables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.timetables.destroyAll = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::delete::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#destroyById
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Delete a related item by id for timetables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for timetables
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.timetables.destroyById = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::destroyById::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#findById
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Find a related item by id for timetables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for timetables
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.findById = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::findById::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#updateById
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Update a related item by id for timetables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for timetables
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.updateById = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::updateById::School::timetables"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.calendars
     * @header lbServices.School.calendars
     * @object
     * @description
     *
     * The object `School.calendars` groups methods
     * manipulating `Calendar` instances related to `School`.
     *
     * Call {@link lbServices.School#calendars School.calendars()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#calendars
             * @methodOf lbServices.School
             *
             * @description
             *
             * Fetches hasOne relation calendars.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::get::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#create
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Creates a new instance in calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars.create = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::create::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#createMany
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Creates a new instance in calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars.createMany = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::createMany::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#destroy
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Deletes calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.calendars.destroy = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::destroy::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#update
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Update calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars.update = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::update::School::calendars"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.noticeboards
     * @header lbServices.School.noticeboards
     * @object
     * @description
     *
     * The object `School.noticeboards` groups methods
     * manipulating `Noticeboard` instances related to `School`.
     *
     * Call {@link lbServices.School#noticeboards School.noticeboards()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#noticeboards
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries noticeboards of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::get::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#count
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Counts noticeboards of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.noticeboards.count = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::count::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#create
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Creates a new instance in noticeboards of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.create = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::create::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#createMany
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Creates a new instance in noticeboards of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.createMany = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::createMany::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#destroyAll
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Deletes all noticeboards of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.noticeboards.destroyAll = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::delete::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#destroyById
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Delete a related item by id for noticeboards.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for noticeboards
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.noticeboards.destroyById = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::destroyById::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#findById
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Find a related item by id for noticeboards.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for noticeboards
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.findById = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::findById::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#updateById
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Update a related item by id for noticeboards.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for noticeboards
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.updateById = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::updateById::School::noticeboards"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.assignments
     * @header lbServices.School.assignments
     * @object
     * @description
     *
     * The object `School.assignments` groups methods
     * manipulating `Assignment` instances related to `School`.
     *
     * Call {@link lbServices.School#assignments School.assignments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#assignments
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries assignments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::get::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#count
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Counts assignments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assignments.count = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::count::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#create
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.create = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::create::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#createMany
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.createMany = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::createMany::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#destroyAll
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Deletes all assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyAll = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::delete::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#destroyById
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Delete a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::destroyById::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#findById
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Find a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.findById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::findById::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#updateById
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Update a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.updateById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::updateById::School::assignments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.libraries
     * @header lbServices.School.libraries
     * @object
     * @description
     *
     * The object `School.libraries` groups methods
     * manipulating `Library` instances related to `School`.
     *
     * Call {@link lbServices.School#libraries School.libraries()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#libraries
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries libraries of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::get::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#count
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Counts libraries of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.libraries.count = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::count::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#create
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.create = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::create::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#createMany
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.createMany = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::createMany::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#destroyAll
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Deletes all libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyAll = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::delete::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#destroyById
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Delete a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::destroyById::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#findById
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Find a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.findById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::findById::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#updateById
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Update a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.updateById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::updateById::School::libraries"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.studentParents
     * @header lbServices.School.studentParents
     * @object
     * @description
     *
     * The object `School.studentParents` groups methods
     * manipulating `StudentParent` instances related to `School`.
     *
     * Call {@link lbServices.School#studentParents School.studentParents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#studentParents
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries studentParents of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::get::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#count
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Counts studentParents of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentParents.count = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::count::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#create
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.create = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::create::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#createMany
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.createMany = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::createMany::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#destroyAll
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Deletes all studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyAll = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::delete::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#destroyById
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Delete a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::destroyById::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#findById
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Find a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.findById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::findById::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#updateById
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Update a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.updateById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::updateById::School::studentParents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.busServices
     * @header lbServices.School.busServices
     * @object
     * @description
     *
     * The object `School.busServices` groups methods
     * manipulating `BusService` instances related to `School`.
     *
     * Call {@link lbServices.School#busServices School.busServices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#busServices
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries busServices of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::get::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#count
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Counts busServices of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.busServices.count = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::count::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#create
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.create = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::create::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#createMany
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.createMany = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::createMany::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#destroyAll
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Deletes all busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyAll = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::delete::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#destroyById
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Delete a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::destroyById::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#findById
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Find a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.findById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::findById::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#updateById
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Update a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.updateById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::updateById::School::busServices"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.expensePayments
     * @header lbServices.School.expensePayments
     * @object
     * @description
     *
     * The object `School.expensePayments` groups methods
     * manipulating `ExpensePayment` instances related to `School`.
     *
     * Call {@link lbServices.School#expensePayments School.expensePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#expensePayments
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries expensePayments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::get::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#count
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Counts expensePayments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.expensePayments.count = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::count::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#create
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Creates a new instance in expensePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.create = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::create::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#createMany
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Creates a new instance in expensePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.createMany = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::createMany::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#destroyAll
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Deletes all expensePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.expensePayments.destroyAll = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::delete::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#destroyById
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Delete a related item by id for expensePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for expensePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.expensePayments.destroyById = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::destroyById::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#findById
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Find a related item by id for expensePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for expensePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.findById = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::findById::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#updateById
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Update a related item by id for expensePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for expensePayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.updateById = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::updateById::School::expensePayments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.feeSetups
     * @header lbServices.School.feeSetups
     * @object
     * @description
     *
     * The object `School.feeSetups` groups methods
     * manipulating `FeeSetup` instances related to `School`.
     *
     * Call {@link lbServices.School#feeSetups School.feeSetups()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#feeSetups
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries feeSetups of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#count
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Counts feeSetups of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeSetups.count = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::count::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#create
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.create = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::create::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#createMany
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.createMany = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::createMany::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#destroyAll
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Deletes all feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyAll = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::delete::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#destroyById
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Delete a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::destroyById::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#findById
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Find a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.findById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::findById::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#updateById
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Update a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.updateById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::updateById::School::feeSetups"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.busSubscriptions
     * @header lbServices.School.busSubscriptions
     * @object
     * @description
     *
     * The object `School.busSubscriptions` groups methods
     * manipulating `BusSubscription` instances related to `School`.
     *
     * Call {@link lbServices.School#busSubscriptions School.busSubscriptions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#busSubscriptions
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries busSubscriptions of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::get::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#count
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Counts busSubscriptions of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.busSubscriptions.count = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::count::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#create
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Creates a new instance in busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.create = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::create::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#createMany
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Creates a new instance in busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.createMany = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::createMany::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#destroyAll
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Deletes all busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busSubscriptions.destroyAll = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::delete::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#destroyById
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Delete a related item by id for busSubscriptions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for busSubscriptions
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busSubscriptions.destroyById = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::destroyById::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#findById
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Find a related item by id for busSubscriptions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for busSubscriptions
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.findById = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::findById::School::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busSubscriptions#updateById
             * @methodOf lbServices.School.busSubscriptions
             *
             * @description
             *
             * Update a related item by id for busSubscriptions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for busSubscriptions
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.updateById = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::updateById::School::busSubscriptions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.exams
     * @header lbServices.School.exams
     * @object
     * @description
     *
     * The object `School.exams` groups methods
     * manipulating `Exam` instances related to `School`.
     *
     * Call {@link lbServices.School#exams School.exams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#exams
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries exams of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#count
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Counts exams of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.exams.count = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::count::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#create
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.create = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::create::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#createMany
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.createMany = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::createMany::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#destroyAll
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Deletes all exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyAll = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::delete::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#destroyById
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Delete a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::destroyById::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#findById
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Find a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.findById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::findById::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#updateById
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Update a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.updateById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::updateById::School::exams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.grades
     * @header lbServices.School.grades
     * @object
     * @description
     *
     * The object `School.grades` groups methods
     * manipulating `Grade` instances related to `School`.
     *
     * Call {@link lbServices.School#grades School.grades()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#grades
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries grades of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::get::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#count
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Counts grades of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.grades.count = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::count::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#create
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Creates a new instance in grades of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.create = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::create::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#createMany
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Creates a new instance in grades of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.createMany = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::createMany::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#destroyAll
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Deletes all grades of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.grades.destroyAll = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::delete::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#destroyById
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Delete a related item by id for grades.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for grades
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.grades.destroyById = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::destroyById::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#findById
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Find a related item by id for grades.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for grades
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.findById = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::findById::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#updateById
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Update a related item by id for grades.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for grades
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.updateById = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::updateById::School::grades"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.feePayments
     * @header lbServices.School.feePayments
     * @object
     * @description
     *
     * The object `School.feePayments` groups methods
     * manipulating `FeePayment` instances related to `School`.
     *
     * Call {@link lbServices.School#feePayments School.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#feePayments
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries feePayments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#count
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Counts feePayments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#create
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#createMany
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#destroyAll
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#destroyById
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#findById
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::School::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feePayments#updateById
             * @methodOf lbServices.School.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::School::feePayments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.workingDays
     * @header lbServices.School.workingDays
     * @object
     * @description
     *
     * The object `School.workingDays` groups methods
     * manipulating `WorkingDay` instances related to `School`.
     *
     * Call {@link lbServices.School#workingDays School.workingDays()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#workingDays
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries workingDays of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::get::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#count
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Counts workingDays of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.workingDays.count = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::count::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#create
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Creates a new instance in workingDays of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.create = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::create::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#createMany
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Creates a new instance in workingDays of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.createMany = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::createMany::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#destroyAll
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Deletes all workingDays of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.workingDays.destroyAll = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::delete::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#destroyById
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Delete a related item by id for workingDays.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for workingDays
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.workingDays.destroyById = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::destroyById::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#findById
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Find a related item by id for workingDays.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for workingDays
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.findById = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::findById::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#updateById
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Update a related item by id for workingDays.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for workingDays
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.updateById = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::updateById::School::workingDays"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.chats
     * @header lbServices.School.chats
     * @object
     * @description
     *
     * The object `School.chats` groups methods
     * manipulating `Chat` instances related to `School`.
     *
     * Call {@link lbServices.School#chats School.chats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#chats
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries chats of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::get::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#count
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Counts chats of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.chats.count = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::count::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#create
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Creates a new instance in chats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.create = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::create::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#createMany
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Creates a new instance in chats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.createMany = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::createMany::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#destroyAll
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Deletes all chats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chats.destroyAll = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::delete::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#destroyById
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Delete a related item by id for chats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for chats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chats.destroyById = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::destroyById::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#findById
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Find a related item by id for chats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for chats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.findById = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::findById::School::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.chats#updateById
             * @methodOf lbServices.School.chats
             *
             * @description
             *
             * Update a related item by id for chats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for chats
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.updateById = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::updateById::School::chats"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.leaves
     * @header lbServices.School.leaves
     * @object
     * @description
     *
     * The object `School.leaves` groups methods
     * manipulating `Leave` instances related to `School`.
     *
     * Call {@link lbServices.School#leaves School.leaves()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#leaves
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries leaves of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R.leaves = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::get::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#count
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Counts leaves of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.leaves.count = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::count::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#create
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Creates a new instance in leaves of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R.leaves.create = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::create::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#createMany
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Creates a new instance in leaves of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R.leaves.createMany = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::createMany::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#destroyAll
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Deletes all leaves of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.leaves.destroyAll = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::delete::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#destroyById
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Delete a related item by id for leaves.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for leaves
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.leaves.destroyById = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::destroyById::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#findById
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Find a related item by id for leaves.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for leaves
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R.leaves.findById = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::findById::School::leaves"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.leaves#updateById
             * @methodOf lbServices.School.leaves
             *
             * @description
             *
             * Update a related item by id for leaves.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for leaves
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R.leaves.updateById = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::updateById::School::leaves"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.media
     * @header lbServices.School.media
     * @object
     * @description
     *
     * The object `School.media` groups methods
     * manipulating `Media` instances related to `School`.
     *
     * Call {@link lbServices.School#media School.media()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#media
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries media of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R.media = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::get::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#count
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Counts media of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.media.count = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::count::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#create
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Creates a new instance in media of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R.media.create = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::create::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#createMany
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Creates a new instance in media of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R.media.createMany = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::createMany::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#destroyAll
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Deletes all media of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.media.destroyAll = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::delete::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#destroyById
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Delete a related item by id for media.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for media
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.media.destroyById = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::destroyById::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#findById
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Find a related item by id for media.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for media
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R.media.findById = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::findById::School::media"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.media#updateById
             * @methodOf lbServices.School.media
             *
             * @description
             *
             * Update a related item by id for media.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for media
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R.media.updateById = function() {
          var TargetResource = $injector.get("Media");
          var action = TargetResource["::updateById::School::media"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.lessonPlanners
     * @header lbServices.School.lessonPlanners
     * @object
     * @description
     *
     * The object `School.lessonPlanners` groups methods
     * manipulating `LessonPlanner` instances related to `School`.
     *
     * Call {@link lbServices.School#lessonPlanners School.lessonPlanners()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#lessonPlanners
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries lessonPlanners of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::get::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#count
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Counts lessonPlanners of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.lessonPlanners.count = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::count::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#create
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Creates a new instance in lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.create = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::create::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#createMany
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Creates a new instance in lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.createMany = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::createMany::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#destroyAll
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Deletes all lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonPlanners.destroyAll = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::delete::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#destroyById
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Delete a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonPlanners.destroyById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::destroyById::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#findById
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Find a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.findById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::findById::School::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.lessonPlanners#updateById
             * @methodOf lbServices.School.lessonPlanners
             *
             * @description
             *
             * Update a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.updateById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::updateById::School::lessonPlanners"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.enquiries
     * @header lbServices.School.enquiries
     * @object
     * @description
     *
     * The object `School.enquiries` groups methods
     * manipulating `Enquiry` instances related to `School`.
     *
     * Call {@link lbServices.School#enquiries School.enquiries()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#enquiries
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries enquiries of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::get::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#count
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Counts enquiries of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.enquiries.count = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::count::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#create
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Creates a new instance in enquiries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.create = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::create::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#createMany
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Creates a new instance in enquiries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.createMany = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::createMany::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#destroyAll
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Deletes all enquiries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiries.destroyAll = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::delete::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#destroyById
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Delete a related item by id for enquiries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiries.destroyById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::destroyById::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#findById
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Find a related item by id for enquiries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.findById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::findById::School::enquiries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.enquiries#updateById
             * @methodOf lbServices.School.enquiries
             *
             * @description
             *
             * Update a related item by id for enquiries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for enquiries
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiries.updateById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::updateById::School::enquiries"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.fOsubjects
     * @header lbServices.School.fOsubjects
     * @object
     * @description
     *
     * The object `School.fOsubjects` groups methods
     * manipulating `FOsubject` instances related to `School`.
     *
     * Call {@link lbServices.School#fOsubjects School.fOsubjects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#fOsubjects
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries fOsubjects of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::get::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#count
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Counts fOsubjects of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOsubjects.count = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::count::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#create
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Creates a new instance in fOsubjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.create = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::create::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#createMany
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Creates a new instance in fOsubjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.createMany = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::createMany::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#destroyAll
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Deletes all fOsubjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOsubjects.destroyAll = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::delete::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#destroyById
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Delete a related item by id for fOsubjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOsubjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOsubjects.destroyById = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::destroyById::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#findById
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Find a related item by id for fOsubjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOsubjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.findById = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::findById::School::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOsubjects#updateById
             * @methodOf lbServices.School.fOsubjects
             *
             * @description
             *
             * Update a related item by id for fOsubjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for fOsubjects
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.updateById = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::updateById::School::fOsubjects"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.fOexams
     * @header lbServices.School.fOexams
     * @object
     * @description
     *
     * The object `School.fOexams` groups methods
     * manipulating `FOexam` instances related to `School`.
     *
     * Call {@link lbServices.School#fOexams School.fOexams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#fOexams
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries fOexams of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::get::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#count
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Counts fOexams of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOexams.count = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::count::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#create
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Creates a new instance in fOexams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.create = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::create::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#createMany
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Creates a new instance in fOexams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.createMany = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::createMany::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#destroyAll
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Deletes all fOexams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOexams.destroyAll = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::delete::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#destroyById
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Delete a related item by id for fOexams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOexams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOexams.destroyById = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::destroyById::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#findById
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Find a related item by id for fOexams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOexams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.findById = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::findById::School::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.fOexams#updateById
             * @methodOf lbServices.School.fOexams
             *
             * @description
             *
             * Update a related item by id for fOexams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for fOexams
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.updateById = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::updateById::School::fOexams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.examTypes
     * @header lbServices.School.examTypes
     * @object
     * @description
     *
     * The object `School.examTypes` groups methods
     * manipulating `ExamType` instances related to `School`.
     *
     * Call {@link lbServices.School#examTypes School.examTypes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#examTypes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries examTypes of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R.examTypes = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::get::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#count
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Counts examTypes of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.examTypes.count = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::count::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#create
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Creates a new instance in examTypes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R.examTypes.create = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::create::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#createMany
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Creates a new instance in examTypes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R.examTypes.createMany = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::createMany::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#destroyAll
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Deletes all examTypes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.examTypes.destroyAll = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::delete::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#destroyById
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Delete a related item by id for examTypes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for examTypes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.examTypes.destroyById = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::destroyById::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#findById
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Find a related item by id for examTypes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for examTypes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R.examTypes.findById = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::findById::School::examTypes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.examTypes#updateById
             * @methodOf lbServices.School.examTypes
             *
             * @description
             *
             * Update a related item by id for examTypes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for examTypes
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R.examTypes.updateById = function() {
          var TargetResource = $injector.get("ExamType");
          var action = TargetResource["::updateById::School::examTypes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.feeCategories
     * @header lbServices.School.feeCategories
     * @object
     * @description
     *
     * The object `School.feeCategories` groups methods
     * manipulating `FeeCategory` instances related to `School`.
     *
     * Call {@link lbServices.School#feeCategories School.feeCategories()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#feeCategories
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries feeCategories of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R.feeCategories = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::get::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#count
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Counts feeCategories of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeCategories.count = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::count::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#create
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Creates a new instance in feeCategories of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R.feeCategories.create = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::create::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#createMany
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Creates a new instance in feeCategories of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R.feeCategories.createMany = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::createMany::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#destroyAll
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Deletes all feeCategories of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeCategories.destroyAll = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::delete::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#destroyById
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Delete a related item by id for feeCategories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeCategories
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeCategories.destroyById = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::destroyById::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#findById
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Find a related item by id for feeCategories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeCategories
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R.feeCategories.findById = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::findById::School::feeCategories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeCategories#updateById
             * @methodOf lbServices.School.feeCategories
             *
             * @description
             *
             * Update a related item by id for feeCategories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for feeCategories
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R.feeCategories.updateById = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::updateById::School::feeCategories"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.deposits
     * @header lbServices.School.deposits
     * @object
     * @description
     *
     * The object `School.deposits` groups methods
     * manipulating `Deposit` instances related to `School`.
     *
     * Call {@link lbServices.School#deposits School.deposits()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#deposits
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries deposits of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R.deposits = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::get::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#count
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Counts deposits of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.deposits.count = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::count::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#create
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Creates a new instance in deposits of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R.deposits.create = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::create::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#createMany
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Creates a new instance in deposits of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R.deposits.createMany = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::createMany::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#destroyAll
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Deletes all deposits of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.deposits.destroyAll = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::delete::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#destroyById
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Delete a related item by id for deposits.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for deposits
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.deposits.destroyById = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::destroyById::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#findById
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Find a related item by id for deposits.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for deposits
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R.deposits.findById = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::findById::School::deposits"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.deposits#updateById
             * @methodOf lbServices.School.deposits
             *
             * @description
             *
             * Update a related item by id for deposits.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - School id
             *
             *  - `fk` – `{*}` - Foreign key for deposits
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R.deposits.updateById = function() {
          var TargetResource = $injector.get("Deposit");
          var action = TargetResource["::updateById::School::deposits"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Class
 * @header lbServices.Class
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Class` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Class",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Classes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Class.students.findById() instead.
            "prototype$__findById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.students.destroyById() instead.
            "prototype$__destroyById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.updateById() instead.
            "prototype$__updateById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Classes/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Class.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/Classes/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.findById() instead.
            "prototype$__findById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.destroyById() instead.
            "prototype$__destroyById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.updateById() instead.
            "prototype$__updateById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.assignments.findById() instead.
            "prototype$__findById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.destroyById() instead.
            "prototype$__destroyById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.updateById() instead.
            "prototype$__updateById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.libraries.findById() instead.
            "prototype$__findById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.libraries.destroyById() instead.
            "prototype$__destroyById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.libraries.updateById() instead.
            "prototype$__updateById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feeSetups.findById() instead.
            "prototype$__findById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.destroyById() instead.
            "prototype$__destroyById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.updateById() instead.
            "prototype$__updateById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.exams.findById() instead.
            "prototype$__findById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.destroyById() instead.
            "prototype$__destroyById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.updateById() instead.
            "prototype$__updateById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.lessonPlanners.findById() instead.
            "prototype$__findById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/lessonPlanners/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.lessonPlanners.destroyById() instead.
            "prototype$__destroyById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/lessonPlanners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.lessonPlanners.updateById() instead.
            "prototype$__updateById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/lessonPlanners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.enquiry.findById() instead.
            "prototype$__findById__enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/enquiry/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.enquiry.destroyById() instead.
            "prototype$__destroyById__enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/enquiry/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.enquiry.updateById() instead.
            "prototype$__updateById__enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/enquiry/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.fOsubjects.findById() instead.
            "prototype$__findById__fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOsubjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.fOsubjects.destroyById() instead.
            "prototype$__destroyById__fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOsubjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOsubjects.updateById() instead.
            "prototype$__updateById__fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOsubjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.fOexams.findById() instead.
            "prototype$__findById__fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOexams/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.fOexams.destroyById() instead.
            "prototype$__destroyById__fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOexams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOexams.updateById() instead.
            "prototype$__updateById__fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOexams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.fOmarks.findById() instead.
            "prototype$__findById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.fOmarks.destroyById() instead.
            "prototype$__destroyById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOmarks.updateById() instead.
            "prototype$__updateById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.complaints.findById() instead.
            "prototype$__findById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/complaints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.complaints.destroyById() instead.
            "prototype$__destroyById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/complaints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.complaints.updateById() instead.
            "prototype$__updateById__complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/complaints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.students() instead.
            "prototype$__get__students": {
              isArray: true,
              url: urlBase + "/Classes/:id/students",
              method: "GET",
            },

            // INTERNAL. Use Class.students.create() instead.
            "prototype$__create__students": {
              url: urlBase + "/Classes/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Class.students.destroyAll() instead.
            "prototype$__delete__students": {
              url: urlBase + "/Classes/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.count() instead.
            "prototype$__count__students": {
              url: urlBase + "/Classes/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects() instead.
            "prototype$__get__subjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.create() instead.
            "prototype$__create__subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Class.subjects.destroyAll() instead.
            "prototype$__delete__subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.count() instead.
            "prototype$__count__subjects": {
              url: urlBase + "/Classes/:id/subjects/count",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/Classes/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/Classes/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments() instead.
            "prototype$__get__assignments": {
              isArray: true,
              url: urlBase + "/Classes/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.create() instead.
            "prototype$__create__assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Class.assignments.destroyAll() instead.
            "prototype$__delete__assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.count() instead.
            "prototype$__count__assignments": {
              url: urlBase + "/Classes/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use Class.libraries() instead.
            "prototype$__get__libraries": {
              isArray: true,
              url: urlBase + "/Classes/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use Class.libraries.create() instead.
            "prototype$__create__libraries": {
              url: urlBase + "/Classes/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use Class.libraries.destroyAll() instead.
            "prototype$__delete__libraries": {
              url: urlBase + "/Classes/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use Class.libraries.count() instead.
            "prototype$__count__libraries": {
              url: urlBase + "/Classes/:id/libraries/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups() instead.
            "prototype$__get__feeSetups": {
              isArray: true,
              url: urlBase + "/Classes/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.create() instead.
            "prototype$__create__feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use Class.feeSetups.destroyAll() instead.
            "prototype$__delete__feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.count() instead.
            "prototype$__count__feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use Class.exams() instead.
            "prototype$__get__exams": {
              isArray: true,
              url: urlBase + "/Classes/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.create() instead.
            "prototype$__create__exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use Class.exams.destroyAll() instead.
            "prototype$__delete__exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.count() instead.
            "prototype$__count__exams": {
              url: urlBase + "/Classes/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use Class.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Classes/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Class.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Classes/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/Classes/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/Classes/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use Class.lessonPlanners() instead.
            "prototype$__get__lessonPlanners": {
              isArray: true,
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "GET",
            },

            // INTERNAL. Use Class.lessonPlanners.create() instead.
            "prototype$__create__lessonPlanners": {
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use Class.lessonPlanners.destroyAll() instead.
            "prototype$__delete__lessonPlanners": {
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "DELETE",
            },

            // INTERNAL. Use Class.lessonPlanners.count() instead.
            "prototype$__count__lessonPlanners": {
              url: urlBase + "/Classes/:id/lessonPlanners/count",
              method: "GET",
            },

            // INTERNAL. Use Class.enquiry() instead.
            "prototype$__get__enquiry": {
              isArray: true,
              url: urlBase + "/Classes/:id/enquiry",
              method: "GET",
            },

            // INTERNAL. Use Class.enquiry.create() instead.
            "prototype$__create__enquiry": {
              url: urlBase + "/Classes/:id/enquiry",
              method: "POST",
            },

            // INTERNAL. Use Class.enquiry.destroyAll() instead.
            "prototype$__delete__enquiry": {
              url: urlBase + "/Classes/:id/enquiry",
              method: "DELETE",
            },

            // INTERNAL. Use Class.enquiry.count() instead.
            "prototype$__count__enquiry": {
              url: urlBase + "/Classes/:id/enquiry/count",
              method: "GET",
            },

            // INTERNAL. Use Class.fOsubjects() instead.
            "prototype$__get__fOsubjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "GET",
            },

            // INTERNAL. Use Class.fOsubjects.create() instead.
            "prototype$__create__fOsubjects": {
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "POST",
            },

            // INTERNAL. Use Class.fOsubjects.destroyAll() instead.
            "prototype$__delete__fOsubjects": {
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOsubjects.count() instead.
            "prototype$__count__fOsubjects": {
              url: urlBase + "/Classes/:id/fOsubjects/count",
              method: "GET",
            },

            // INTERNAL. Use Class.fOexams() instead.
            "prototype$__get__fOexams": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOexams",
              method: "GET",
            },

            // INTERNAL. Use Class.fOexams.create() instead.
            "prototype$__create__fOexams": {
              url: urlBase + "/Classes/:id/fOexams",
              method: "POST",
            },

            // INTERNAL. Use Class.fOexams.destroyAll() instead.
            "prototype$__delete__fOexams": {
              url: urlBase + "/Classes/:id/fOexams",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOexams.count() instead.
            "prototype$__count__fOexams": {
              url: urlBase + "/Classes/:id/fOexams/count",
              method: "GET",
            },

            // INTERNAL. Use Class.fOmarks() instead.
            "prototype$__get__fOmarks": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use Class.fOmarks.create() instead.
            "prototype$__create__fOmarks": {
              url: urlBase + "/Classes/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use Class.fOmarks.destroyAll() instead.
            "prototype$__delete__fOmarks": {
              url: urlBase + "/Classes/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOmarks.count() instead.
            "prototype$__count__fOmarks": {
              url: urlBase + "/Classes/:id/fOmarks/count",
              method: "GET",
            },

            // INTERNAL. Use Class.complaints() instead.
            "prototype$__get__complaints": {
              isArray: true,
              url: urlBase + "/Classes/:id/complaints",
              method: "GET",
            },

            // INTERNAL. Use Class.complaints.create() instead.
            "prototype$__create__complaints": {
              url: urlBase + "/Classes/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Class.complaints.destroyAll() instead.
            "prototype$__delete__complaints": {
              url: urlBase + "/Classes/:id/complaints",
              method: "DELETE",
            },

            // INTERNAL. Use Class.complaints.count() instead.
            "prototype$__count__complaints": {
              url: urlBase + "/Classes/:id/complaints/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#create
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Classes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#createMany
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Classes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#patchOrCreate
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Classes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#replaceOrCreate
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Classes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#upsertWithWhere
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Classes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#exists
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Classes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#findById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Classes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#replaceById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Classes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#find
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Classes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#findOne
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Classes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#updateAll
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Classes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#deleteById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Classes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#count
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Classes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#prototype$patchAttributes
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Classes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#createChangeStream
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Classes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#getfeestructure
             * @methodOf lbServices.Class
             *
             * @description
             *
             * get all students payment information
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `classId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "getfeestructure": {
              url: urlBase + "/Classes/getfeestructure",
              method: "GET",
            },

            // INTERNAL. Use Student.class() instead.
            "::get::Student::class": {
              url: urlBase + "/Students/:id/class",
              method: "GET",
            },

            // INTERNAL. Use School.classes.findById() instead.
            "::findById::School::classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.classes.destroyById() instead.
            "::destroyById::School::classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.updateById() instead.
            "::updateById::School::classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.classes() instead.
            "::get::School::classes": {
              isArray: true,
              url: urlBase + "/Schools/:id/classes",
              method: "GET",
            },

            // INTERNAL. Use School.classes.create() instead.
            "::create::School::classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "POST",
            },

            // INTERNAL. Use School.classes.createMany() instead.
            "::createMany::School::classes": {
              isArray: true,
              url: urlBase + "/Schools/:id/classes",
              method: "POST",
            },

            // INTERNAL. Use School.classes.destroyAll() instead.
            "::delete::School::classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.count() instead.
            "::count::School::classes": {
              url: urlBase + "/Schools/:id/classes/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.class() instead.
            "::get::Subject::class": {
              url: urlBase + "/Subjects/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Schedule.class() instead.
            "::get::Schedule::class": {
              url: urlBase + "/Schedules/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Assignment.class() instead.
            "::get::Assignment::class": {
              url: urlBase + "/Assignments/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Library.class() instead.
            "::get::Library::class": {
              url: urlBase + "/Libraries/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.class() instead.
            "::get::FeeSetup::class": {
              url: urlBase + "/FeeSetups/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Exam.class() instead.
            "::get::Exam::class": {
              url: urlBase + "/Exams/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Marks.class() instead.
            "::get::Marks::class": {
              url: urlBase + "/Marks/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.class() instead.
            "::get::FeePayment::class": {
              url: urlBase + "/FeePayments/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Leave.class() instead.
            "::get::Leave::class": {
              url: urlBase + "/Leaves/:id/class",
              method: "GET",
            },

            // INTERNAL. Use LessonPlanner.class() instead.
            "::get::LessonPlanner::class": {
              url: urlBase + "/LessonPlanners/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.class() instead.
            "::get::Enquiry::class": {
              url: urlBase + "/Enquiries/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.class() instead.
            "::get::FOsubject::class": {
              url: urlBase + "/FOsubjects/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FOexam.class() instead.
            "::get::FOexam::class": {
              url: urlBase + "/FOexams/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.class() instead.
            "::get::FOmarks::class": {
              url: urlBase + "/FOmarks/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Complaint.class() instead.
            "::get::Complaint::class": {
              url: urlBase + "/Complaints/:id/class",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Class#upsert
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Class#updateOrCreate
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Class#patchOrCreateWithWhere
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Class#update
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Class#destroyById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Class#removeById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Class#updateAttributes
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Class#modelName
        * @propertyOf lbServices.Class
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Class`.
        */
        R.modelName = "Class";

    /**
     * @ngdoc object
     * @name lbServices.Class.students
     * @header lbServices.Class.students
     * @object
     * @description
     *
     * The object `Class.students` groups methods
     * manipulating `Student` instances related to `Class`.
     *
     * Call {@link lbServices.Class#students Class.students()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#students
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries students of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#count
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Counts students of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.students.count = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::count::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#create
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.create = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::create::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#createMany
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.createMany = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::createMany::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#destroyAll
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Deletes all students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyAll = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::delete::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#destroyById
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Delete a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::destroyById::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#findById
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Find a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.findById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::findById::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#updateById
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Update a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.updateById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::updateById::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class#school
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Class::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class#staff
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Class::staff"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.subjects
     * @header lbServices.Class.subjects
     * @object
     * @description
     *
     * The object `Class.subjects` groups methods
     * manipulating `Subject` instances related to `Class`.
     *
     * Call {@link lbServices.Class#subjects Class.subjects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#subjects
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries subjects of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#count
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Counts subjects of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.subjects.count = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::count::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#create
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.create = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::create::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#createMany
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.createMany = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::createMany::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#destroyAll
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Deletes all subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyAll = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::delete::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#destroyById
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Delete a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::destroyById::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#findById
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Find a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.findById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::findById::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#updateById
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Update a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.updateById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::updateById::Class::subjects"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.schedules
     * @header lbServices.Class.schedules
     * @object
     * @description
     *
     * The object `Class.schedules` groups methods
     * manipulating `Schedule` instances related to `Class`.
     *
     * Call {@link lbServices.Class#schedules Class.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#schedules
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries schedules of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#count
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Counts schedules of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#create
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#createMany
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#destroyAll
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#destroyById
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#findById
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#updateById
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::Class::schedules"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.assignments
     * @header lbServices.Class.assignments
     * @object
     * @description
     *
     * The object `Class.assignments` groups methods
     * manipulating `Assignment` instances related to `Class`.
     *
     * Call {@link lbServices.Class#assignments Class.assignments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#assignments
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries assignments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::get::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#count
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Counts assignments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assignments.count = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::count::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#create
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.create = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::create::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#createMany
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.createMany = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::createMany::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#destroyAll
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Deletes all assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyAll = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::delete::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#destroyById
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Delete a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::destroyById::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#findById
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Find a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.findById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::findById::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#updateById
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Update a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.updateById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::updateById::Class::assignments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.libraries
     * @header lbServices.Class.libraries
     * @object
     * @description
     *
     * The object `Class.libraries` groups methods
     * manipulating `Library` instances related to `Class`.
     *
     * Call {@link lbServices.Class#libraries Class.libraries()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#libraries
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries libraries of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::get::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#count
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Counts libraries of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.libraries.count = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::count::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#create
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.create = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::create::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#createMany
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.createMany = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::createMany::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#destroyAll
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Deletes all libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyAll = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::delete::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#destroyById
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Delete a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::destroyById::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#findById
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Find a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.findById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::findById::Class::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.libraries#updateById
             * @methodOf lbServices.Class.libraries
             *
             * @description
             *
             * Update a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.updateById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::updateById::Class::libraries"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.feeSetups
     * @header lbServices.Class.feeSetups
     * @object
     * @description
     *
     * The object `Class.feeSetups` groups methods
     * manipulating `FeeSetup` instances related to `Class`.
     *
     * Call {@link lbServices.Class#feeSetups Class.feeSetups()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#feeSetups
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries feeSetups of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#count
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Counts feeSetups of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeSetups.count = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::count::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#create
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.create = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::create::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#createMany
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.createMany = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::createMany::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#destroyAll
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Deletes all feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyAll = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::delete::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#destroyById
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Delete a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::destroyById::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#findById
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Find a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.findById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::findById::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#updateById
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Update a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.updateById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::updateById::Class::feeSetups"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.exams
     * @header lbServices.Class.exams
     * @object
     * @description
     *
     * The object `Class.exams` groups methods
     * manipulating `Exam` instances related to `Class`.
     *
     * Call {@link lbServices.Class#exams Class.exams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#exams
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries exams of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#count
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Counts exams of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.exams.count = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::count::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#create
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.create = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::create::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#createMany
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.createMany = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::createMany::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#destroyAll
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Deletes all exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyAll = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::delete::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#destroyById
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Delete a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::destroyById::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#findById
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Find a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.findById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::findById::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#updateById
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Update a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.updateById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::updateById::Class::exams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.marks
     * @header lbServices.Class.marks
     * @object
     * @description
     *
     * The object `Class.marks` groups methods
     * manipulating `Marks` instances related to `Class`.
     *
     * Call {@link lbServices.Class#marks Class.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#marks
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries marks of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#count
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Counts marks of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#create
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#createMany
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#destroyAll
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#destroyById
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#findById
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#updateById
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Class::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.feePayments
     * @header lbServices.Class.feePayments
     * @object
     * @description
     *
     * The object `Class.feePayments` groups methods
     * manipulating `FeePayment` instances related to `Class`.
     *
     * Call {@link lbServices.Class#feePayments Class.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#feePayments
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries feePayments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#count
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Counts feePayments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#create
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#createMany
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#destroyAll
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#destroyById
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#findById
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#updateById
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::Class::feePayments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.lessonPlanners
     * @header lbServices.Class.lessonPlanners
     * @object
     * @description
     *
     * The object `Class.lessonPlanners` groups methods
     * manipulating `LessonPlanner` instances related to `Class`.
     *
     * Call {@link lbServices.Class#lessonPlanners Class.lessonPlanners()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#lessonPlanners
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries lessonPlanners of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::get::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#count
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Counts lessonPlanners of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.lessonPlanners.count = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::count::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#create
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Creates a new instance in lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.create = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::create::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#createMany
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Creates a new instance in lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.createMany = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::createMany::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#destroyAll
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Deletes all lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonPlanners.destroyAll = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::delete::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#destroyById
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Delete a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonPlanners.destroyById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::destroyById::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#findById
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Find a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.findById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::findById::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.lessonPlanners#updateById
             * @methodOf lbServices.Class.lessonPlanners
             *
             * @description
             *
             * Update a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.updateById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::updateById::Class::lessonPlanners"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.enquiry
     * @header lbServices.Class.enquiry
     * @object
     * @description
     *
     * The object `Class.enquiry` groups methods
     * manipulating `Enquiry` instances related to `Class`.
     *
     * Call {@link lbServices.Class#enquiry Class.enquiry()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#enquiry
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries enquiry of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::get::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#count
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Counts enquiry of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.enquiry.count = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::count::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#create
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Creates a new instance in enquiry of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.create = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::create::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#createMany
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Creates a new instance in enquiry of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.createMany = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::createMany::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#destroyAll
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Deletes all enquiry of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiry.destroyAll = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::delete::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#destroyById
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Delete a related item by id for enquiry.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiry
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.enquiry.destroyById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::destroyById::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#findById
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Find a related item by id for enquiry.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for enquiry
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.findById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::findById::Class::enquiry"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.enquiry#updateById
             * @methodOf lbServices.Class.enquiry
             *
             * @description
             *
             * Update a related item by id for enquiry.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for enquiry
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R.enquiry.updateById = function() {
          var TargetResource = $injector.get("Enquiry");
          var action = TargetResource["::updateById::Class::enquiry"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.fOsubjects
     * @header lbServices.Class.fOsubjects
     * @object
     * @description
     *
     * The object `Class.fOsubjects` groups methods
     * manipulating `FOsubject` instances related to `Class`.
     *
     * Call {@link lbServices.Class#fOsubjects Class.fOsubjects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#fOsubjects
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries fOsubjects of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::get::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#count
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Counts fOsubjects of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOsubjects.count = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::count::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#create
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Creates a new instance in fOsubjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.create = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::create::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#createMany
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Creates a new instance in fOsubjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.createMany = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::createMany::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#destroyAll
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Deletes all fOsubjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOsubjects.destroyAll = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::delete::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#destroyById
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Delete a related item by id for fOsubjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOsubjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOsubjects.destroyById = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::destroyById::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#findById
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Find a related item by id for fOsubjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOsubjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.findById = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::findById::Class::fOsubjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOsubjects#updateById
             * @methodOf lbServices.Class.fOsubjects
             *
             * @description
             *
             * Update a related item by id for fOsubjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for fOsubjects
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubjects.updateById = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::updateById::Class::fOsubjects"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.fOexams
     * @header lbServices.Class.fOexams
     * @object
     * @description
     *
     * The object `Class.fOexams` groups methods
     * manipulating `FOexam` instances related to `Class`.
     *
     * Call {@link lbServices.Class#fOexams Class.fOexams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#fOexams
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries fOexams of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::get::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#count
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Counts fOexams of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOexams.count = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::count::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#create
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Creates a new instance in fOexams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.create = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::create::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#createMany
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Creates a new instance in fOexams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.createMany = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::createMany::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#destroyAll
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Deletes all fOexams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOexams.destroyAll = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::delete::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#destroyById
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Delete a related item by id for fOexams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOexams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOexams.destroyById = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::destroyById::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#findById
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Find a related item by id for fOexams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOexams
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.findById = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::findById::Class::fOexams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOexams#updateById
             * @methodOf lbServices.Class.fOexams
             *
             * @description
             *
             * Update a related item by id for fOexams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for fOexams
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexams.updateById = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::updateById::Class::fOexams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.fOmarks
     * @header lbServices.Class.fOmarks
     * @object
     * @description
     *
     * The object `Class.fOmarks` groups methods
     * manipulating `FOmarks` instances related to `Class`.
     *
     * Call {@link lbServices.Class#fOmarks Class.fOmarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#fOmarks
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries fOmarks of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::get::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#count
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Counts fOmarks of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOmarks.count = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::count::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#create
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.create = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::create::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#createMany
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.createMany = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::createMany::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#destroyAll
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Deletes all fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyAll = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::delete::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#destroyById
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Delete a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::destroyById::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#findById
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Find a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.findById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::findById::Class::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.fOmarks#updateById
             * @methodOf lbServices.Class.fOmarks
             *
             * @description
             *
             * Update a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.updateById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::updateById::Class::fOmarks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.complaints
     * @header lbServices.Class.complaints
     * @object
     * @description
     *
     * The object `Class.complaints` groups methods
     * manipulating `Complaint` instances related to `Class`.
     *
     * Call {@link lbServices.Class#complaints Class.complaints()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#complaints
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries complaints of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::get::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#count
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Counts complaints of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.complaints.count = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::count::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#create
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Creates a new instance in complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.create = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::create::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#createMany
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Creates a new instance in complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.createMany = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::createMany::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#destroyAll
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Deletes all complaints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.complaints.destroyAll = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::delete::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#destroyById
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Delete a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.complaints.destroyById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::destroyById::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#findById
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Find a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.findById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::findById::Class::complaints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.complaints#updateById
             * @methodOf lbServices.Class.complaints
             *
             * @description
             *
             * Update a related item by id for complaints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Class id
             *
             *  - `fk` – `{*}` - Foreign key for complaints
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R.complaints.updateById = function() {
          var TargetResource = $injector.get("Complaint");
          var action = TargetResource["::updateById::Class::complaints"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Admin
 * @header lbServices.Admin
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Admin` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Admin",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Admins/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__findById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__updateById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Admins/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Admin.managerole() instead.
            "prototype$__get__managerole": {
              url: urlBase + "/Admins/:id/managerole",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__get__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Queries accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Admins/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__create__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__delete__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__count__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Counts accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#create
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#createMany
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#patchOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Admins",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#replaceOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Admins/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#upsertWithWhere
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Admins/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#exists
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Admins/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#findById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Admins/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#replaceById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Admins/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#find
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#findOne
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Admins/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateAll
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Admins/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#deleteById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Admins/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#count
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Admins/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$patchAttributes
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Admins/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#createChangeStream
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Admins/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#login
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Admins/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#logout
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Admins/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$verify
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Admins/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#confirm
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Admins/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#resetPassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Admins/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#changePassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Admins/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#setPassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Admins/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#forgotPassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Enter email to reset the password
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `email` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "forgotPassword": {
              url: urlBase + "/Admins/forgotPassword",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#AssignRolesForAllSchools
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Assign Admin Roles For All Schools
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `email` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "AssignRolesForAllSchools": {
              url: urlBase + "/Admins/AssignRolesForAllSchools",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#AddRoleIdtoallAdmins
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Add Role id to all Admin
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `status` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "AddRoleIdtoallAdmins": {
              url: urlBase + "/Admins/AddRoleIdtoallAdmins",
              method: "GET",
            },

            // INTERNAL. Use Identity.admins.findById() instead.
            "::findById::Identity::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/admins/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.admins.destroyById() instead.
            "::destroyById::Identity::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/admins/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.admins.updateById() instead.
            "::updateById::Identity::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/admins/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.admins() instead.
            "::get::Identity::admins": {
              isArray: true,
              url: urlBase + "/Identities/:id/admins",
              method: "GET",
            },

            // INTERNAL. Use Identity.admins.create() instead.
            "::create::Identity::admins": {
              url: urlBase + "/Identities/:id/admins",
              method: "POST",
            },

            // INTERNAL. Use Identity.admins.createMany() instead.
            "::createMany::Identity::admins": {
              isArray: true,
              url: urlBase + "/Identities/:id/admins",
              method: "POST",
            },

            // INTERNAL. Use Identity.admins.destroyAll() instead.
            "::delete::Identity::admins": {
              url: urlBase + "/Identities/:id/admins",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.admins.count() instead.
            "::count::Identity::admins": {
              url: urlBase + "/Identities/:id/admins/count",
              method: "GET",
            },

            // INTERNAL. Use ManageRole.Admin() instead.
            "::get::ManageRole::Admin": {
              url: urlBase + "/ManageRoles/:id/Admin",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#getCurrent
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Admins" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Admin#upsert
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#patchOrCreateWithWhere
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#update
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#destroyById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#removeById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateAttributes
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Admin#getCachedCurrent
         * @methodOf lbServices.Admin
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Admin#login} or
         * {@link lbServices.Admin#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Admin instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Admin#isAuthenticated
         * @methodOf lbServices.Admin
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Admin#getCurrentId
         * @methodOf lbServices.Admin
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Admin#modelName
        * @propertyOf lbServices.Admin
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Admin`.
        */
        R.modelName = "Admin";


            /**
             * @ngdoc method
             * @name lbServices.Admin#school
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Admin::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Admin#managerole
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Fetches belongsTo relation managerole.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R.managerole = function() {
          var TargetResource = $injector.get("ManageRole");
          var action = TargetResource["::get::Admin::managerole"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Subject
 * @header lbServices.Subject
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Subject` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Subject",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Subjects/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Subject.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/Subjects/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Subject.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Subjects/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Subject.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Subjects/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedule() instead.
            "prototype$__get__schedule": {
              url: urlBase + "/Subjects/:id/schedule",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.assignments.findById() instead.
            "prototype$__findById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.assignments.destroyById() instead.
            "prototype$__destroyById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.assignments.updateById() instead.
            "prototype$__updateById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.maxMarks.findById() instead.
            "prototype$__findById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.destroyById() instead.
            "prototype$__destroyById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.updateById() instead.
            "prototype$__updateById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.lessonPlanners.findById() instead.
            "prototype$__findById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/lessonPlanners/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.lessonPlanners.destroyById() instead.
            "prototype$__destroyById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/lessonPlanners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.lessonPlanners.updateById() instead.
            "prototype$__updateById__lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/lessonPlanners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/Subjects/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Subject.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/Subjects/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.assignments() instead.
            "prototype$__get__assignments": {
              isArray: true,
              url: urlBase + "/Subjects/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use Subject.assignments.create() instead.
            "prototype$__create__assignments": {
              url: urlBase + "/Subjects/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Subject.assignments.destroyAll() instead.
            "prototype$__delete__assignments": {
              url: urlBase + "/Subjects/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.assignments.count() instead.
            "prototype$__count__assignments": {
              url: urlBase + "/Subjects/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Subject.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Subjects/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks() instead.
            "prototype$__get__maxMarks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.create() instead.
            "prototype$__create__maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.destroyAll() instead.
            "prototype$__delete__maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.count() instead.
            "prototype$__count__maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.lessonPlanners() instead.
            "prototype$__get__lessonPlanners": {
              isArray: true,
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "GET",
            },

            // INTERNAL. Use Subject.lessonPlanners.create() instead.
            "prototype$__create__lessonPlanners": {
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use Subject.lessonPlanners.destroyAll() instead.
            "prototype$__delete__lessonPlanners": {
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.lessonPlanners.count() instead.
            "prototype$__count__lessonPlanners": {
              url: urlBase + "/Subjects/:id/lessonPlanners/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#create
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Subjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#createMany
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Subjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#patchOrCreate
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Subjects",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#replaceOrCreate
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Subjects/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#upsertWithWhere
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Subjects/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#exists
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Subjects/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#findById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Subjects/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#replaceById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Subjects/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#find
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Subjects",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#findOne
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Subjects/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#updateAll
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Subjects/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#deleteById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Subjects/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#count
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Subjects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#prototype$patchAttributes
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Subjects/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#createChangeStream
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Subjects/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Staff.subject() instead.
            "::get::Staff::subject": {
              url: urlBase + "/Staffs/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.findById() instead.
            "::findById::Class::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.destroyById() instead.
            "::destroyById::Class::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.updateById() instead.
            "::updateById::Class::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.subjects() instead.
            "::get::Class::subjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.create() instead.
            "::create::Class::subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Class.subjects.createMany() instead.
            "::createMany::Class::subjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Class.subjects.destroyAll() instead.
            "::delete::Class::subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.count() instead.
            "::count::Class::subjects": {
              url: urlBase + "/Classes/:id/subjects/count",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.findById() instead.
            "::findById::Schedule::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.destroyById() instead.
            "::destroyById::Schedule::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.updateById() instead.
            "::updateById::Schedule::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Schedule.subject() instead.
            "::get::Schedule::subject": {
              url: urlBase + "/Schedules/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects() instead.
            "::get::Schedule::subjects": {
              isArray: true,
              url: urlBase + "/Schedules/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.create() instead.
            "::create::Schedule::subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Schedule.subjects.createMany() instead.
            "::createMany::Schedule::subjects": {
              isArray: true,
              url: urlBase + "/Schedules/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Schedule.subjects.destroyAll() instead.
            "::delete::Schedule::subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.count() instead.
            "::count::Schedule::subjects": {
              url: urlBase + "/Schedules/:id/subjects/count",
              method: "GET",
            },

            // INTERNAL. Use Assignment.subject() instead.
            "::get::Assignment::subject": {
              url: urlBase + "/Assignments/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Marks.subject() instead.
            "::get::Marks::subject": {
              url: urlBase + "/Marks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use MaxMark.subject() instead.
            "::get::MaxMark::subject": {
              url: urlBase + "/MaxMarks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use LessonPlanner.subject() instead.
            "::get::LessonPlanner::subject": {
              url: urlBase + "/LessonPlanners/:id/subject",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Subject#upsert
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#updateOrCreate
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#patchOrCreateWithWhere
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#update
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#destroyById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#removeById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#updateAttributes
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Subject#modelName
        * @propertyOf lbServices.Subject
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Subject`.
        */
        R.modelName = "Subject";


            /**
             * @ngdoc method
             * @name lbServices.Subject#staff
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Subject::staff"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject#school
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Subject::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject#class
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Subject::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject#schedule
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation schedule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedule = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Subject::schedule"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.schedules
     * @header lbServices.Subject.schedules
     * @object
     * @description
     *
     * The object `Subject.schedules` groups methods
     * manipulating `Schedule` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#schedules Subject.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#schedules
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries schedules of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#count
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Counts schedules of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#create
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#createMany
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#destroyAll
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#destroyById
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#findById
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#updateById
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::Subject::schedules"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.assignments
     * @header lbServices.Subject.assignments
     * @object
     * @description
     *
     * The object `Subject.assignments` groups methods
     * manipulating `Assignment` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#assignments Subject.assignments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#assignments
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries assignments of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::get::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#count
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Counts assignments of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assignments.count = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::count::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#create
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.create = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::create::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#createMany
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.createMany = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::createMany::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#destroyAll
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Deletes all assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyAll = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::delete::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#destroyById
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Delete a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::destroyById::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#findById
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Find a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.findById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::findById::Subject::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.assignments#updateById
             * @methodOf lbServices.Subject.assignments
             *
             * @description
             *
             * Update a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.updateById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::updateById::Subject::assignments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.marks
     * @header lbServices.Subject.marks
     * @object
     * @description
     *
     * The object `Subject.marks` groups methods
     * manipulating `Marks` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#marks Subject.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#marks
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries marks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#count
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Counts marks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#create
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#createMany
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#destroyAll
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#destroyById
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#findById
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#updateById
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Subject::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.maxMarks
     * @header lbServices.Subject.maxMarks
     * @object
     * @description
     *
     * The object `Subject.maxMarks` groups methods
     * manipulating `MaxMark` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#maxMarks Subject.maxMarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#maxMarks
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries maxMarks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::get::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#count
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Counts maxMarks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.maxMarks.count = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::count::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#create
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.create = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::create::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#createMany
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.createMany = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::createMany::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#destroyAll
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Deletes all maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyAll = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::delete::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#destroyById
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Delete a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::destroyById::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#findById
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Find a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.findById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::findById::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#updateById
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Update a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.updateById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::updateById::Subject::maxMarks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.lessonPlanners
     * @header lbServices.Subject.lessonPlanners
     * @object
     * @description
     *
     * The object `Subject.lessonPlanners` groups methods
     * manipulating `LessonPlanner` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#lessonPlanners Subject.lessonPlanners()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#lessonPlanners
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries lessonPlanners of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::get::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#count
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Counts lessonPlanners of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.lessonPlanners.count = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::count::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#create
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Creates a new instance in lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.create = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::create::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#createMany
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Creates a new instance in lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.createMany = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::createMany::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#destroyAll
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Deletes all lessonPlanners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonPlanners.destroyAll = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::delete::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#destroyById
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Delete a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonPlanners.destroyById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::destroyById::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#findById
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Find a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.findById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::findById::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.lessonPlanners#updateById
             * @methodOf lbServices.Subject.lessonPlanners
             *
             * @description
             *
             * Update a related item by id for lessonPlanners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Subject id
             *
             *  - `fk` – `{*}` - Foreign key for lessonPlanners
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R.lessonPlanners.updateById = function() {
          var TargetResource = $injector.get("LessonPlanner");
          var action = TargetResource["::updateById::Subject::lessonPlanners"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Bus
 * @header lbServices.Bus
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Bus` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Bus",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Buses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Bus.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Buses/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.findById() instead.
            "prototype$__findById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.destroyById() instead.
            "prototype$__destroyById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.updateById() instead.
            "prototype$__updateById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bus.busServices() instead.
            "prototype$__get__busServices": {
              isArray: true,
              url: urlBase + "/Buses/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.create() instead.
            "prototype$__create__busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use Bus.busServices.destroyAll() instead.
            "prototype$__delete__busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.count() instead.
            "prototype$__count__busServices": {
              url: urlBase + "/Buses/:id/busServices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#create
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Buses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#createMany
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Buses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#patchOrCreate
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Buses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#replaceOrCreate
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Buses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#upsertWithWhere
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Buses/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#exists
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Buses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#findById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Buses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#replaceById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Buses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#find
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Buses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#findOne
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Buses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#updateAll
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Buses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#deleteById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Buses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#count
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Buses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#prototype$patchAttributes
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Buses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#createChangeStream
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Buses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.bus.findById() instead.
            "::findById::School::bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.bus.destroyById() instead.
            "::destroyById::School::bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.updateById() instead.
            "::updateById::School::bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.buses.findById() instead.
            "::findById::School::buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.buses.destroyById() instead.
            "::destroyById::School::buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.updateById() instead.
            "::updateById::School::buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.bus() instead.
            "::get::School::bus": {
              isArray: true,
              url: urlBase + "/Schools/:id/bus",
              method: "GET",
            },

            // INTERNAL. Use School.bus.create() instead.
            "::create::School::bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "POST",
            },

            // INTERNAL. Use School.bus.createMany() instead.
            "::createMany::School::bus": {
              isArray: true,
              url: urlBase + "/Schools/:id/bus",
              method: "POST",
            },

            // INTERNAL. Use School.bus.destroyAll() instead.
            "::delete::School::bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.count() instead.
            "::count::School::bus": {
              url: urlBase + "/Schools/:id/bus/count",
              method: "GET",
            },

            // INTERNAL. Use School.buses() instead.
            "::get::School::buses": {
              isArray: true,
              url: urlBase + "/Schools/:id/buses",
              method: "GET",
            },

            // INTERNAL. Use School.buses.create() instead.
            "::create::School::buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "POST",
            },

            // INTERNAL. Use School.buses.createMany() instead.
            "::createMany::School::buses": {
              isArray: true,
              url: urlBase + "/Schools/:id/buses",
              method: "POST",
            },

            // INTERNAL. Use School.buses.destroyAll() instead.
            "::delete::School::buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.count() instead.
            "::count::School::buses": {
              url: urlBase + "/Schools/:id/buses/count",
              method: "GET",
            },

            // INTERNAL. Use BusService.bus() instead.
            "::get::BusService::bus": {
              url: urlBase + "/BusServices/:id/bus",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Bus#upsert
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#updateOrCreate
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#patchOrCreateWithWhere
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#update
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#destroyById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#removeById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#updateAttributes
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Bus#modelName
        * @propertyOf lbServices.Bus
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Bus`.
        */
        R.modelName = "Bus";


            /**
             * @ngdoc method
             * @name lbServices.Bus#school
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Bus::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Bus.busServices
     * @header lbServices.Bus.busServices
     * @object
     * @description
     *
     * The object `Bus.busServices` groups methods
     * manipulating `BusService` instances related to `Bus`.
     *
     * Call {@link lbServices.Bus#busServices Bus.busServices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bus#busServices
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Queries busServices of Bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::get::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#count
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Counts busServices of Bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.busServices.count = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::count::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#create
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.create = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::create::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#createMany
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.createMany = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::createMany::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#destroyAll
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Deletes all busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyAll = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::delete::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#destroyById
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Delete a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::destroyById::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#findById
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Find a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.findById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::findById::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#updateById
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Update a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Bus id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.updateById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::updateById::Bus::busServices"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Timetable
 * @header lbServices.Timetable
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Timetable` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Timetable",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Timetables/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Timetable.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Timetables/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Timetable.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/Timetables/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Timetable.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/Timetables/:id/schedules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#create
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Timetables",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#createMany
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Timetables",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#patchOrCreate
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Timetables",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#replaceOrCreate
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Timetables/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#upsertWithWhere
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Timetables/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#exists
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Timetables/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#findById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Timetables/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#replaceById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Timetables/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#find
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Timetables",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#findOne
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Timetables/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#updateAll
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Timetables/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#deleteById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Timetables/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#count
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Timetables/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#prototype$patchAttributes
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Timetables/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#createChangeStream
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Timetables/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.findById() instead.
            "::findById::School::timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.destroyById() instead.
            "::destroyById::School::timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.updateById() instead.
            "::updateById::School::timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.timetables() instead.
            "::get::School::timetables": {
              isArray: true,
              url: urlBase + "/Schools/:id/timetables",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.create() instead.
            "::create::School::timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.createMany() instead.
            "::createMany::School::timetables": {
              isArray: true,
              url: urlBase + "/Schools/:id/timetables",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.destroyAll() instead.
            "::delete::School::timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.count() instead.
            "::count::School::timetables": {
              url: urlBase + "/Schools/:id/timetables/count",
              method: "GET",
            },

            // INTERNAL. Use Schedule.timetable() instead.
            "::get::Schedule::timetable": {
              url: urlBase + "/Schedules/:id/timetable",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Timetable#upsert
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#updateOrCreate
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#patchOrCreateWithWhere
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#update
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#destroyById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#removeById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#updateAttributes
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Timetable#modelName
        * @propertyOf lbServices.Timetable
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Timetable`.
        */
        R.modelName = "Timetable";


            /**
             * @ngdoc method
             * @name lbServices.Timetable#school
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Timetable::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Timetable.schedules
     * @header lbServices.Timetable.schedules
     * @object
     * @description
     *
     * The object `Timetable.schedules` groups methods
     * manipulating `Schedule` instances related to `Timetable`.
     *
     * Call {@link lbServices.Timetable#schedules Timetable.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Timetable#schedules
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Queries schedules of Timetable.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#count
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Counts schedules of Timetable.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#create
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#createMany
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#destroyAll
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#destroyById
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#findById
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#updateById
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Timetable id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::Timetable::schedules"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Schedule
 * @header lbServices.Schedule
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Schedule` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Schedule",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Schedules/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Schedule.timetable() instead.
            "prototype$__get__timetable": {
              url: urlBase + "/Schedules/:id/timetable",
              method: "GET",
            },

            // INTERNAL. Use Schedule.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Schedules/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.findById() instead.
            "prototype$__findById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.destroyById() instead.
            "prototype$__destroyById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.updateById() instead.
            "prototype$__updateById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Schedule.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Schedules/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Schedule.workingDay() instead.
            "prototype$__get__workingDay": {
              url: urlBase + "/Schedules/:id/workingDay",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects() instead.
            "prototype$__get__subjects": {
              isArray: true,
              url: urlBase + "/Schedules/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.create() instead.
            "prototype$__create__subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Schedule.subjects.destroyAll() instead.
            "prototype$__delete__subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.count() instead.
            "prototype$__count__subjects": {
              url: urlBase + "/Schedules/:id/subjects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#create
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Schedules",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#createMany
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Schedules",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#patchOrCreate
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Schedules",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#replaceOrCreate
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Schedules/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#upsertWithWhere
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Schedules/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#exists
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Schedules/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#findById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Schedules/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#replaceById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Schedules/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#find
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Schedules",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#findOne
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Schedules/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#updateAll
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Schedules/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#deleteById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Schedules/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#count
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Schedules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#prototype$patchAttributes
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Schedules/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#createChangeStream
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Schedules/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.findById() instead.
            "::findById::Class::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.destroyById() instead.
            "::destroyById::Class::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.updateById() instead.
            "::updateById::Class::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.schedules() instead.
            "::get::Class::schedules": {
              isArray: true,
              url: urlBase + "/Classes/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.create() instead.
            "::create::Class::schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.createMany() instead.
            "::createMany::Class::schedules": {
              isArray: true,
              url: urlBase + "/Classes/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.destroyAll() instead.
            "::delete::Class::schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.count() instead.
            "::count::Class::schedules": {
              url: urlBase + "/Classes/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedule() instead.
            "::get::Subject::schedule": {
              url: urlBase + "/Subjects/:id/schedule",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.findById() instead.
            "::findById::Subject::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.destroyById() instead.
            "::destroyById::Subject::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.updateById() instead.
            "::updateById::Subject::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.schedules() instead.
            "::get::Subject::schedules": {
              isArray: true,
              url: urlBase + "/Subjects/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.create() instead.
            "::create::Subject::schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Subject.schedules.createMany() instead.
            "::createMany::Subject::schedules": {
              isArray: true,
              url: urlBase + "/Subjects/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Subject.schedules.destroyAll() instead.
            "::delete::Subject::schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.count() instead.
            "::count::Subject::schedules": {
              url: urlBase + "/Subjects/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.findById() instead.
            "::findById::Timetable::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.destroyById() instead.
            "::destroyById::Timetable::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.updateById() instead.
            "::updateById::Timetable::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Timetable.schedules() instead.
            "::get::Timetable::schedules": {
              isArray: true,
              url: urlBase + "/Timetables/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.create() instead.
            "::create::Timetable::schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Timetable.schedules.createMany() instead.
            "::createMany::Timetable::schedules": {
              isArray: true,
              url: urlBase + "/Timetables/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Timetable.schedules.destroyAll() instead.
            "::delete::Timetable::schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.count() instead.
            "::count::Timetable::schedules": {
              url: urlBase + "/Timetables/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.findById() instead.
            "::findById::WorkingDay::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyById() instead.
            "::destroyById::WorkingDay::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.updateById() instead.
            "::updateById::WorkingDay::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use WorkingDay.schedules() instead.
            "::get::WorkingDay::schedules": {
              isArray: true,
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.create() instead.
            "::create::WorkingDay::schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use WorkingDay.schedules.createMany() instead.
            "::createMany::WorkingDay::schedules": {
              isArray: true,
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyAll() instead.
            "::delete::WorkingDay::schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.count() instead.
            "::count::WorkingDay::schedules": {
              url: urlBase + "/WorkingDays/:id/schedules/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Schedule#upsert
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#updateOrCreate
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#patchOrCreateWithWhere
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#update
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#destroyById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#removeById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#updateAttributes
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Schedule#modelName
        * @propertyOf lbServices.Schedule
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Schedule`.
        */
        R.modelName = "Schedule";


            /**
             * @ngdoc method
             * @name lbServices.Schedule#timetable
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation timetable.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetable = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::get::Schedule::timetable"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule#class
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Schedule::class"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Schedule.subjects
     * @header lbServices.Schedule.subjects
     * @object
     * @description
     *
     * The object `Schedule.subjects` groups methods
     * manipulating `Subject` instances related to `Schedule`.
     *
     * Call {@link lbServices.Schedule#subjects Schedule.subjects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Schedule#subjects
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Queries subjects of Schedule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#count
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Counts subjects of Schedule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.subjects.count = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::count::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#create
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.create = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::create::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#createMany
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.createMany = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::createMany::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#destroyAll
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Deletes all subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyAll = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::delete::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#destroyById
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Delete a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::destroyById::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#findById
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Find a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.findById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::findById::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#updateById
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Update a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.updateById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::updateById::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule#subject
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Schedule::subject"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule#workingDay
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation workingDay.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Schedule id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDay = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::get::Schedule::workingDay"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Calendar
 * @header lbServices.Calendar
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Calendar` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Calendar",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Calendars/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Calendar#create
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Calendars",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#createMany
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Calendars",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#patchOrCreate
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Calendars",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#replaceOrCreate
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Calendars/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#upsertWithWhere
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Calendars/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#exists
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Calendars/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#findById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Calendars/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#replaceById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Calendars/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#find
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Calendars",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#findOne
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Calendars/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#updateAll
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Calendars/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#deleteById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Calendars/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#count
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Calendars/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#prototype$patchAttributes
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Calendar id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Calendars/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#createChangeStream
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Calendars/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.calendars() instead.
            "::get::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "GET",
            },

            // INTERNAL. Use School.calendars.create() instead.
            "::create::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "POST",
            },

            // INTERNAL. Use School.calendars.createMany() instead.
            "::createMany::School::calendars": {
              isArray: true,
              url: urlBase + "/Schools/:id/calendars",
              method: "POST",
            },

            // INTERNAL. Use School.calendars.update() instead.
            "::update::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "PUT",
            },

            // INTERNAL. Use School.calendars.destroy() instead.
            "::destroy::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Calendar#upsert
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#updateOrCreate
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#patchOrCreateWithWhere
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#update
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#destroyById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#removeById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#updateAttributes
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Calendar id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Calendar#modelName
        * @propertyOf lbServices.Calendar
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Calendar`.
        */
        R.modelName = "Calendar";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Noticeboard
 * @header lbServices.Noticeboard
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Noticeboard` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Noticeboard",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Noticeboards/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Noticeboard.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Noticeboards/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#create
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Noticeboards",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#createMany
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Noticeboards",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#patchOrCreate
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Noticeboards",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#replaceOrCreate
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Noticeboards/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#upsertWithWhere
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Noticeboards/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#exists
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Noticeboards/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#findById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Noticeboards/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#replaceById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Noticeboards/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#find
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Noticeboards",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#findOne
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Noticeboards/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#updateAll
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Noticeboards/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#deleteById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Noticeboards/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#count
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Noticeboards/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#prototype$patchAttributes
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Noticeboard id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Noticeboards/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#createChangeStream
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Noticeboards/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.findById() instead.
            "::findById::School::noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.destroyById() instead.
            "::destroyById::School::noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.updateById() instead.
            "::updateById::School::noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.noticeboards() instead.
            "::get::School::noticeboards": {
              isArray: true,
              url: urlBase + "/Schools/:id/noticeboards",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.create() instead.
            "::create::School::noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.createMany() instead.
            "::createMany::School::noticeboards": {
              isArray: true,
              url: urlBase + "/Schools/:id/noticeboards",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.destroyAll() instead.
            "::delete::School::noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.count() instead.
            "::count::School::noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#upsert
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#updateOrCreate
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#patchOrCreateWithWhere
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#update
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#destroyById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#removeById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#updateAttributes
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Noticeboard id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Noticeboard#modelName
        * @propertyOf lbServices.Noticeboard
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Noticeboard`.
        */
        R.modelName = "Noticeboard";


            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#school
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Noticeboard id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Noticeboard::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Assignment
 * @header lbServices.Assignment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Assignment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Assignment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Assignments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Assignment.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Assignments/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Assignment.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Assignments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Assignment.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Assignments/:id/subject",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#create
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Assignments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#createMany
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Assignments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#patchOrCreate
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Assignments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#replaceOrCreate
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Assignments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#upsertWithWhere
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Assignments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#exists
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Assignments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#findById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Assignments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#replaceById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Assignments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#find
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Assignments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#findOne
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Assignments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#updateAll
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Assignments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#deleteById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Assignments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#count
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Assignments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#prototype$patchAttributes
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assignment id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Assignments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#createChangeStream
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Assignments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.findById() instead.
            "::findById::School::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.destroyById() instead.
            "::destroyById::School::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.updateById() instead.
            "::updateById::School::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.assignments() instead.
            "::get::School::assignments": {
              isArray: true,
              url: urlBase + "/Schools/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.create() instead.
            "::create::School::assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.createMany() instead.
            "::createMany::School::assignments": {
              isArray: true,
              url: urlBase + "/Schools/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.destroyAll() instead.
            "::delete::School::assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.count() instead.
            "::count::School::assignments": {
              url: urlBase + "/Schools/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.findById() instead.
            "::findById::Class::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.destroyById() instead.
            "::destroyById::Class::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.updateById() instead.
            "::updateById::Class::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.assignments() instead.
            "::get::Class::assignments": {
              isArray: true,
              url: urlBase + "/Classes/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.create() instead.
            "::create::Class::assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Class.assignments.createMany() instead.
            "::createMany::Class::assignments": {
              isArray: true,
              url: urlBase + "/Classes/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Class.assignments.destroyAll() instead.
            "::delete::Class::assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.count() instead.
            "::count::Class::assignments": {
              url: urlBase + "/Classes/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.assignments.findById() instead.
            "::findById::Subject::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.assignments.destroyById() instead.
            "::destroyById::Subject::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.assignments.updateById() instead.
            "::updateById::Subject::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.assignments() instead.
            "::get::Subject::assignments": {
              isArray: true,
              url: urlBase + "/Subjects/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use Subject.assignments.create() instead.
            "::create::Subject::assignments": {
              url: urlBase + "/Subjects/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Subject.assignments.createMany() instead.
            "::createMany::Subject::assignments": {
              isArray: true,
              url: urlBase + "/Subjects/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Subject.assignments.destroyAll() instead.
            "::delete::Subject::assignments": {
              url: urlBase + "/Subjects/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.assignments.count() instead.
            "::count::Subject::assignments": {
              url: urlBase + "/Subjects/:id/assignments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Assignment#upsert
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#updateOrCreate
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#patchOrCreateWithWhere
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#update
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#destroyById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#removeById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#updateAttributes
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assignment id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Assignment#modelName
        * @propertyOf lbServices.Assignment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Assignment`.
        */
        R.modelName = "Assignment";


            /**
             * @ngdoc method
             * @name lbServices.Assignment#class
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assignment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Assignment::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Assignment#school
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assignment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Assignment::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Assignment#subject
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assignment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Assignment::subject"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Library
 * @header lbServices.Library
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Library` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Library",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Libraries/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Library.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Libraries/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Library.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Libraries/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Library.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Libraries/:id/class",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#create
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Libraries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#createMany
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Libraries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#patchOrCreate
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Libraries",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#replaceOrCreate
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Libraries/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#upsertWithWhere
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Libraries/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#exists
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Libraries/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#findById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Libraries/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#replaceById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Libraries/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#find
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Libraries",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#findOne
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Libraries/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#updateAll
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Libraries/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#deleteById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Libraries/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#count
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Libraries/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#prototype$patchAttributes
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Library id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Libraries/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#createChangeStream
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Libraries/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.libraries.findById() instead.
            "::findById::Student::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.libraries.destroyById() instead.
            "::destroyById::Student::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.libraries.updateById() instead.
            "::updateById::Student::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.libraries() instead.
            "::get::Student::libraries": {
              isArray: true,
              url: urlBase + "/Students/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use Student.libraries.create() instead.
            "::create::Student::libraries": {
              url: urlBase + "/Students/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use Student.libraries.createMany() instead.
            "::createMany::Student::libraries": {
              isArray: true,
              url: urlBase + "/Students/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use Student.libraries.destroyAll() instead.
            "::delete::Student::libraries": {
              url: urlBase + "/Students/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use Student.libraries.count() instead.
            "::count::Student::libraries": {
              url: urlBase + "/Students/:id/libraries/count",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.findById() instead.
            "::findById::School::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.destroyById() instead.
            "::destroyById::School::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.updateById() instead.
            "::updateById::School::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.libraries() instead.
            "::get::School::libraries": {
              isArray: true,
              url: urlBase + "/Schools/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.create() instead.
            "::create::School::libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.createMany() instead.
            "::createMany::School::libraries": {
              isArray: true,
              url: urlBase + "/Schools/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.destroyAll() instead.
            "::delete::School::libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.count() instead.
            "::count::School::libraries": {
              url: urlBase + "/Schools/:id/libraries/count",
              method: "GET",
            },

            // INTERNAL. Use Class.libraries.findById() instead.
            "::findById::Class::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.libraries.destroyById() instead.
            "::destroyById::Class::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.libraries.updateById() instead.
            "::updateById::Class::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.libraries() instead.
            "::get::Class::libraries": {
              isArray: true,
              url: urlBase + "/Classes/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use Class.libraries.create() instead.
            "::create::Class::libraries": {
              url: urlBase + "/Classes/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use Class.libraries.createMany() instead.
            "::createMany::Class::libraries": {
              isArray: true,
              url: urlBase + "/Classes/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use Class.libraries.destroyAll() instead.
            "::delete::Class::libraries": {
              url: urlBase + "/Classes/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use Class.libraries.count() instead.
            "::count::Class::libraries": {
              url: urlBase + "/Classes/:id/libraries/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Library#upsert
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Library#updateOrCreate
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Library#patchOrCreateWithWhere
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Library#update
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Library#destroyById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Library#removeById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Library#updateAttributes
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Library id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Library#modelName
        * @propertyOf lbServices.Library
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Library`.
        */
        R.modelName = "Library";


            /**
             * @ngdoc method
             * @name lbServices.Library#school
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Library id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Library::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Library#student
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Library id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Library::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Library#class
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Library id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Library::class"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StudentParent
 * @header lbServices.StudentParent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StudentParent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StudentParent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/StudentParents/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use StudentParent.parent() instead.
            "prototype$__get__parent": {
              url: urlBase + "/StudentParents/:id/parent",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/StudentParents/:id/student",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/StudentParents/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#create
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/StudentParents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#createMany
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/StudentParents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#patchOrCreate
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/StudentParents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#replaceOrCreate
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/StudentParents/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#upsertWithWhere
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/StudentParents/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#exists
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/StudentParents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#findById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/StudentParents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#replaceById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/StudentParents/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#find
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/StudentParents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#findOne
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/StudentParents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#updateAll
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/StudentParents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#deleteById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/StudentParents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#count
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/StudentParents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#prototype$patchAttributes
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudentParent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/StudentParents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#createChangeStream
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/StudentParents/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.findById() instead.
            "::findById::Student::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.destroyById() instead.
            "::destroyById::Student::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.updateById() instead.
            "::updateById::Student::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentParents() instead.
            "::get::Student::studentParents": {
              isArray: true,
              url: urlBase + "/Students/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.create() instead.
            "::create::Student::studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.createMany() instead.
            "::createMany::Student::studentParents": {
              isArray: true,
              url: urlBase + "/Students/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.destroyAll() instead.
            "::delete::Student::studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.count() instead.
            "::count::Student::studentParents": {
              url: urlBase + "/Students/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.findById() instead.
            "::findById::Parent::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.destroyById() instead.
            "::destroyById::Parent::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.updateById() instead.
            "::updateById::Parent::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Parent.studentParents() instead.
            "::get::Parent::studentParents": {
              isArray: true,
              url: urlBase + "/Parents/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.create() instead.
            "::create::Parent::studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Parent.studentParents.createMany() instead.
            "::createMany::Parent::studentParents": {
              isArray: true,
              url: urlBase + "/Parents/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Parent.studentParents.destroyAll() instead.
            "::delete::Parent::studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.count() instead.
            "::count::Parent::studentParents": {
              url: urlBase + "/Parents/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.findById() instead.
            "::findById::School::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.destroyById() instead.
            "::destroyById::School::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.updateById() instead.
            "::updateById::School::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.studentParents() instead.
            "::get::School::studentParents": {
              isArray: true,
              url: urlBase + "/Schools/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.create() instead.
            "::create::School::studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use School.studentParents.createMany() instead.
            "::createMany::School::studentParents": {
              isArray: true,
              url: urlBase + "/Schools/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use School.studentParents.destroyAll() instead.
            "::delete::School::studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.count() instead.
            "::count::School::studentParents": {
              url: urlBase + "/Schools/:id/studentParents/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StudentParent#upsert
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#updateOrCreate
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#patchOrCreateWithWhere
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#update
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#destroyById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#removeById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#updateAttributes
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudentParent id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.StudentParent#modelName
        * @propertyOf lbServices.StudentParent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StudentParent`.
        */
        R.modelName = "StudentParent";


            /**
             * @ngdoc method
             * @name lbServices.StudentParent#parent
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Fetches belongsTo relation parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudentParent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parent = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::get::StudentParent::parent"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#student
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudentParent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::StudentParent::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#school
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudentParent id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::StudentParent::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Attendance
 * @header lbServices.Attendance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Attendance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Attendance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Attendances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Attendance.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Attendances/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Attendance.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Attendances/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#create
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Attendances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#createMany
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Attendances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#patchOrCreate
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Attendances",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#replaceOrCreate
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Attendances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#upsertWithWhere
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Attendances/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#exists
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Attendances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#findById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Attendances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#replaceById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Attendances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#find
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Attendances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#findOne
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Attendances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#updateAll
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Attendances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#deleteById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Attendances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#count
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Attendances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#prototype$patchAttributes
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Attendance id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Attendances/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#createChangeStream
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Attendances/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#attendanceDetails
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Attendance with morning first and evening last
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{*=}` -
             */
            "attendanceDetails": {
              url: urlBase + "/Attendances/attendanceDetails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#regExTest
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * get url including the embedded system attendance
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `Month` – `{string=}` -
             *
             *  - `Year` – `{string=}` -
             *
             *  - `RFID` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `match` – `{string=}` -
             */
            "regExTest": {
              url: urlBase + "/Attendances/regExTest",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#embedAttendance
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * get url including the embedded system attendance
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `success` – `{string=}` -
             */
            "embedAttendance": {
              url: urlBase + "/Attendances/embedAttendance",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#embedAttendances
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * get url including the embedded system attendance
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `SId` – `{string=}` -
             *
             *  - `MId` – `{string=}` -
             *
             *  - `RFId` – `{string=}` -
             *
             *  - `DOT` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `Id` – `{string=}` -
             */
            "embedAttendances": {
              url: urlBase + "/Attendances/embedAttendances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#reportAttendances
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * get Attendance Based On The From and Two Dates
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `SID` – `{string=}` -
             *
             *  - `fromDate` – `{string=}` -
             *
             *  - `toDate` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `reports` – `{*=}` -
             */
            "reportAttendances": {
              url: urlBase + "/Attendances/reportAttendances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#attenFromRFID
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `query` – `{*=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "attenFromRFID": {
              url: urlBase + "/Attendances/rfid",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#SendSMS
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Send Mobile SMs To Parents
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `success` – `{*=}` -
             */
            "SendSMS": {
              url: urlBase + "/Attendances/sendSMS",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Attendance#upsert
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#updateOrCreate
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#patchOrCreateWithWhere
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#update
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#destroyById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#removeById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#updateAttributes
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Attendance id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Attendance#modelName
        * @propertyOf lbServices.Attendance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Attendance`.
        */
        R.modelName = "Attendance";


            /**
             * @ngdoc method
             * @name lbServices.Attendance#school
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Attendance id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Attendance::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Attendance#student
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Attendance id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Attendance::student"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BusService
 * @header lbServices.BusService
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BusService` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BusService",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/BusServices/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BusService.bus() instead.
            "prototype$__get__bus": {
              url: urlBase + "/BusServices/:id/bus",
              method: "GET",
            },

            // INTERNAL. Use BusService.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/BusServices/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#create
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BusServices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#createMany
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BusServices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#patchOrCreate
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/BusServices",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#replaceOrCreate
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/BusServices/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#upsertWithWhere
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/BusServices/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#exists
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BusServices/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#findById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BusServices/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#replaceById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/BusServices/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#find
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BusServices",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#findOne
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BusServices/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#updateAll
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/BusServices/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#deleteById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BusServices/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#count
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BusServices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#prototype$patchAttributes
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusService id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/BusServices/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#createChangeStream
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BusServices/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.findById() instead.
            "::findById::School::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.destroyById() instead.
            "::destroyById::School::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.updateById() instead.
            "::updateById::School::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.busServices() instead.
            "::get::School::busServices": {
              isArray: true,
              url: urlBase + "/Schools/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.create() instead.
            "::create::School::busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.createMany() instead.
            "::createMany::School::busServices": {
              isArray: true,
              url: urlBase + "/Schools/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.destroyAll() instead.
            "::delete::School::busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.count() instead.
            "::count::School::busServices": {
              url: urlBase + "/Schools/:id/busServices/count",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.findById() instead.
            "::findById::Bus::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.destroyById() instead.
            "::destroyById::Bus::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.updateById() instead.
            "::updateById::Bus::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bus.busServices() instead.
            "::get::Bus::busServices": {
              isArray: true,
              url: urlBase + "/Buses/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.create() instead.
            "::create::Bus::busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use Bus.busServices.createMany() instead.
            "::createMany::Bus::busServices": {
              isArray: true,
              url: urlBase + "/Buses/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use Bus.busServices.destroyAll() instead.
            "::delete::Bus::busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.count() instead.
            "::count::Bus::busServices": {
              url: urlBase + "/Buses/:id/busServices/count",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.busService() instead.
            "::get::BusSubscription::busService": {
              url: urlBase + "/BusSubscriptions/:id/busService",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BusService#upsert
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#updateOrCreate
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#patchOrCreateWithWhere
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#update
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#destroyById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#removeById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#updateAttributes
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusService id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.BusService#modelName
        * @propertyOf lbServices.BusService
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BusService`.
        */
        R.modelName = "BusService";


            /**
             * @ngdoc method
             * @name lbServices.BusService#bus
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Fetches belongsTo relation bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusService id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::get::BusService::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BusService#school
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusService id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::BusService::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ExpensePayment
 * @header lbServices.ExpensePayment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ExpensePayment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ExpensePayment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ExpensePayments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ExpensePayment.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/ExpensePayments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use ExpensePayment.staffs() instead.
            "prototype$__get__staffs": {
              url: urlBase + "/ExpensePayments/:id/staffs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#create
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ExpensePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#createMany
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ExpensePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#patchOrCreate
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ExpensePayments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#replaceOrCreate
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ExpensePayments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#upsertWithWhere
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ExpensePayments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#exists
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ExpensePayments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#findById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ExpensePayments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#replaceById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ExpensePayments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#find
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ExpensePayments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#findOne
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ExpensePayments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#updateAll
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ExpensePayments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#deleteById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ExpensePayments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#count
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ExpensePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#prototype$patchAttributes
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExpensePayment id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ExpensePayments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#createChangeStream
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ExpensePayments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.findById() instead.
            "::findById::School::expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.destroyById() instead.
            "::destroyById::School::expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.updateById() instead.
            "::updateById::School::expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.expensePayments() instead.
            "::get::School::expensePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/expensePayments",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.create() instead.
            "::create::School::expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.createMany() instead.
            "::createMany::School::expensePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/expensePayments",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.destroyAll() instead.
            "::delete::School::expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.count() instead.
            "::count::School::expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#upsert
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#updateOrCreate
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#patchOrCreateWithWhere
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#update
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#destroyById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#removeById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#updateAttributes
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExpensePayment id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ExpensePayment#modelName
        * @propertyOf lbServices.ExpensePayment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ExpensePayment`.
        */
        R.modelName = "ExpensePayment";


            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#school
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExpensePayment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::ExpensePayment::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#staffs
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Fetches belongsTo relation staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExpensePayment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.staffs = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::ExpensePayment::staffs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeeSetup
 * @header lbServices.FeeSetup
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeeSetup` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeeSetup",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FeeSetups/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeeSetup.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/FeeSetups/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/FeeSetups/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeSetup.feeCategories() instead.
            "prototype$__get__feeCategories": {
              url: urlBase + "/FeeSetups/:id/feeCategories",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeItems.findById() instead.
            "prototype$__findById__feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feeItems/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeItems.destroyById() instead.
            "prototype$__destroyById__feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feeItems/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feeItems.updateById() instead.
            "prototype$__updateById__feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feeItems/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeSetup.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeItems() instead.
            "prototype$__get__feeItems": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeItems.create() instead.
            "prototype$__create__feeItems": {
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feeItems.destroyAll() instead.
            "prototype$__delete__feeItems": {
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feeItems.count() instead.
            "prototype$__count__feeItems": {
              url: urlBase + "/FeeSetups/:id/feeItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#create
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FeeSetups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#createMany
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FeeSetups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#patchOrCreate
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FeeSetups",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#replaceOrCreate
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FeeSetups/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#upsertWithWhere
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FeeSetups/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#exists
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FeeSetups/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#findById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FeeSetups/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#replaceById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FeeSetups/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#find
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FeeSetups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#findOne
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FeeSetups/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#updateAll
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FeeSetups/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#deleteById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FeeSetups/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#count
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FeeSetups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#prototype$patchAttributes
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FeeSetups/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#createChangeStream
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FeeSetups/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#getfeestups
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * get all students payment information
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `schoolId` – `{string}` -
             *
             *  - `classId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "getfeestups": {
              url: urlBase + "/FeeSetups/getfeestups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#upsertfeesetup
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Creating FeeSetup with Fee Items
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "upsertfeesetup": {
              url: urlBase + "/FeeSetups/upsertfeesetup",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#dataMigration
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Creating FeeSetup with Fee Items
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "dataMigration": {
              url: urlBase + "/FeeSetups/dataMigration",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#paymentRecMigration
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Migration the  payment with Fee Items
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "paymentRecMigration": {
              url: urlBase + "/FeeSetups/paymentRecMigration",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#optionFeeSave
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Migration the  payment with Fee Items
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "optionFeeSave": {
              url: urlBase + "/FeeSetups/optionFeeSave",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#updatingFeeItemsIdIntoFeePayment
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Migration the  payment with Fee Items
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "updatingFeeItemsIdIntoFeePayment": {
              url: urlBase + "/FeeSetups/updatingFeeItemsIdIntoFeePayment",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.findById() instead.
            "::findById::School::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.destroyById() instead.
            "::destroyById::School::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.updateById() instead.
            "::updateById::School::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feeSetups() instead.
            "::get::School::feeSetups": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.create() instead.
            "::create::School::feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.createMany() instead.
            "::createMany::School::feeSetups": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.destroyAll() instead.
            "::delete::School::feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.count() instead.
            "::count::School::feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.findById() instead.
            "::findById::Class::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.destroyById() instead.
            "::destroyById::Class::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.updateById() instead.
            "::updateById::Class::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feeSetups() instead.
            "::get::Class::feeSetups": {
              isArray: true,
              url: urlBase + "/Classes/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.create() instead.
            "::create::Class::feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use Class.feeSetups.createMany() instead.
            "::createMany::Class::feeSetups": {
              isArray: true,
              url: urlBase + "/Classes/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use Class.feeSetups.destroyAll() instead.
            "::delete::Class::feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.count() instead.
            "::count::Class::feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.feeSetup() instead.
            "::get::FeePayment::feeSetup": {
              url: urlBase + "/FeePayments/:id/feeSetup",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.feeSetup.findById() instead.
            "::findById::FeeCategory::feeSetup": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeCategories/:id/feeSetup/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.feeSetup.destroyById() instead.
            "::destroyById::FeeCategory::feeSetup": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeCategories/:id/feeSetup/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeCategory.feeSetup.updateById() instead.
            "::updateById::FeeCategory::feeSetup": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeCategories/:id/feeSetup/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeCategory.feeSetup() instead.
            "::get::FeeCategory::feeSetup": {
              isArray: true,
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.feeSetup.create() instead.
            "::create::FeeCategory::feeSetup": {
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "POST",
            },

            // INTERNAL. Use FeeCategory.feeSetup.createMany() instead.
            "::createMany::FeeCategory::feeSetup": {
              isArray: true,
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "POST",
            },

            // INTERNAL. Use FeeCategory.feeSetup.destroyAll() instead.
            "::delete::FeeCategory::feeSetup": {
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "DELETE",
            },

            // INTERNAL. Use FeeCategory.feeSetup.count() instead.
            "::count::FeeCategory::feeSetup": {
              url: urlBase + "/FeeCategories/:id/feeSetup/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#upsert
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#updateOrCreate
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#patchOrCreateWithWhere
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#update
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#destroyById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#removeById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#updateAttributes
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeeSetup#modelName
        * @propertyOf lbServices.FeeSetup
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeeSetup`.
        */
        R.modelName = "FeeSetup";


            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#class
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::FeeSetup::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#school
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::FeeSetup::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FeeSetup.feePayments
     * @header lbServices.FeeSetup.feePayments
     * @object
     * @description
     *
     * The object `FeeSetup.feePayments` groups methods
     * manipulating `FeePayment` instances related to `FeeSetup`.
     *
     * Call {@link lbServices.FeeSetup#feePayments FeeSetup.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#feePayments
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Queries feePayments of FeeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#count
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Counts feePayments of FeeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#create
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#createMany
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#destroyAll
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#destroyById
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#findById
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#updateById
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#feeCategories
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Fetches belongsTo relation feeCategories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R.feeCategories = function() {
          var TargetResource = $injector.get("FeeCategory");
          var action = TargetResource["::get::FeeSetup::feeCategories"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FeeSetup.feeItems
     * @header lbServices.FeeSetup.feeItems
     * @object
     * @description
     *
     * The object `FeeSetup.feeItems` groups methods
     * manipulating `FeeItem` instances related to `FeeSetup`.
     *
     * Call {@link lbServices.FeeSetup#feeItems FeeSetup.feeItems()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#feeItems
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Queries feeItems of FeeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::get::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#count
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Counts feeItems of FeeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeItems.count = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::count::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#create
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Creates a new instance in feeItems of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.create = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::create::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#createMany
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Creates a new instance in feeItems of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.createMany = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::createMany::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#destroyAll
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Deletes all feeItems of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeItems.destroyAll = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::delete::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#destroyById
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Delete a related item by id for feeItems.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeItems
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeItems.destroyById = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::destroyById::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#findById
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Find a related item by id for feeItems.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeItems
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.findById = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::findById::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feeItems#updateById
             * @methodOf lbServices.FeeSetup.feeItems
             *
             * @description
             *
             * Update a related item by id for feeItems.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeSetup id
             *
             *  - `fk` – `{*}` - Foreign key for feeItems
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.updateById = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::updateById::FeeSetup::feeItems"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BusSubscription
 * @header lbServices.BusSubscription
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BusSubscription` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BusSubscription",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/BusSubscriptions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BusSubscription.busService() instead.
            "prototype$__get__busService": {
              url: urlBase + "/BusSubscriptions/:id/busService",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/BusSubscriptions/:id/student",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/BusSubscriptions/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#create
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BusSubscriptions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#createMany
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BusSubscriptions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#patchOrCreate
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/BusSubscriptions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#replaceOrCreate
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/BusSubscriptions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#upsertWithWhere
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/BusSubscriptions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#exists
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BusSubscriptions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#findById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BusSubscriptions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#replaceById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/BusSubscriptions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#find
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BusSubscriptions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#findOne
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BusSubscriptions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#updateAll
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/BusSubscriptions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#deleteById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BusSubscriptions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#count
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BusSubscriptions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#prototype$patchAttributes
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusSubscription id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/BusSubscriptions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#createChangeStream
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BusSubscriptions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions() instead.
            "::get::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "GET",
            },

            // INTERNAL. Use Student.busSubscriptions.create() instead.
            "::create::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions.createMany() instead.
            "::createMany::Student::busSubscriptions": {
              isArray: true,
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions.update() instead.
            "::update::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "PUT",
            },

            // INTERNAL. Use Student.busSubscriptions.destroy() instead.
            "::destroy::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "DELETE",
            },

            // INTERNAL. Use School.busSubscriptions.findById() instead.
            "::findById::School::busSubscriptions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busSubscriptions/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.busSubscriptions.destroyById() instead.
            "::destroyById::School::busSubscriptions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busSubscriptions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.busSubscriptions.updateById() instead.
            "::updateById::School::busSubscriptions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busSubscriptions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.busSubscriptions() instead.
            "::get::School::busSubscriptions": {
              isArray: true,
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "GET",
            },

            // INTERNAL. Use School.busSubscriptions.create() instead.
            "::create::School::busSubscriptions": {
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use School.busSubscriptions.createMany() instead.
            "::createMany::School::busSubscriptions": {
              isArray: true,
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use School.busSubscriptions.destroyAll() instead.
            "::delete::School::busSubscriptions": {
              url: urlBase + "/Schools/:id/busSubscriptions",
              method: "DELETE",
            },

            // INTERNAL. Use School.busSubscriptions.count() instead.
            "::count::School::busSubscriptions": {
              url: urlBase + "/Schools/:id/busSubscriptions/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#upsert
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#updateOrCreate
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#patchOrCreateWithWhere
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#update
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#destroyById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#removeById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#updateAttributes
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusSubscription id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.BusSubscription#modelName
        * @propertyOf lbServices.BusSubscription
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BusSubscription`.
        */
        R.modelName = "BusSubscription";


            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#busService
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Fetches belongsTo relation busService.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusSubscription id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busService = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::get::BusSubscription::busService"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#student
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusSubscription id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::BusSubscription::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#school
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BusSubscription id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::BusSubscription::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Exam
 * @header lbServices.Exam
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Exam` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Exam",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Exams/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Exam.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Exams/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Exam.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Exams/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.maxMarks.findById() instead.
            "prototype$__findById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.destroyById() instead.
            "prototype$__destroyById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.updateById() instead.
            "prototype$__updateById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Exams/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Exam.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Exams/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks() instead.
            "prototype$__get__maxMarks": {
              isArray: true,
              url: urlBase + "/Exams/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.create() instead.
            "prototype$__create__maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Exam.maxMarks.destroyAll() instead.
            "prototype$__delete__maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.count() instead.
            "prototype$__count__maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#create
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Exams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#createMany
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Exams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#patchOrCreate
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Exams",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#replaceOrCreate
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Exams/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#upsertWithWhere
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Exams/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#exists
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Exams/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#findById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Exams/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#replaceById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Exams/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#find
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Exams",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#findOne
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Exams/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#updateAll
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Exams/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#deleteById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Exams/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#count
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Exams/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#prototype$patchAttributes
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Exams/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#createChangeStream
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Exams/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.exams.findById() instead.
            "::findById::School::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.exams.destroyById() instead.
            "::destroyById::School::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.updateById() instead.
            "::updateById::School::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.exams() instead.
            "::get::School::exams": {
              isArray: true,
              url: urlBase + "/Schools/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use School.exams.create() instead.
            "::create::School::exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use School.exams.createMany() instead.
            "::createMany::School::exams": {
              isArray: true,
              url: urlBase + "/Schools/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use School.exams.destroyAll() instead.
            "::delete::School::exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.count() instead.
            "::count::School::exams": {
              url: urlBase + "/Schools/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.findById() instead.
            "::findById::Class::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.destroyById() instead.
            "::destroyById::Class::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.updateById() instead.
            "::updateById::Class::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.exams() instead.
            "::get::Class::exams": {
              isArray: true,
              url: urlBase + "/Classes/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.create() instead.
            "::create::Class::exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use Class.exams.createMany() instead.
            "::createMany::Class::exams": {
              isArray: true,
              url: urlBase + "/Classes/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use Class.exams.destroyAll() instead.
            "::delete::Class::exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.count() instead.
            "::count::Class::exams": {
              url: urlBase + "/Classes/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use Marks.exam() instead.
            "::get::Marks::exam": {
              url: urlBase + "/Marks/:id/exam",
              method: "GET",
            },

            // INTERNAL. Use MaxMark.exam() instead.
            "::get::MaxMark::exam": {
              url: urlBase + "/MaxMarks/:id/exam",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Exam#upsert
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#updateOrCreate
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#patchOrCreateWithWhere
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#update
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#destroyById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#removeById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#updateAttributes
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Exam#modelName
        * @propertyOf lbServices.Exam
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Exam`.
        */
        R.modelName = "Exam";


            /**
             * @ngdoc method
             * @name lbServices.Exam#class
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Exam::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam#school
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Exam::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Exam.marks
     * @header lbServices.Exam.marks
     * @object
     * @description
     *
     * The object `Exam.marks` groups methods
     * manipulating `Marks` instances related to `Exam`.
     *
     * Call {@link lbServices.Exam#marks Exam.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Exam#marks
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Queries marks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#count
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Counts marks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#create
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#createMany
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#destroyAll
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#destroyById
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#findById
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#updateById
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Exam::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Exam.maxMarks
     * @header lbServices.Exam.maxMarks
     * @object
     * @description
     *
     * The object `Exam.maxMarks` groups methods
     * manipulating `MaxMark` instances related to `Exam`.
     *
     * Call {@link lbServices.Exam#maxMarks Exam.maxMarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Exam#maxMarks
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Queries maxMarks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::get::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#count
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Counts maxMarks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.maxMarks.count = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::count::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#create
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.create = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::create::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#createMany
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.createMany = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::createMany::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#destroyAll
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Deletes all maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyAll = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::delete::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#destroyById
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Delete a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::destroyById::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#findById
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Find a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.findById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::findById::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#updateById
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Update a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Exam id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.updateById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::updateById::Exam::maxMarks"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Grade
 * @header lbServices.Grade
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Grade` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Grade",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Grades/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Grade.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Grades/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#create
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Grades",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#createMany
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Grades",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#patchOrCreate
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Grades",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#replaceOrCreate
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Grades/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#upsertWithWhere
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Grades/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#exists
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Grades/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#findById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Grades/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#replaceById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Grades/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#find
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Grades",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#findOne
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Grades/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#updateAll
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Grades/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#deleteById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Grades/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#count
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Grades/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#prototype$patchAttributes
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Grade id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Grades/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#createChangeStream
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Grades/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.grades.findById() instead.
            "::findById::School::grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.grades.destroyById() instead.
            "::destroyById::School::grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.updateById() instead.
            "::updateById::School::grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.grades() instead.
            "::get::School::grades": {
              isArray: true,
              url: urlBase + "/Schools/:id/grades",
              method: "GET",
            },

            // INTERNAL. Use School.grades.create() instead.
            "::create::School::grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "POST",
            },

            // INTERNAL. Use School.grades.createMany() instead.
            "::createMany::School::grades": {
              isArray: true,
              url: urlBase + "/Schools/:id/grades",
              method: "POST",
            },

            // INTERNAL. Use School.grades.destroyAll() instead.
            "::delete::School::grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.count() instead.
            "::count::School::grades": {
              url: urlBase + "/Schools/:id/grades/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Grade#upsert
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#updateOrCreate
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#patchOrCreateWithWhere
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#update
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#destroyById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#removeById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#updateAttributes
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Grade id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Grade#modelName
        * @propertyOf lbServices.Grade
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Grade`.
        */
        R.modelName = "Grade";


            /**
             * @ngdoc method
             * @name lbServices.Grade#school
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Grade id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Grade::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Marks
 * @header lbServices.Marks
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Marks` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Marks",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Marks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Marks.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Marks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Marks.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Marks/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Marks.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Marks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Marks.exam() instead.
            "prototype$__get__exam": {
              url: urlBase + "/Marks/:id/exam",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#create
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Marks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#createMany
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Marks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#patchOrCreate
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Marks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#replaceOrCreate
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Marks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#upsertWithWhere
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Marks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#exists
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Marks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#findById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Marks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#replaceById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Marks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#find
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Marks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#findOne
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Marks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#updateAll
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Marks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#deleteById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Marks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#count
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Marks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#prototype$patchAttributes
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Marks id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Marks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#createChangeStream
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Marks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.findById() instead.
            "::findById::Student::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.destroyById() instead.
            "::destroyById::Student::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.updateById() instead.
            "::updateById::Student::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.marks() instead.
            "::get::Student::marks": {
              isArray: true,
              url: urlBase + "/Students/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.create() instead.
            "::create::Student::marks": {
              url: urlBase + "/Students/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.createMany() instead.
            "::createMany::Student::marks": {
              isArray: true,
              url: urlBase + "/Students/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.destroyAll() instead.
            "::delete::Student::marks": {
              url: urlBase + "/Students/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.count() instead.
            "::count::Student::marks": {
              url: urlBase + "/Students/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.findById() instead.
            "::findById::Class::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.destroyById() instead.
            "::destroyById::Class::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.updateById() instead.
            "::updateById::Class::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.marks() instead.
            "::get::Class::marks": {
              isArray: true,
              url: urlBase + "/Classes/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.create() instead.
            "::create::Class::marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Class.marks.createMany() instead.
            "::createMany::Class::marks": {
              isArray: true,
              url: urlBase + "/Classes/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Class.marks.destroyAll() instead.
            "::delete::Class::marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.count() instead.
            "::count::Class::marks": {
              url: urlBase + "/Classes/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.findById() instead.
            "::findById::Subject::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.destroyById() instead.
            "::destroyById::Subject::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.updateById() instead.
            "::updateById::Subject::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.marks() instead.
            "::get::Subject::marks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.create() instead.
            "::create::Subject::marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Subject.marks.createMany() instead.
            "::createMany::Subject::marks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Subject.marks.destroyAll() instead.
            "::delete::Subject::marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.count() instead.
            "::count::Subject::marks": {
              url: urlBase + "/Subjects/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.findById() instead.
            "::findById::Exam::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.destroyById() instead.
            "::destroyById::Exam::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.updateById() instead.
            "::updateById::Exam::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.marks() instead.
            "::get::Exam::marks": {
              isArray: true,
              url: urlBase + "/Exams/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.create() instead.
            "::create::Exam::marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Exam.marks.createMany() instead.
            "::createMany::Exam::marks": {
              isArray: true,
              url: urlBase + "/Exams/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Exam.marks.destroyAll() instead.
            "::delete::Exam::marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.count() instead.
            "::count::Exam::marks": {
              url: urlBase + "/Exams/:id/marks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Marks#upsert
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#updateOrCreate
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#patchOrCreateWithWhere
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#update
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#destroyById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#removeById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#updateAttributes
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Marks id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Marks#modelName
        * @propertyOf lbServices.Marks
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Marks`.
        */
        R.modelName = "Marks";


            /**
             * @ngdoc method
             * @name lbServices.Marks#student
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Marks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Marks::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Marks#class
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Marks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Marks::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Marks#subject
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Marks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Marks::subject"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Marks#exam
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Marks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exam = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::Marks::exam"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeePayment
 * @header lbServices.FeePayment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeePayment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeePayment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FeePayments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeePayment.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/FeePayments/:id/student",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.feeSetup() instead.
            "prototype$__get__feeSetup": {
              url: urlBase + "/FeePayments/:id/feeSetup",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/FeePayments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/FeePayments/:id/class",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#create
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FeePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#createMany
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FeePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#patchOrCreate
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FeePayments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#replaceOrCreate
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FeePayments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#upsertWithWhere
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FeePayments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#exists
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FeePayments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#findById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FeePayments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#replaceById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FeePayments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#find
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FeePayments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#findOne
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FeePayments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#updateAll
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FeePayments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#deleteById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FeePayments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#count
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FeePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#prototype$patchAttributes
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeePayment id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FeePayments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#createChangeStream
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FeePayments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#pay
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * create payment for given details
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "pay": {
              url: urlBase + "/FeePayments/pay",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#gestudentpaymentdetails
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * get Student payment details
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `studentId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "gestudentpaymentdetails": {
              url: urlBase + "/FeePayments/gestudentpaymentdetails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#gestudents
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * get all students payment information
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `schoolId` – `{string}` -
             *
             *  - `role` – `{string}` -
             *
             *  - `studentId` – `{string=}` -
             *
             *  - `classId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "gestudents": {
              url: urlBase + "/FeePayments/gestudents",
              method: "GET",
            },

            // INTERNAL. Use Student.feePayments.findById() instead.
            "::findById::Student::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.feePayments.destroyById() instead.
            "::destroyById::Student::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.feePayments.updateById() instead.
            "::updateById::Student::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.feePayments() instead.
            "::get::Student::feePayments": {
              isArray: true,
              url: urlBase + "/Students/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use Student.feePayments.create() instead.
            "::create::Student::feePayments": {
              url: urlBase + "/Students/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Student.feePayments.createMany() instead.
            "::createMany::Student::feePayments": {
              isArray: true,
              url: urlBase + "/Students/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Student.feePayments.destroyAll() instead.
            "::delete::Student::feePayments": {
              url: urlBase + "/Students/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use Student.feePayments.count() instead.
            "::count::Student::feePayments": {
              url: urlBase + "/Students/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use School.feePayments.findById() instead.
            "::findById::School::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feePayments.destroyById() instead.
            "::destroyById::School::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feePayments.updateById() instead.
            "::updateById::School::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feePayments() instead.
            "::get::School::feePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use School.feePayments.create() instead.
            "::create::School::feePayments": {
              url: urlBase + "/Schools/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use School.feePayments.createMany() instead.
            "::createMany::School::feePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use School.feePayments.destroyAll() instead.
            "::delete::School::feePayments": {
              url: urlBase + "/Schools/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use School.feePayments.count() instead.
            "::count::School::feePayments": {
              url: urlBase + "/Schools/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.findById() instead.
            "::findById::Class::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.destroyById() instead.
            "::destroyById::Class::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.updateById() instead.
            "::updateById::Class::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feePayments() instead.
            "::get::Class::feePayments": {
              isArray: true,
              url: urlBase + "/Classes/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.create() instead.
            "::create::Class::feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.createMany() instead.
            "::createMany::Class::feePayments": {
              isArray: true,
              url: urlBase + "/Classes/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.destroyAll() instead.
            "::delete::Class::feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.count() instead.
            "::count::Class::feePayments": {
              url: urlBase + "/Classes/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.findById() instead.
            "::findById::FeeSetup::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyById() instead.
            "::destroyById::FeeSetup::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.updateById() instead.
            "::updateById::FeeSetup::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeSetup.feePayments() instead.
            "::get::FeeSetup::feePayments": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.create() instead.
            "::create::FeeSetup::feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feePayments.createMany() instead.
            "::createMany::FeeSetup::feePayments": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyAll() instead.
            "::delete::FeeSetup::feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.count() instead.
            "::count::FeeSetup::feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use StudentPayments.feePayments.findById() instead.
            "::findById::StudentPayments::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/studentPayments/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use StudentPayments.feePayments.destroyById() instead.
            "::destroyById::StudentPayments::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/studentPayments/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use StudentPayments.feePayments.updateById() instead.
            "::updateById::StudentPayments::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/studentPayments/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use StudentPayments.feePayments() instead.
            "::get::StudentPayments::feePayments": {
              isArray: true,
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use StudentPayments.feePayments.create() instead.
            "::create::StudentPayments::feePayments": {
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use StudentPayments.feePayments.createMany() instead.
            "::createMany::StudentPayments::feePayments": {
              isArray: true,
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use StudentPayments.feePayments.destroyAll() instead.
            "::delete::StudentPayments::feePayments": {
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use StudentPayments.feePayments.count() instead.
            "::count::StudentPayments::feePayments": {
              url: urlBase + "/studentPayments/:id/feePayments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeePayment#upsert
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#updateOrCreate
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#patchOrCreateWithWhere
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#update
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#destroyById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#removeById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#updateAttributes
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeePayment id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeePayment#modelName
        * @propertyOf lbServices.FeePayment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeePayment`.
        */
        R.modelName = "FeePayment";


            /**
             * @ngdoc method
             * @name lbServices.FeePayment#student
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeePayment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::FeePayment::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#feeSetup
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Fetches belongsTo relation feeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeePayment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::FeePayment::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#school
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeePayment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::FeePayment::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#class
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeePayment id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::FeePayment::class"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Mail
 * @header lbServices.Mail
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Mail` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Mail",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Mails/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Mail#create
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Mails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#createMany
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Mails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#patchOrCreate
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Mails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#replaceOrCreate
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Mails/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#upsertWithWhere
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Mails/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#exists
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Mails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#findById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Mails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#replaceById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Mails/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#find
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Mails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#findOne
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Mails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#updateAll
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Mails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#deleteById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Mails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#count
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Mails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#prototype$patchAttributes
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Mail id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Mails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#createChangeStream
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Mails/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Mail#upsert
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#updateOrCreate
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#patchOrCreateWithWhere
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#update
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#destroyById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#removeById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#updateAttributes
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Mail id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Mail#modelName
        * @propertyOf lbServices.Mail
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Mail`.
        */
        R.modelName = "Mail";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Remarks
 * @header lbServices.Remarks
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Remarks` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Remarks",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Remarks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Remarks.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Remarks/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#create
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Remarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#createMany
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Remarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#patchOrCreate
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Remarks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#replaceOrCreate
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Remarks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#upsertWithWhere
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Remarks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#exists
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Remarks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#findById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Remarks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#replaceById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Remarks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#find
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Remarks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#findOne
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Remarks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#updateAll
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Remarks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#deleteById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Remarks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#count
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Remarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#prototype$patchAttributes
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Remarks id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Remarks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#createChangeStream
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Remarks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.findById() instead.
            "::findById::Student::remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.destroyById() instead.
            "::destroyById::Student::remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.updateById() instead.
            "::updateById::Student::remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.remarks() instead.
            "::get::Student::remarks": {
              isArray: true,
              url: urlBase + "/Students/:id/remarks",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.create() instead.
            "::create::Student::remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.createMany() instead.
            "::createMany::Student::remarks": {
              isArray: true,
              url: urlBase + "/Students/:id/remarks",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.destroyAll() instead.
            "::delete::Student::remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.count() instead.
            "::count::Student::remarks": {
              url: urlBase + "/Students/:id/remarks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Remarks#upsert
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#updateOrCreate
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#patchOrCreateWithWhere
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#update
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#destroyById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#removeById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#updateAttributes
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Remarks id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Remarks#modelName
        * @propertyOf lbServices.Remarks
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Remarks`.
        */
        R.modelName = "Remarks";


            /**
             * @ngdoc method
             * @name lbServices.Remarks#student
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Remarks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Remarks::student"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.WorkingDay
 * @header lbServices.WorkingDay
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `WorkingDay` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "WorkingDay",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/WorkingDays/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use WorkingDay.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/WorkingDays/:id/school",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use WorkingDay.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/WorkingDays/:id/schedules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#create
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/WorkingDays",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#createMany
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/WorkingDays",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#patchOrCreate
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/WorkingDays",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#replaceOrCreate
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/WorkingDays/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#upsertWithWhere
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/WorkingDays/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#exists
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/WorkingDays/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#findById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/WorkingDays/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#replaceById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/WorkingDays/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#find
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/WorkingDays",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#findOne
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/WorkingDays/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#updateAll
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/WorkingDays/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#deleteById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/WorkingDays/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#count
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/WorkingDays/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#prototype$patchAttributes
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/WorkingDays/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#createChangeStream
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/WorkingDays/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.findById() instead.
            "::findById::School::workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.destroyById() instead.
            "::destroyById::School::workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.updateById() instead.
            "::updateById::School::workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.workingDays() instead.
            "::get::School::workingDays": {
              isArray: true,
              url: urlBase + "/Schools/:id/workingDays",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.create() instead.
            "::create::School::workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.createMany() instead.
            "::createMany::School::workingDays": {
              isArray: true,
              url: urlBase + "/Schools/:id/workingDays",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.destroyAll() instead.
            "::delete::School::workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.count() instead.
            "::count::School::workingDays": {
              url: urlBase + "/Schools/:id/workingDays/count",
              method: "GET",
            },

            // INTERNAL. Use Schedule.workingDay() instead.
            "::get::Schedule::workingDay": {
              url: urlBase + "/Schedules/:id/workingDay",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#upsert
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#updateOrCreate
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#patchOrCreateWithWhere
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#update
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#destroyById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#removeById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#updateAttributes
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.WorkingDay#modelName
        * @propertyOf lbServices.WorkingDay
        * @description
        * The name of the model represented by this $resource,
        * i.e. `WorkingDay`.
        */
        R.modelName = "WorkingDay";


            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#school
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::WorkingDay::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.WorkingDay.schedules
     * @header lbServices.WorkingDay.schedules
     * @object
     * @description
     *
     * The object `WorkingDay.schedules` groups methods
     * manipulating `Schedule` instances related to `WorkingDay`.
     *
     * Call {@link lbServices.WorkingDay#schedules WorkingDay.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#schedules
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Queries schedules of WorkingDay.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#count
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Counts schedules of WorkingDay.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#create
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#createMany
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#destroyAll
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#destroyById
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#findById
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#updateById
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkingDay id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.MaxMark
 * @header lbServices.MaxMark
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `MaxMark` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "MaxMark",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/MaxMarks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use MaxMark.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/MaxMarks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use MaxMark.exam() instead.
            "prototype$__get__exam": {
              url: urlBase + "/MaxMarks/:id/exam",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#create
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/MaxMarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#createMany
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/MaxMarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#patchOrCreate
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/MaxMarks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#replaceOrCreate
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/MaxMarks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#upsertWithWhere
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/MaxMarks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#exists
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/MaxMarks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#findById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/MaxMarks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#replaceById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/MaxMarks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#find
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/MaxMarks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#findOne
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/MaxMarks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#updateAll
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/MaxMarks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#deleteById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/MaxMarks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#count
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/MaxMarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#prototype$patchAttributes
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MaxMark id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/MaxMarks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#createChangeStream
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/MaxMarks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.findById() instead.
            "::findById::Subject::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.destroyById() instead.
            "::destroyById::Subject::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.updateById() instead.
            "::updateById::Subject::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.maxMarks() instead.
            "::get::Subject::maxMarks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.create() instead.
            "::create::Subject::maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.createMany() instead.
            "::createMany::Subject::maxMarks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.destroyAll() instead.
            "::delete::Subject::maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.count() instead.
            "::count::Subject::maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks/count",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.findById() instead.
            "::findById::Exam::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.destroyById() instead.
            "::destroyById::Exam::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.updateById() instead.
            "::updateById::Exam::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.maxMarks() instead.
            "::get::Exam::maxMarks": {
              isArray: true,
              url: urlBase + "/Exams/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.create() instead.
            "::create::Exam::maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Exam.maxMarks.createMany() instead.
            "::createMany::Exam::maxMarks": {
              isArray: true,
              url: urlBase + "/Exams/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Exam.maxMarks.destroyAll() instead.
            "::delete::Exam::maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.count() instead.
            "::count::Exam::maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.MaxMark#upsert
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#updateOrCreate
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#patchOrCreateWithWhere
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#update
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#destroyById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#removeById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#updateAttributes
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MaxMark id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.MaxMark#modelName
        * @propertyOf lbServices.MaxMark
        * @description
        * The name of the model represented by this $resource,
        * i.e. `MaxMark`.
        */
        R.modelName = "MaxMark";


            /**
             * @ngdoc method
             * @name lbServices.MaxMark#subject
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MaxMark id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::MaxMark::subject"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#exam
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Fetches belongsTo relation exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MaxMark id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exam = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::MaxMark::exam"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             *  - `file` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             *  - `file` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             *  - `file` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ImageContainer
 * @header lbServices.ImageContainer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ImageContainer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ImageContainer",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ImageContainers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#getContainers
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/ImageContainers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#getContainer
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/ImageContainers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#destroyContainer
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/ImageContainers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#upload
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `container` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/ImageContainers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#getFiles
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/ImageContainers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#removeFile
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/ImageContainers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#getFile
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/ImageContainers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#download
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/ImageContainers/:container/download/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#create
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ImageContainers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#createMany
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ImageContainers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#patchOrCreate
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ImageContainers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#replaceOrCreate
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ImageContainers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#upsertWithWhere
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ImageContainers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#exists
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ImageContainers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#findById
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ImageContainers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#replaceById
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ImageContainers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#find
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ImageContainers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#findOne
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ImageContainers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#updateAll
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ImageContainers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#deleteById
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ImageContainers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#count
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ImageContainers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#prototype$patchAttributes
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ImageContainer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ImageContainers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#createChangeStream
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ImageContainers/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#upsert
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#updateOrCreate
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#patchOrCreateWithWhere
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#update
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#destroyById
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#removeById
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ImageContainer#updateAttributes
             * @methodOf lbServices.ImageContainer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ImageContainer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ImageContainer` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ImageContainer#modelName
        * @propertyOf lbServices.ImageContainer
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ImageContainer`.
        */
        R.modelName = "ImageContainer";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Chat
 * @header lbServices.Chat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Chat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Chat",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Chats/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Chat.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Chats/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Chat.userMessages() instead.
            "prototype$__get__userMessages": {
              url: urlBase + "/Chats/:id/userMessages",
              method: "GET",
            },

            // INTERNAL. Use Chat.comments.findById() instead.
            "prototype$__findById__comments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chats/:id/comments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chat.comments.destroyById() instead.
            "prototype$__destroyById__comments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chats/:id/comments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chat.comments.updateById() instead.
            "prototype$__updateById__comments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chats/:id/comments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chat.sMUser() instead.
            "prototype$__get__sMUser": {
              url: urlBase + "/Chats/:id/sMUser",
              method: "GET",
            },

            // INTERNAL. Use Chat.sMReciver() instead.
            "prototype$__get__sMReciver": {
              url: urlBase + "/Chats/:id/sMReciver",
              method: "GET",
            },

            // INTERNAL. Use Chat.smsreports() instead.
            "prototype$__get__smsreports": {
              url: urlBase + "/Chats/:id/smsreports",
              method: "GET",
            },

            // INTERNAL. Use Chat.comments() instead.
            "prototype$__get__comments": {
              isArray: true,
              url: urlBase + "/Chats/:id/comments",
              method: "GET",
            },

            // INTERNAL. Use Chat.comments.create() instead.
            "prototype$__create__comments": {
              url: urlBase + "/Chats/:id/comments",
              method: "POST",
            },

            // INTERNAL. Use Chat.comments.destroyAll() instead.
            "prototype$__delete__comments": {
              url: urlBase + "/Chats/:id/comments",
              method: "DELETE",
            },

            // INTERNAL. Use Chat.comments.count() instead.
            "prototype$__count__comments": {
              url: urlBase + "/Chats/:id/comments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#create
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Chats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#createMany
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Chats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#patchOrCreate
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Chats",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#replaceOrCreate
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Chats/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#upsertWithWhere
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Chats/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#exists
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Chats/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#findById
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Chats/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#replaceById
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Chats/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#find
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Chats",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#findOne
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Chats/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#updateAll
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Chats/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#deleteById
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Chats/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#count
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Chats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#prototype$patchAttributes
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Chats/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chat#createChangeStream
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Chats/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.chats.findById() instead.
            "::findById::School::chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/chats/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.chats.destroyById() instead.
            "::destroyById::School::chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/chats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.chats.updateById() instead.
            "::updateById::School::chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/chats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.chats() instead.
            "::get::School::chats": {
              isArray: true,
              url: urlBase + "/Schools/:id/chats",
              method: "GET",
            },

            // INTERNAL. Use School.chats.create() instead.
            "::create::School::chats": {
              url: urlBase + "/Schools/:id/chats",
              method: "POST",
            },

            // INTERNAL. Use School.chats.createMany() instead.
            "::createMany::School::chats": {
              isArray: true,
              url: urlBase + "/Schools/:id/chats",
              method: "POST",
            },

            // INTERNAL. Use School.chats.destroyAll() instead.
            "::delete::School::chats": {
              url: urlBase + "/Schools/:id/chats",
              method: "DELETE",
            },

            // INTERNAL. Use School.chats.count() instead.
            "::count::School::chats": {
              url: urlBase + "/Schools/:id/chats/count",
              method: "GET",
            },

            // INTERNAL. Use UserMessages.message() instead.
            "::get::UserMessages::message": {
              url: urlBase + "/UserMessages/:id/message",
              method: "GET",
            },

            // INTERNAL. Use Comments.chat() instead.
            "::get::Comments::chat": {
              url: urlBase + "/Comments/:id/chat",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats.findById() instead.
            "::findById::Smsreport::chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/smsreports/:id/chats/:fk",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats.destroyById() instead.
            "::destroyById::Smsreport::chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/smsreports/:id/chats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Smsreport.chats.updateById() instead.
            "::updateById::Smsreport::chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/smsreports/:id/chats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Smsreport.chats() instead.
            "::get::Smsreport::chats": {
              isArray: true,
              url: urlBase + "/smsreports/:id/chats",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats.create() instead.
            "::create::Smsreport::chats": {
              url: urlBase + "/smsreports/:id/chats",
              method: "POST",
            },

            // INTERNAL. Use Smsreport.chats.createMany() instead.
            "::createMany::Smsreport::chats": {
              isArray: true,
              url: urlBase + "/smsreports/:id/chats",
              method: "POST",
            },

            // INTERNAL. Use Smsreport.chats.destroyAll() instead.
            "::delete::Smsreport::chats": {
              url: urlBase + "/smsreports/:id/chats",
              method: "DELETE",
            },

            // INTERNAL. Use Smsreport.chats.count() instead.
            "::count::Smsreport::chats": {
              url: urlBase + "/smsreports/:id/chats/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Chat#upsert
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Chat#updateOrCreate
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Chat#patchOrCreateWithWhere
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Chat#update
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Chat#destroyById
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Chat#removeById
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Chat#updateAttributes
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Chat#modelName
        * @propertyOf lbServices.Chat
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Chat`.
        */
        R.modelName = "Chat";


            /**
             * @ngdoc method
             * @name lbServices.Chat#school
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Chat::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat#userMessages
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Fetches belongsTo relation userMessages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R.userMessages = function() {
          var TargetResource = $injector.get("UserMessages");
          var action = TargetResource["::get::Chat::userMessages"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Chat.comments
     * @header lbServices.Chat.comments
     * @object
     * @description
     *
     * The object `Chat.comments` groups methods
     * manipulating `Comments` instances related to `Chat`.
     *
     * Call {@link lbServices.Chat#comments Chat.comments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Chat#comments
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Queries comments of Chat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R.comments = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::get::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#count
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Counts comments of Chat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::count::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#create
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Creates a new instance in comments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::create::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#createMany
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Creates a new instance in comments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::createMany::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#destroyAll
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Deletes all comments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::delete::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#destroyById
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Delete a related item by id for comments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for comments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::destroyById::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#findById
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Find a related item by id for comments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for comments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::findById::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat.comments#updateById
             * @methodOf lbServices.Chat.comments
             *
             * @description
             *
             * Update a related item by id for comments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `fk` – `{*}` - Foreign key for comments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comments");
          var action = TargetResource["::updateById::Chat::comments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat#sMUser
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Fetches belongsTo relation sMUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.sMUser = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::Chat::sMUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat#sMReciver
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Fetches belongsTo relation sMReciver.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.sMReciver = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::Chat::sMReciver"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chat#smsreports
             * @methodOf lbServices.Chat
             *
             * @description
             *
             * Fetches belongsTo relation smsreports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R.smsreports = function() {
          var TargetResource = $injector.get("Smsreport");
          var action = TargetResource["::get::Chat::smsreports"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserMessages
 * @header lbServices.UserMessages
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserMessages` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserMessages",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/UserMessages/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserMessages.message() instead.
            "prototype$__get__message": {
              url: urlBase + "/UserMessages/:id/message",
              method: "GET",
            },

            // INTERNAL. Use UserMessages.sMUser() instead.
            "prototype$__get__sMUser": {
              url: urlBase + "/UserMessages/:id/sMUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#create
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/UserMessages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#createMany
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/UserMessages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#patchOrCreate
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/UserMessages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#replaceOrCreate
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/UserMessages/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#upsertWithWhere
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/UserMessages/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#exists
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/UserMessages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#findById
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/UserMessages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#replaceById
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/UserMessages/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#find
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/UserMessages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#findOne
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/UserMessages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#updateAll
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/UserMessages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#deleteById
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/UserMessages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#count
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/UserMessages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#prototype$patchAttributes
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserMessages id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/UserMessages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#createChangeStream
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/UserMessages/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Chat.userMessages() instead.
            "::get::Chat::userMessages": {
              url: urlBase + "/Chats/:id/userMessages",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserMessages#upsert
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#updateOrCreate
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#patchOrCreateWithWhere
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#update
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#destroyById
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#removeById
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#updateAttributes
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserMessages id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserMessages` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.UserMessages#modelName
        * @propertyOf lbServices.UserMessages
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserMessages`.
        */
        R.modelName = "UserMessages";


            /**
             * @ngdoc method
             * @name lbServices.UserMessages#message
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Fetches belongsTo relation message.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserMessages id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.message = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::get::UserMessages::message"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserMessages#sMUser
             * @methodOf lbServices.UserMessages
             *
             * @description
             *
             * Fetches belongsTo relation sMUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserMessages id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.sMUser = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::UserMessages::sMUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Comments
 * @header lbServices.Comments
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Comments` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Comments",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Comments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Comments.chat() instead.
            "prototype$__get__chat": {
              url: urlBase + "/Comments/:id/chat",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#create
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Comments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#createMany
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Comments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#patchOrCreate
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Comments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#replaceOrCreate
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Comments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#upsertWithWhere
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Comments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#exists
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Comments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#findById
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Comments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#replaceById
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Comments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#find
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Comments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#findOne
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Comments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#updateAll
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Comments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#deleteById
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Comments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#count
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Comments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#prototype$patchAttributes
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Comments id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Comments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Comments#createChangeStream
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Comments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Chat.comments.findById() instead.
            "::findById::Chat::comments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chats/:id/comments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chat.comments.destroyById() instead.
            "::destroyById::Chat::comments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chats/:id/comments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chat.comments.updateById() instead.
            "::updateById::Chat::comments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chats/:id/comments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chat.comments() instead.
            "::get::Chat::comments": {
              isArray: true,
              url: urlBase + "/Chats/:id/comments",
              method: "GET",
            },

            // INTERNAL. Use Chat.comments.create() instead.
            "::create::Chat::comments": {
              url: urlBase + "/Chats/:id/comments",
              method: "POST",
            },

            // INTERNAL. Use Chat.comments.createMany() instead.
            "::createMany::Chat::comments": {
              isArray: true,
              url: urlBase + "/Chats/:id/comments",
              method: "POST",
            },

            // INTERNAL. Use Chat.comments.destroyAll() instead.
            "::delete::Chat::comments": {
              url: urlBase + "/Chats/:id/comments",
              method: "DELETE",
            },

            // INTERNAL. Use Chat.comments.count() instead.
            "::count::Chat::comments": {
              url: urlBase + "/Chats/:id/comments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Comments#upsert
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Comments#updateOrCreate
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Comments#patchOrCreateWithWhere
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Comments#update
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Comments#destroyById
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Comments#removeById
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Comments#updateAttributes
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Comments id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Comments` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Comments#modelName
        * @propertyOf lbServices.Comments
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Comments`.
        */
        R.modelName = "Comments";


            /**
             * @ngdoc method
             * @name lbServices.Comments#chat
             * @methodOf lbServices.Comments
             *
             * @description
             *
             * Fetches belongsTo relation chat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Comments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chat = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::get::Comments::chat"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SMUser
 * @header lbServices.SMUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SMUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SMUser",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SMUsers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__findById__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SMUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__destroyById__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SMUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__updateById__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SMUsers/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SMUser.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/SMUsers/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__get__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Queries accessTokens of SMUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/SMUsers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__create__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/SMUsers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__delete__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/SMUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$__count__accessTokens
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Counts accessTokens of SMUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/SMUsers/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#create
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SMUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#createMany
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SMUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#patchOrCreate
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/SMUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#replaceOrCreate
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/SMUsers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#upsertWithWhere
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/SMUsers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#exists
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SMUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#findById
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SMUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#replaceById
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/SMUsers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#find
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SMUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#findOne
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SMUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#updateAll
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/SMUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#deleteById
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SMUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#count
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SMUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$patchAttributes
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/SMUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#createChangeStream
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SMUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#login
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/SMUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#logout
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/SMUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#prototype$verify
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/SMUsers/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#confirm
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/SMUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#resetPassword
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/SMUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#changePassword
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/SMUsers/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#setPassword
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/SMUsers/reset-password",
              method: "POST",
            },

            // INTERNAL. Use ExpensePayment.staffs() instead.
            "::get::ExpensePayment::staffs": {
              url: urlBase + "/ExpensePayments/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use Chat.sMUser() instead.
            "::get::Chat::sMUser": {
              url: urlBase + "/Chats/:id/sMUser",
              method: "GET",
            },

            // INTERNAL. Use Chat.sMReciver() instead.
            "::get::Chat::sMReciver": {
              url: urlBase + "/Chats/:id/sMReciver",
              method: "GET",
            },

            // INTERNAL. Use UserMessages.sMUser() instead.
            "::get::UserMessages::sMUser": {
              url: urlBase + "/UserMessages/:id/sMUser",
              method: "GET",
            },

            // INTERNAL. Use Leave.sMUser() instead.
            "::get::Leave::sMUser": {
              url: urlBase + "/Leaves/:id/sMUser",
              method: "GET",
            },

            // INTERNAL. Use Leave.submitter() instead.
            "::get::Leave::submitter": {
              url: urlBase + "/Leaves/:id/submitter",
              method: "GET",
            },

            // INTERNAL. Use LeaveApproval.sMUser() instead.
            "::get::LeaveApproval::sMUser": {
              url: urlBase + "/LeaveApprovals/:id/sMUser",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.smsUser() instead.
            "::get::Smsreport::smsUser": {
              url: urlBase + "/smsreports/:id/smsUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SMUser#getCurrent
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/SMUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SMUser#upsert
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.SMUser#updateOrCreate
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.SMUser#patchOrCreateWithWhere
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.SMUser#update
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SMUser#destroyById
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SMUser#removeById
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SMUser#updateAttributes
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.SMUser#getCachedCurrent
         * @methodOf lbServices.SMUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.SMUser#login} or
         * {@link lbServices.SMUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A SMUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.SMUser#isAuthenticated
         * @methodOf lbServices.SMUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.SMUser#getCurrentId
         * @methodOf lbServices.SMUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.SMUser#modelName
        * @propertyOf lbServices.SMUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SMUser`.
        */
        R.modelName = "SMUser";


            /**
             * @ngdoc method
             * @name lbServices.SMUser#school
             * @methodOf lbServices.SMUser
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SMUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::SMUser::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Resource
 * @header lbServices.Resource
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Resource` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Resource",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Resources/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Resource#create
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Resources",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#createMany
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Resources",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#patchOrCreate
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Resources",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#replaceOrCreate
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Resources/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#upsertWithWhere
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Resources/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#exists
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Resources/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#findById
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Resources/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#replaceById
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Resources/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#find
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Resources",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#findOne
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Resources/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#updateAll
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Resources/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#deleteById
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Resources/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#count
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Resources/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#prototype$patchAttributes
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Resource id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Resources/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Resource#createChangeStream
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Resources/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Resource#upsert
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Resource#updateOrCreate
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Resource#patchOrCreateWithWhere
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Resource#update
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Resource#destroyById
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Resource#removeById
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Resource#updateAttributes
             * @methodOf lbServices.Resource
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Resource id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Resource` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Resource#modelName
        * @propertyOf lbServices.Resource
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Resource`.
        */
        R.modelName = "Resource";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Leave
 * @header lbServices.Leave
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Leave` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Leave",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Leaves/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Leave.sMUser() instead.
            "prototype$__get__sMUser": {
              url: urlBase + "/Leaves/:id/sMUser",
              method: "GET",
            },

            // INTERNAL. Use Leave.submitter() instead.
            "prototype$__get__submitter": {
              url: urlBase + "/Leaves/:id/submitter",
              method: "GET",
            },

            // INTERNAL. Use Leave.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Leaves/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Leave.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Leaves/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Leave.leaveApproval() instead.
            "prototype$__get__leaveApproval": {
              url: urlBase + "/Leaves/:id/leaveApproval",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#create
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Leaves",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#createMany
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Leaves",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#patchOrCreate
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Leaves",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#replaceOrCreate
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Leaves/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#upsertWithWhere
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Leaves/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#exists
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Leaves/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#findById
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Leaves/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#replaceById
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Leaves/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#find
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Leaves",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#findOne
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Leaves/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#updateAll
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Leaves/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#deleteById
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Leaves/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#count
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Leaves/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#prototype$patchAttributes
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Leaves/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Leave#createChangeStream
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Leaves/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.leaves.findById() instead.
            "::findById::School::leaves": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/leaves/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.leaves.destroyById() instead.
            "::destroyById::School::leaves": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/leaves/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.leaves.updateById() instead.
            "::updateById::School::leaves": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/leaves/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.leaves() instead.
            "::get::School::leaves": {
              isArray: true,
              url: urlBase + "/Schools/:id/leaves",
              method: "GET",
            },

            // INTERNAL. Use School.leaves.create() instead.
            "::create::School::leaves": {
              url: urlBase + "/Schools/:id/leaves",
              method: "POST",
            },

            // INTERNAL. Use School.leaves.createMany() instead.
            "::createMany::School::leaves": {
              isArray: true,
              url: urlBase + "/Schools/:id/leaves",
              method: "POST",
            },

            // INTERNAL. Use School.leaves.destroyAll() instead.
            "::delete::School::leaves": {
              url: urlBase + "/Schools/:id/leaves",
              method: "DELETE",
            },

            // INTERNAL. Use School.leaves.count() instead.
            "::count::School::leaves": {
              url: urlBase + "/Schools/:id/leaves/count",
              method: "GET",
            },

            // INTERNAL. Use LeaveApproval.leave() instead.
            "::get::LeaveApproval::leave": {
              url: urlBase + "/LeaveApprovals/:id/leave",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Leave#upsert
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Leave#updateOrCreate
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Leave#patchOrCreateWithWhere
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Leave#update
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Leave#destroyById
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Leave#removeById
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Leave#updateAttributes
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Leave#modelName
        * @propertyOf lbServices.Leave
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Leave`.
        */
        R.modelName = "Leave";


            /**
             * @ngdoc method
             * @name lbServices.Leave#sMUser
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Fetches belongsTo relation sMUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.sMUser = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::Leave::sMUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Leave#submitter
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Fetches belongsTo relation submitter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.submitter = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::Leave::submitter"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Leave#class
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Leave::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Leave#school
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Leave::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Leave#leaveApproval
             * @methodOf lbServices.Leave
             *
             * @description
             *
             * Fetches belongsTo relation leaveApproval.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Leave id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R.leaveApproval = function() {
          var TargetResource = $injector.get("LeaveApproval");
          var action = TargetResource["::get::Leave::leaveApproval"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LeaveApproval
 * @header lbServices.LeaveApproval
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LeaveApproval` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LeaveApproval",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/LeaveApprovals/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LeaveApproval.leave() instead.
            "prototype$__get__leave": {
              url: urlBase + "/LeaveApprovals/:id/leave",
              method: "GET",
            },

            // INTERNAL. Use LeaveApproval.sMUser() instead.
            "prototype$__get__sMUser": {
              url: urlBase + "/LeaveApprovals/:id/sMUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#create
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LeaveApprovals",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#createMany
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LeaveApprovals",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#patchOrCreate
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/LeaveApprovals",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#replaceOrCreate
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/LeaveApprovals/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#upsertWithWhere
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/LeaveApprovals/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#exists
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LeaveApprovals/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#findById
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LeaveApprovals/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#replaceById
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/LeaveApprovals/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#find
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LeaveApprovals",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#findOne
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LeaveApprovals/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#updateAll
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/LeaveApprovals/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#deleteById
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LeaveApprovals/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#count
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LeaveApprovals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#prototype$patchAttributes
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LeaveApproval id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/LeaveApprovals/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#createChangeStream
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LeaveApprovals/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Leave.leaveApproval() instead.
            "::get::Leave::leaveApproval": {
              url: urlBase + "/Leaves/:id/leaveApproval",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#upsert
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#updateOrCreate
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#patchOrCreateWithWhere
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#update
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#destroyById
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#removeById
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#updateAttributes
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LeaveApproval id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LeaveApproval` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.LeaveApproval#modelName
        * @propertyOf lbServices.LeaveApproval
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LeaveApproval`.
        */
        R.modelName = "LeaveApproval";


            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#leave
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Fetches belongsTo relation leave.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LeaveApproval id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Leave` object.)
             * </em>
             */
        R.leave = function() {
          var TargetResource = $injector.get("Leave");
          var action = TargetResource["::get::LeaveApproval::leave"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LeaveApproval#sMUser
             * @methodOf lbServices.LeaveApproval
             *
             * @description
             *
             * Fetches belongsTo relation sMUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LeaveApproval id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.sMUser = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::LeaveApproval::sMUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Media
 * @header lbServices.Media
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Media` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Media",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Media/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Media.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Media/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#create
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Media",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#createMany
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Media",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#patchOrCreate
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Media",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#replaceOrCreate
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Media/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#upsertWithWhere
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Media/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#exists
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Media/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#findById
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Media/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#replaceById
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Media/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#find
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Media",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#findOne
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Media/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#updateAll
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Media/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#deleteById
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Media/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#count
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Media/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#prototype$patchAttributes
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Media id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Media/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Media#createChangeStream
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Media/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.media.findById() instead.
            "::findById::School::media": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/media/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.media.destroyById() instead.
            "::destroyById::School::media": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/media/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.media.updateById() instead.
            "::updateById::School::media": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/media/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.media() instead.
            "::get::School::media": {
              isArray: true,
              url: urlBase + "/Schools/:id/media",
              method: "GET",
            },

            // INTERNAL. Use School.media.create() instead.
            "::create::School::media": {
              url: urlBase + "/Schools/:id/media",
              method: "POST",
            },

            // INTERNAL. Use School.media.createMany() instead.
            "::createMany::School::media": {
              isArray: true,
              url: urlBase + "/Schools/:id/media",
              method: "POST",
            },

            // INTERNAL. Use School.media.destroyAll() instead.
            "::delete::School::media": {
              url: urlBase + "/Schools/:id/media",
              method: "DELETE",
            },

            // INTERNAL. Use School.media.count() instead.
            "::count::School::media": {
              url: urlBase + "/Schools/:id/media/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Media#upsert
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Media#updateOrCreate
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Media#patchOrCreateWithWhere
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Media#update
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Media#destroyById
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Media#removeById
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Media#updateAttributes
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Media id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Media` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Media#modelName
        * @propertyOf lbServices.Media
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Media`.
        */
        R.modelName = "Media";


            /**
             * @ngdoc method
             * @name lbServices.Media#school
             * @methodOf lbServices.Media
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Media id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Media::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StudentFees
 * @header lbServices.StudentFees
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StudentFees` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StudentFees",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/studentFees/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use StudentFees.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/studentFees/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#create
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/studentFees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#createMany
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/studentFees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#patchOrCreate
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/studentFees",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#replaceOrCreate
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/studentFees/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#upsertWithWhere
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/studentFees/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#exists
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/studentFees/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#findById
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/studentFees/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#replaceById
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/studentFees/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#find
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/studentFees",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#findOne
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/studentFees/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#updateAll
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/studentFees/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#deleteById
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/studentFees/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#count
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/studentFees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#prototype$patchAttributes
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentFees id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/studentFees/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#createChangeStream
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/studentFees/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.studentFees.findById() instead.
            "::findById::Student::studentFees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentFees/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentFees.destroyById() instead.
            "::destroyById::Student::studentFees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentFees/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentFees.updateById() instead.
            "::updateById::Student::studentFees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentFees/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentFees() instead.
            "::get::Student::studentFees": {
              isArray: true,
              url: urlBase + "/Students/:id/studentFees",
              method: "GET",
            },

            // INTERNAL. Use Student.studentFees.create() instead.
            "::create::Student::studentFees": {
              url: urlBase + "/Students/:id/studentFees",
              method: "POST",
            },

            // INTERNAL. Use Student.studentFees.createMany() instead.
            "::createMany::Student::studentFees": {
              isArray: true,
              url: urlBase + "/Students/:id/studentFees",
              method: "POST",
            },

            // INTERNAL. Use Student.studentFees.destroyAll() instead.
            "::delete::Student::studentFees": {
              url: urlBase + "/Students/:id/studentFees",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentFees.count() instead.
            "::count::Student::studentFees": {
              url: urlBase + "/Students/:id/studentFees/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StudentFees#upsert
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#updateOrCreate
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#patchOrCreateWithWhere
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#update
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#destroyById
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#removeById
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentFees#updateAttributes
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentFees id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentFees` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.StudentFees#modelName
        * @propertyOf lbServices.StudentFees
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StudentFees`.
        */
        R.modelName = "StudentFees";


            /**
             * @ngdoc method
             * @name lbServices.StudentFees#student
             * @methodOf lbServices.StudentFees
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentFees id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::StudentFees::student"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LessonPlanner
 * @header lbServices.LessonPlanner
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LessonPlanner` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LessonPlanner",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/LessonPlanners/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LessonPlanner.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/LessonPlanners/:id/school",
              method: "GET",
            },

            // INTERNAL. Use LessonPlanner.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/LessonPlanners/:id/class",
              method: "GET",
            },

            // INTERNAL. Use LessonPlanner.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/LessonPlanners/:id/subject",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#create
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LessonPlanners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#createMany
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LessonPlanners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#patchOrCreate
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/LessonPlanners",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#replaceOrCreate
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/LessonPlanners/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#upsertWithWhere
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/LessonPlanners/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#exists
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LessonPlanners/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#findById
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LessonPlanners/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#replaceById
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/LessonPlanners/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#find
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LessonPlanners",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#findOne
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LessonPlanners/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#updateAll
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/LessonPlanners/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#deleteById
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LessonPlanners/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#count
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LessonPlanners/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#prototype$patchAttributes
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonPlanner id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/LessonPlanners/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#createChangeStream
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LessonPlanners/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.lessonPlanners.findById() instead.
            "::findById::School::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/lessonPlanners/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.lessonPlanners.destroyById() instead.
            "::destroyById::School::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/lessonPlanners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.lessonPlanners.updateById() instead.
            "::updateById::School::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/lessonPlanners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.lessonPlanners() instead.
            "::get::School::lessonPlanners": {
              isArray: true,
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "GET",
            },

            // INTERNAL. Use School.lessonPlanners.create() instead.
            "::create::School::lessonPlanners": {
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use School.lessonPlanners.createMany() instead.
            "::createMany::School::lessonPlanners": {
              isArray: true,
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use School.lessonPlanners.destroyAll() instead.
            "::delete::School::lessonPlanners": {
              url: urlBase + "/Schools/:id/lessonPlanners",
              method: "DELETE",
            },

            // INTERNAL. Use School.lessonPlanners.count() instead.
            "::count::School::lessonPlanners": {
              url: urlBase + "/Schools/:id/lessonPlanners/count",
              method: "GET",
            },

            // INTERNAL. Use Class.lessonPlanners.findById() instead.
            "::findById::Class::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/lessonPlanners/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.lessonPlanners.destroyById() instead.
            "::destroyById::Class::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/lessonPlanners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.lessonPlanners.updateById() instead.
            "::updateById::Class::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/lessonPlanners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.lessonPlanners() instead.
            "::get::Class::lessonPlanners": {
              isArray: true,
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "GET",
            },

            // INTERNAL. Use Class.lessonPlanners.create() instead.
            "::create::Class::lessonPlanners": {
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use Class.lessonPlanners.createMany() instead.
            "::createMany::Class::lessonPlanners": {
              isArray: true,
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use Class.lessonPlanners.destroyAll() instead.
            "::delete::Class::lessonPlanners": {
              url: urlBase + "/Classes/:id/lessonPlanners",
              method: "DELETE",
            },

            // INTERNAL. Use Class.lessonPlanners.count() instead.
            "::count::Class::lessonPlanners": {
              url: urlBase + "/Classes/:id/lessonPlanners/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.lessonPlanners.findById() instead.
            "::findById::Subject::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/lessonPlanners/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.lessonPlanners.destroyById() instead.
            "::destroyById::Subject::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/lessonPlanners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.lessonPlanners.updateById() instead.
            "::updateById::Subject::lessonPlanners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/lessonPlanners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.lessonPlanners() instead.
            "::get::Subject::lessonPlanners": {
              isArray: true,
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "GET",
            },

            // INTERNAL. Use Subject.lessonPlanners.create() instead.
            "::create::Subject::lessonPlanners": {
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use Subject.lessonPlanners.createMany() instead.
            "::createMany::Subject::lessonPlanners": {
              isArray: true,
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "POST",
            },

            // INTERNAL. Use Subject.lessonPlanners.destroyAll() instead.
            "::delete::Subject::lessonPlanners": {
              url: urlBase + "/Subjects/:id/lessonPlanners",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.lessonPlanners.count() instead.
            "::count::Subject::lessonPlanners": {
              url: urlBase + "/Subjects/:id/lessonPlanners/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#upsert
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#updateOrCreate
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#patchOrCreateWithWhere
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#update
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#destroyById
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#removeById
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#updateAttributes
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonPlanner id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonPlanner` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.LessonPlanner#modelName
        * @propertyOf lbServices.LessonPlanner
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LessonPlanner`.
        */
        R.modelName = "LessonPlanner";


            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#school
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonPlanner id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::LessonPlanner::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#class
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonPlanner id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::LessonPlanner::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LessonPlanner#subject
             * @methodOf lbServices.LessonPlanner
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonPlanner id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::LessonPlanner::subject"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Enquiry
 * @header lbServices.Enquiry
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Enquiry` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Enquiry",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Enquiries/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Enquiry.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Enquiries/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Enquiries/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Enquiries/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Enquiry.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/Enquiries/:id/staff",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#create
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Enquiries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#createMany
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Enquiries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#patchOrCreate
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Enquiries",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#replaceOrCreate
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Enquiries/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#upsertWithWhere
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Enquiries/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#exists
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Enquiries/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#findById
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Enquiries/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#replaceById
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Enquiries/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#find
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Enquiries",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#findOne
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Enquiries/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#updateAll
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Enquiries/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#deleteById
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Enquiries/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#count
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Enquiries/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#prototype$patchAttributes
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Enquiry id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Enquiries/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#createChangeStream
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Enquiries/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.enquiry.findById() instead.
            "::findById::Student::enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/enquiry/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.enquiry.destroyById() instead.
            "::destroyById::Student::enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/enquiry/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.enquiry.updateById() instead.
            "::updateById::Student::enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/enquiry/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.enquiry() instead.
            "::get::Student::enquiry": {
              isArray: true,
              url: urlBase + "/Students/:id/enquiry",
              method: "GET",
            },

            // INTERNAL. Use Student.enquiry.create() instead.
            "::create::Student::enquiry": {
              url: urlBase + "/Students/:id/enquiry",
              method: "POST",
            },

            // INTERNAL. Use Student.enquiry.createMany() instead.
            "::createMany::Student::enquiry": {
              isArray: true,
              url: urlBase + "/Students/:id/enquiry",
              method: "POST",
            },

            // INTERNAL. Use Student.enquiry.destroyAll() instead.
            "::delete::Student::enquiry": {
              url: urlBase + "/Students/:id/enquiry",
              method: "DELETE",
            },

            // INTERNAL. Use Student.enquiry.count() instead.
            "::count::Student::enquiry": {
              url: urlBase + "/Students/:id/enquiry/count",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries.findById() instead.
            "::findById::Staff::enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/enquiries/:fk",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries.destroyById() instead.
            "::destroyById::Staff::enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/enquiries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.enquiries.updateById() instead.
            "::updateById::Staff::enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/enquiries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Staff.enquiries() instead.
            "::get::Staff::enquiries": {
              isArray: true,
              url: urlBase + "/Staffs/:id/enquiries",
              method: "GET",
            },

            // INTERNAL. Use Staff.enquiries.create() instead.
            "::create::Staff::enquiries": {
              url: urlBase + "/Staffs/:id/enquiries",
              method: "POST",
            },

            // INTERNAL. Use Staff.enquiries.createMany() instead.
            "::createMany::Staff::enquiries": {
              isArray: true,
              url: urlBase + "/Staffs/:id/enquiries",
              method: "POST",
            },

            // INTERNAL. Use Staff.enquiries.destroyAll() instead.
            "::delete::Staff::enquiries": {
              url: urlBase + "/Staffs/:id/enquiries",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.enquiries.count() instead.
            "::count::Staff::enquiries": {
              url: urlBase + "/Staffs/:id/enquiries/count",
              method: "GET",
            },

            // INTERNAL. Use School.enquiries.findById() instead.
            "::findById::School::enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/enquiries/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.enquiries.destroyById() instead.
            "::destroyById::School::enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/enquiries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.enquiries.updateById() instead.
            "::updateById::School::enquiries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/enquiries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.enquiries() instead.
            "::get::School::enquiries": {
              isArray: true,
              url: urlBase + "/Schools/:id/enquiries",
              method: "GET",
            },

            // INTERNAL. Use School.enquiries.create() instead.
            "::create::School::enquiries": {
              url: urlBase + "/Schools/:id/enquiries",
              method: "POST",
            },

            // INTERNAL. Use School.enquiries.createMany() instead.
            "::createMany::School::enquiries": {
              isArray: true,
              url: urlBase + "/Schools/:id/enquiries",
              method: "POST",
            },

            // INTERNAL. Use School.enquiries.destroyAll() instead.
            "::delete::School::enquiries": {
              url: urlBase + "/Schools/:id/enquiries",
              method: "DELETE",
            },

            // INTERNAL. Use School.enquiries.count() instead.
            "::count::School::enquiries": {
              url: urlBase + "/Schools/:id/enquiries/count",
              method: "GET",
            },

            // INTERNAL. Use Class.enquiry.findById() instead.
            "::findById::Class::enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/enquiry/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.enquiry.destroyById() instead.
            "::destroyById::Class::enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/enquiry/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.enquiry.updateById() instead.
            "::updateById::Class::enquiry": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/enquiry/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.enquiry() instead.
            "::get::Class::enquiry": {
              isArray: true,
              url: urlBase + "/Classes/:id/enquiry",
              method: "GET",
            },

            // INTERNAL. Use Class.enquiry.create() instead.
            "::create::Class::enquiry": {
              url: urlBase + "/Classes/:id/enquiry",
              method: "POST",
            },

            // INTERNAL. Use Class.enquiry.createMany() instead.
            "::createMany::Class::enquiry": {
              isArray: true,
              url: urlBase + "/Classes/:id/enquiry",
              method: "POST",
            },

            // INTERNAL. Use Class.enquiry.destroyAll() instead.
            "::delete::Class::enquiry": {
              url: urlBase + "/Classes/:id/enquiry",
              method: "DELETE",
            },

            // INTERNAL. Use Class.enquiry.count() instead.
            "::count::Class::enquiry": {
              url: urlBase + "/Classes/:id/enquiry/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Enquiry#upsert
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#updateOrCreate
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#patchOrCreateWithWhere
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#update
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#destroyById
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#removeById
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#updateAttributes
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Enquiry id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Enquiry` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Enquiry#modelName
        * @propertyOf lbServices.Enquiry
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Enquiry`.
        */
        R.modelName = "Enquiry";


            /**
             * @ngdoc method
             * @name lbServices.Enquiry#school
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Enquiry id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Enquiry::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#class
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Enquiry id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Enquiry::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#student
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Enquiry id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Enquiry::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Enquiry#staff
             * @methodOf lbServices.Enquiry
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Enquiry id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Enquiry::staff"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Atten
 * @header lbServices.Atten
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Atten` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Atten",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Attens/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Atten#create
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Attens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#createMany
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Attens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#patchOrCreate
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Attens",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#replaceOrCreate
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Attens/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#upsertWithWhere
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Attens/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#exists
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Attens/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#findById
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Attens/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#replaceById
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Attens/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#find
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Attens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#findOne
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Attens/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#updateAll
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Attens/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#deleteById
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Attens/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#count
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Attens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#prototype$patchAttributes
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Atten id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Attens/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#createChangeStream
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Attens/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Atten#addUser
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `profileId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `id` – `{string=}` -
             */
            "addUser": {
              url: urlBase + "/Attens/addUser",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Atten#upsert
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Atten#updateOrCreate
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Atten#patchOrCreateWithWhere
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Atten#update
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Atten#destroyById
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Atten#removeById
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Atten#updateAttributes
             * @methodOf lbServices.Atten
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Atten id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Atten` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Atten#modelName
        * @propertyOf lbServices.Atten
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Atten`.
        */
        R.modelName = "Atten";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StudyUser
 * @header lbServices.StudyUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StudyUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StudyUser",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/StudyUsers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__findById__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StudyUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__destroyById__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StudyUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__updateById__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StudyUsers/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__get__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Queries accessTokens of StudyUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/StudyUsers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__create__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/StudyUsers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__delete__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/StudyUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$__count__accessTokens
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Counts accessTokens of StudyUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/StudyUsers/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#create
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/StudyUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#createMany
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/StudyUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#patchOrCreate
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/StudyUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#replaceOrCreate
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/StudyUsers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#upsertWithWhere
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/StudyUsers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#exists
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/StudyUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#findById
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/StudyUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#replaceById
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/StudyUsers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#find
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/StudyUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#findOne
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/StudyUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#updateAll
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/StudyUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#deleteById
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/StudyUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#count
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/StudyUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$patchAttributes
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/StudyUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#createChangeStream
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/StudyUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#login
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/StudyUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#logout
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/StudyUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#prototype$verify
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/StudyUsers/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#confirm
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/StudyUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#resetPassword
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/StudyUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#changePassword
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/StudyUsers/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#setPassword
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/StudyUsers/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#loginWithMob
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Enter mobile no and password to login
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `response` – `{object=}` -
             */
            "loginWithMob": {
              url: urlBase + "/StudyUsers/loginWithMob",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#getCurrent
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/StudyUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StudyUser#upsert
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#updateOrCreate
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#patchOrCreateWithWhere
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#update
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#destroyById
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#removeById
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudyUser#updateAttributes
             * @methodOf lbServices.StudyUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - StudyUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudyUser` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.StudyUser#getCachedCurrent
         * @methodOf lbServices.StudyUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.StudyUser#login} or
         * {@link lbServices.StudyUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A StudyUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.StudyUser#isAuthenticated
         * @methodOf lbServices.StudyUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.StudyUser#getCurrentId
         * @methodOf lbServices.StudyUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.StudyUser#modelName
        * @propertyOf lbServices.StudyUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StudyUser`.
        */
        R.modelName = "StudyUser";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FOsubject
 * @header lbServices.FOsubject
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FOsubject` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FOsubject",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FOsubjects/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FOsubject.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/FOsubjects/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/FOsubjects/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/FOsubjects/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.fOmarks.findById() instead.
            "prototype$__findById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOsubjects/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.fOmarks.destroyById() instead.
            "prototype$__destroyById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOsubjects/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FOsubject.fOmarks.updateById() instead.
            "prototype$__updateById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOsubjects/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FOsubject.fOmarks() instead.
            "prototype$__get__fOmarks": {
              isArray: true,
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.fOmarks.create() instead.
            "prototype$__create__fOmarks": {
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use FOsubject.fOmarks.destroyAll() instead.
            "prototype$__delete__fOmarks": {
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use FOsubject.fOmarks.count() instead.
            "prototype$__count__fOmarks": {
              url: urlBase + "/FOsubjects/:id/fOmarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#create
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FOsubjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#createMany
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FOsubjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#patchOrCreate
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FOsubjects",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#replaceOrCreate
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FOsubjects/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#upsertWithWhere
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FOsubjects/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#exists
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FOsubjects/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#findById
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FOsubjects/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#replaceById
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FOsubjects/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#find
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FOsubjects",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#findOne
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FOsubjects/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#updateAll
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FOsubjects/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#deleteById
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FOsubjects/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#count
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FOsubjects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#prototype$patchAttributes
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FOsubjects/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#createChangeStream
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FOsubjects/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.fOsubjects.findById() instead.
            "::findById::School::fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOsubjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.fOsubjects.destroyById() instead.
            "::destroyById::School::fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOsubjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOsubjects.updateById() instead.
            "::updateById::School::fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOsubjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.fOsubjects() instead.
            "::get::School::fOsubjects": {
              isArray: true,
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "GET",
            },

            // INTERNAL. Use School.fOsubjects.create() instead.
            "::create::School::fOsubjects": {
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "POST",
            },

            // INTERNAL. Use School.fOsubjects.createMany() instead.
            "::createMany::School::fOsubjects": {
              isArray: true,
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "POST",
            },

            // INTERNAL. Use School.fOsubjects.destroyAll() instead.
            "::delete::School::fOsubjects": {
              url: urlBase + "/Schools/:id/fOsubjects",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOsubjects.count() instead.
            "::count::School::fOsubjects": {
              url: urlBase + "/Schools/:id/fOsubjects/count",
              method: "GET",
            },

            // INTERNAL. Use Class.fOsubjects.findById() instead.
            "::findById::Class::fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOsubjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.fOsubjects.destroyById() instead.
            "::destroyById::Class::fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOsubjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOsubjects.updateById() instead.
            "::updateById::Class::fOsubjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOsubjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.fOsubjects() instead.
            "::get::Class::fOsubjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "GET",
            },

            // INTERNAL. Use Class.fOsubjects.create() instead.
            "::create::Class::fOsubjects": {
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "POST",
            },

            // INTERNAL. Use Class.fOsubjects.createMany() instead.
            "::createMany::Class::fOsubjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "POST",
            },

            // INTERNAL. Use Class.fOsubjects.destroyAll() instead.
            "::delete::Class::fOsubjects": {
              url: urlBase + "/Classes/:id/fOsubjects",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOsubjects.count() instead.
            "::count::Class::fOsubjects": {
              url: urlBase + "/Classes/:id/fOsubjects/count",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.fOsubject() instead.
            "::get::FOmarks::fOsubject": {
              url: urlBase + "/FOmarks/:id/fOsubject",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FOsubject#upsert
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#updateOrCreate
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#patchOrCreateWithWhere
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#update
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#destroyById
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#removeById
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#updateAttributes
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FOsubject#modelName
        * @propertyOf lbServices.FOsubject
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FOsubject`.
        */
        R.modelName = "FOsubject";


            /**
             * @ngdoc method
             * @name lbServices.FOsubject#school
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::FOsubject::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#class
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::FOsubject::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject#staff
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::FOsubject::staff"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FOsubject.fOmarks
     * @header lbServices.FOsubject.fOmarks
     * @object
     * @description
     *
     * The object `FOsubject.fOmarks` groups methods
     * manipulating `FOmarks` instances related to `FOsubject`.
     *
     * Call {@link lbServices.FOsubject#fOmarks FOsubject.fOmarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FOsubject#fOmarks
             * @methodOf lbServices.FOsubject
             *
             * @description
             *
             * Queries fOmarks of FOsubject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::get::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#count
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Counts fOmarks of FOsubject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOmarks.count = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::count::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#create
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.create = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::create::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#createMany
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.createMany = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::createMany::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#destroyAll
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Deletes all fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyAll = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::delete::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#destroyById
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Delete a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::destroyById::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#findById
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Find a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.findById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::findById::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOsubject.fOmarks#updateById
             * @methodOf lbServices.FOsubject.fOmarks
             *
             * @description
             *
             * Update a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOsubject id
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.updateById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::updateById::FOsubject::fOmarks"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FOexam
 * @header lbServices.FOexam
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FOexam` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FOexam",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FOexams/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FOexam.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/FOexams/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FOexam.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/FOexams/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FOexam.fOmarks.findById() instead.
            "prototype$__findById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOexams/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use FOexam.fOmarks.destroyById() instead.
            "prototype$__destroyById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOexams/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FOexam.fOmarks.updateById() instead.
            "prototype$__updateById__fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOexams/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FOexam.fOmarks() instead.
            "prototype$__get__fOmarks": {
              isArray: true,
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use FOexam.fOmarks.create() instead.
            "prototype$__create__fOmarks": {
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use FOexam.fOmarks.destroyAll() instead.
            "prototype$__delete__fOmarks": {
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use FOexam.fOmarks.count() instead.
            "prototype$__count__fOmarks": {
              url: urlBase + "/FOexams/:id/fOmarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#create
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FOexams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#createMany
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FOexams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#patchOrCreate
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FOexams",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#replaceOrCreate
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FOexams/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#upsertWithWhere
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FOexams/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#exists
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FOexams/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#findById
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FOexams/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#replaceById
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FOexams/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#find
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FOexams",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#findOne
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FOexams/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#updateAll
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FOexams/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#deleteById
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FOexams/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#count
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FOexams/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#prototype$patchAttributes
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FOexams/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOexam#createChangeStream
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FOexams/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.fOexams.findById() instead.
            "::findById::School::fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOexams/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.fOexams.destroyById() instead.
            "::destroyById::School::fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOexams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOexams.updateById() instead.
            "::updateById::School::fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/fOexams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.fOexams() instead.
            "::get::School::fOexams": {
              isArray: true,
              url: urlBase + "/Schools/:id/fOexams",
              method: "GET",
            },

            // INTERNAL. Use School.fOexams.create() instead.
            "::create::School::fOexams": {
              url: urlBase + "/Schools/:id/fOexams",
              method: "POST",
            },

            // INTERNAL. Use School.fOexams.createMany() instead.
            "::createMany::School::fOexams": {
              isArray: true,
              url: urlBase + "/Schools/:id/fOexams",
              method: "POST",
            },

            // INTERNAL. Use School.fOexams.destroyAll() instead.
            "::delete::School::fOexams": {
              url: urlBase + "/Schools/:id/fOexams",
              method: "DELETE",
            },

            // INTERNAL. Use School.fOexams.count() instead.
            "::count::School::fOexams": {
              url: urlBase + "/Schools/:id/fOexams/count",
              method: "GET",
            },

            // INTERNAL. Use Class.fOexams.findById() instead.
            "::findById::Class::fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOexams/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.fOexams.destroyById() instead.
            "::destroyById::Class::fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOexams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOexams.updateById() instead.
            "::updateById::Class::fOexams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOexams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.fOexams() instead.
            "::get::Class::fOexams": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOexams",
              method: "GET",
            },

            // INTERNAL. Use Class.fOexams.create() instead.
            "::create::Class::fOexams": {
              url: urlBase + "/Classes/:id/fOexams",
              method: "POST",
            },

            // INTERNAL. Use Class.fOexams.createMany() instead.
            "::createMany::Class::fOexams": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOexams",
              method: "POST",
            },

            // INTERNAL. Use Class.fOexams.destroyAll() instead.
            "::delete::Class::fOexams": {
              url: urlBase + "/Classes/:id/fOexams",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOexams.count() instead.
            "::count::Class::fOexams": {
              url: urlBase + "/Classes/:id/fOexams/count",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.fOexam() instead.
            "::get::FOmarks::fOexam": {
              url: urlBase + "/FOmarks/:id/fOexam",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FOexam#upsert
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FOexam#updateOrCreate
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FOexam#patchOrCreateWithWhere
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FOexam#update
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FOexam#destroyById
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FOexam#removeById
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FOexam#updateAttributes
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FOexam#modelName
        * @propertyOf lbServices.FOexam
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FOexam`.
        */
        R.modelName = "FOexam";


            /**
             * @ngdoc method
             * @name lbServices.FOexam#class
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::FOexam::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam#school
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::FOexam::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FOexam.fOmarks
     * @header lbServices.FOexam.fOmarks
     * @object
     * @description
     *
     * The object `FOexam.fOmarks` groups methods
     * manipulating `FOmarks` instances related to `FOexam`.
     *
     * Call {@link lbServices.FOexam#fOmarks FOexam.fOmarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FOexam#fOmarks
             * @methodOf lbServices.FOexam
             *
             * @description
             *
             * Queries fOmarks of FOexam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::get::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#count
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Counts fOmarks of FOexam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fOmarks.count = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::count::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#create
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.create = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::create::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#createMany
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Creates a new instance in fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.createMany = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::createMany::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#destroyAll
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Deletes all fOmarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyAll = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::delete::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#destroyById
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Delete a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fOmarks.destroyById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::destroyById::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#findById
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Find a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.findById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::findById::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOexam.fOmarks#updateById
             * @methodOf lbServices.FOexam.fOmarks
             *
             * @description
             *
             * Update a related item by id for fOmarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOexam id
             *
             *  - `fk` – `{*}` - Foreign key for fOmarks
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R.fOmarks.updateById = function() {
          var TargetResource = $injector.get("FOmarks");
          var action = TargetResource["::updateById::FOexam::fOmarks"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FOmarks
 * @header lbServices.FOmarks
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FOmarks` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FOmarks",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FOmarks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FOmarks.fOexam() instead.
            "prototype$__get__fOexam": {
              url: urlBase + "/FOmarks/:id/fOexam",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/FOmarks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/FOmarks/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FOmarks.fOsubject() instead.
            "prototype$__get__fOsubject": {
              url: urlBase + "/FOmarks/:id/fOsubject",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#create
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FOmarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#createMany
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FOmarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#patchOrCreate
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FOmarks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#replaceOrCreate
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FOmarks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#upsertWithWhere
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FOmarks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#exists
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FOmarks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#findById
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FOmarks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#replaceById
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FOmarks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#find
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FOmarks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#findOne
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FOmarks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#updateAll
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FOmarks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#deleteById
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FOmarks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#count
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FOmarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#prototype$patchAttributes
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOmarks id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FOmarks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#createChangeStream
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FOmarks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.fOmarks.findById() instead.
            "::findById::Student::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.fOmarks.destroyById() instead.
            "::destroyById::Student::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.fOmarks.updateById() instead.
            "::updateById::Student::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.fOmarks() instead.
            "::get::Student::fOmarks": {
              isArray: true,
              url: urlBase + "/Students/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use Student.fOmarks.create() instead.
            "::create::Student::fOmarks": {
              url: urlBase + "/Students/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use Student.fOmarks.createMany() instead.
            "::createMany::Student::fOmarks": {
              isArray: true,
              url: urlBase + "/Students/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use Student.fOmarks.destroyAll() instead.
            "::delete::Student::fOmarks": {
              url: urlBase + "/Students/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.fOmarks.count() instead.
            "::count::Student::fOmarks": {
              url: urlBase + "/Students/:id/fOmarks/count",
              method: "GET",
            },

            // INTERNAL. Use Class.fOmarks.findById() instead.
            "::findById::Class::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.fOmarks.destroyById() instead.
            "::destroyById::Class::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOmarks.updateById() instead.
            "::updateById::Class::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.fOmarks() instead.
            "::get::Class::fOmarks": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use Class.fOmarks.create() instead.
            "::create::Class::fOmarks": {
              url: urlBase + "/Classes/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use Class.fOmarks.createMany() instead.
            "::createMany::Class::fOmarks": {
              isArray: true,
              url: urlBase + "/Classes/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use Class.fOmarks.destroyAll() instead.
            "::delete::Class::fOmarks": {
              url: urlBase + "/Classes/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use Class.fOmarks.count() instead.
            "::count::Class::fOmarks": {
              url: urlBase + "/Classes/:id/fOmarks/count",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.fOmarks.findById() instead.
            "::findById::FOsubject::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOsubjects/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.fOmarks.destroyById() instead.
            "::destroyById::FOsubject::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOsubjects/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FOsubject.fOmarks.updateById() instead.
            "::updateById::FOsubject::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOsubjects/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FOsubject.fOmarks() instead.
            "::get::FOsubject::fOmarks": {
              isArray: true,
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use FOsubject.fOmarks.create() instead.
            "::create::FOsubject::fOmarks": {
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use FOsubject.fOmarks.createMany() instead.
            "::createMany::FOsubject::fOmarks": {
              isArray: true,
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use FOsubject.fOmarks.destroyAll() instead.
            "::delete::FOsubject::fOmarks": {
              url: urlBase + "/FOsubjects/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use FOsubject.fOmarks.count() instead.
            "::count::FOsubject::fOmarks": {
              url: urlBase + "/FOsubjects/:id/fOmarks/count",
              method: "GET",
            },

            // INTERNAL. Use FOexam.fOmarks.findById() instead.
            "::findById::FOexam::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOexams/:id/fOmarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use FOexam.fOmarks.destroyById() instead.
            "::destroyById::FOexam::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOexams/:id/fOmarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FOexam.fOmarks.updateById() instead.
            "::updateById::FOexam::fOmarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FOexams/:id/fOmarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FOexam.fOmarks() instead.
            "::get::FOexam::fOmarks": {
              isArray: true,
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "GET",
            },

            // INTERNAL. Use FOexam.fOmarks.create() instead.
            "::create::FOexam::fOmarks": {
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use FOexam.fOmarks.createMany() instead.
            "::createMany::FOexam::fOmarks": {
              isArray: true,
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "POST",
            },

            // INTERNAL. Use FOexam.fOmarks.destroyAll() instead.
            "::delete::FOexam::fOmarks": {
              url: urlBase + "/FOexams/:id/fOmarks",
              method: "DELETE",
            },

            // INTERNAL. Use FOexam.fOmarks.count() instead.
            "::count::FOexam::fOmarks": {
              url: urlBase + "/FOexams/:id/fOmarks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FOmarks#upsert
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#updateOrCreate
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#patchOrCreateWithWhere
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#update
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#destroyById
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#removeById
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#updateAttributes
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOmarks id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOmarks` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FOmarks#modelName
        * @propertyOf lbServices.FOmarks
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FOmarks`.
        */
        R.modelName = "FOmarks";


            /**
             * @ngdoc method
             * @name lbServices.FOmarks#fOexam
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Fetches belongsTo relation fOexam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOmarks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOexam` object.)
             * </em>
             */
        R.fOexam = function() {
          var TargetResource = $injector.get("FOexam");
          var action = TargetResource["::get::FOmarks::fOexam"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#student
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOmarks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::FOmarks::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#class
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOmarks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::FOmarks::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FOmarks#fOsubject
             * @methodOf lbServices.FOmarks
             *
             * @description
             *
             * Fetches belongsTo relation fOsubject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FOmarks id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FOsubject` object.)
             * </em>
             */
        R.fOsubject = function() {
          var TargetResource = $injector.get("FOsubject");
          var action = TargetResource["::get::FOmarks::fOsubject"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ExamType
 * @header lbServices.ExamType
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ExamType` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ExamType",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ExamTypes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ExamType.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/ExamTypes/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#create
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ExamTypes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#createMany
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ExamTypes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#patchOrCreate
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ExamTypes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#replaceOrCreate
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ExamTypes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#upsertWithWhere
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ExamTypes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#exists
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ExamTypes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#findById
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ExamTypes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#replaceById
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ExamTypes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#find
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ExamTypes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#findOne
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ExamTypes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#updateAll
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ExamTypes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#deleteById
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ExamTypes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#count
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ExamTypes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#prototype$patchAttributes
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExamType id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ExamTypes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExamType#createChangeStream
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ExamTypes/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.examTypes.findById() instead.
            "::findById::School::examTypes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/examTypes/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.examTypes.destroyById() instead.
            "::destroyById::School::examTypes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/examTypes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.examTypes.updateById() instead.
            "::updateById::School::examTypes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/examTypes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.examTypes() instead.
            "::get::School::examTypes": {
              isArray: true,
              url: urlBase + "/Schools/:id/examTypes",
              method: "GET",
            },

            // INTERNAL. Use School.examTypes.create() instead.
            "::create::School::examTypes": {
              url: urlBase + "/Schools/:id/examTypes",
              method: "POST",
            },

            // INTERNAL. Use School.examTypes.createMany() instead.
            "::createMany::School::examTypes": {
              isArray: true,
              url: urlBase + "/Schools/:id/examTypes",
              method: "POST",
            },

            // INTERNAL. Use School.examTypes.destroyAll() instead.
            "::delete::School::examTypes": {
              url: urlBase + "/Schools/:id/examTypes",
              method: "DELETE",
            },

            // INTERNAL. Use School.examTypes.count() instead.
            "::count::School::examTypes": {
              url: urlBase + "/Schools/:id/examTypes/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ExamType#upsert
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ExamType#updateOrCreate
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ExamType#patchOrCreateWithWhere
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ExamType#update
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ExamType#destroyById
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExamType#removeById
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExamType#updateAttributes
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExamType id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExamType` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ExamType#modelName
        * @propertyOf lbServices.ExamType
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ExamType`.
        */
        R.modelName = "ExamType";


            /**
             * @ngdoc method
             * @name lbServices.ExamType#school
             * @methodOf lbServices.ExamType
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ExamType id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::ExamType::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeeCategory
 * @header lbServices.FeeCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeeCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeeCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FeeCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeeCategory.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/FeeCategories/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.feeSetup.findById() instead.
            "prototype$__findById__feeSetup": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeCategories/:id/feeSetup/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.feeSetup.destroyById() instead.
            "prototype$__destroyById__feeSetup": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeCategories/:id/feeSetup/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeCategory.feeSetup.updateById() instead.
            "prototype$__updateById__feeSetup": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeCategories/:id/feeSetup/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeCategory.feeSetup() instead.
            "prototype$__get__feeSetup": {
              isArray: true,
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "GET",
            },

            // INTERNAL. Use FeeCategory.feeSetup.create() instead.
            "prototype$__create__feeSetup": {
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "POST",
            },

            // INTERNAL. Use FeeCategory.feeSetup.destroyAll() instead.
            "prototype$__delete__feeSetup": {
              url: urlBase + "/FeeCategories/:id/feeSetup",
              method: "DELETE",
            },

            // INTERNAL. Use FeeCategory.feeSetup.count() instead.
            "prototype$__count__feeSetup": {
              url: urlBase + "/FeeCategories/:id/feeSetup/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#create
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FeeCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#createMany
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FeeCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#patchOrCreate
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FeeCategories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#replaceOrCreate
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FeeCategories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#upsertWithWhere
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FeeCategories/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#exists
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FeeCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#findById
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FeeCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#replaceById
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FeeCategories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#find
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FeeCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#findOne
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FeeCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#updateAll
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FeeCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#deleteById
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FeeCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#count
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FeeCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#prototype$patchAttributes
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FeeCategories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#createChangeStream
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FeeCategories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.feeCategories.findById() instead.
            "::findById::School::feeCategories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeCategories/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feeCategories.destroyById() instead.
            "::destroyById::School::feeCategories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeCategories/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeCategories.updateById() instead.
            "::updateById::School::feeCategories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeCategories/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feeCategories() instead.
            "::get::School::feeCategories": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeCategories",
              method: "GET",
            },

            // INTERNAL. Use School.feeCategories.create() instead.
            "::create::School::feeCategories": {
              url: urlBase + "/Schools/:id/feeCategories",
              method: "POST",
            },

            // INTERNAL. Use School.feeCategories.createMany() instead.
            "::createMany::School::feeCategories": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeCategories",
              method: "POST",
            },

            // INTERNAL. Use School.feeCategories.destroyAll() instead.
            "::delete::School::feeCategories": {
              url: urlBase + "/Schools/:id/feeCategories",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeCategories.count() instead.
            "::count::School::feeCategories": {
              url: urlBase + "/Schools/:id/feeCategories/count",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeCategories() instead.
            "::get::FeeSetup::feeCategories": {
              url: urlBase + "/FeeSetups/:id/feeCategories",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#upsert
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#updateOrCreate
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#patchOrCreateWithWhere
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#update
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#destroyById
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#removeById
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#updateAttributes
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeCategory` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeeCategory#modelName
        * @propertyOf lbServices.FeeCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeeCategory`.
        */
        R.modelName = "FeeCategory";


            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#school
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::FeeCategory::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FeeCategory.feeSetup
     * @header lbServices.FeeCategory.feeSetup
     * @object
     * @description
     *
     * The object `FeeCategory.feeSetup` groups methods
     * manipulating `FeeSetup` instances related to `FeeCategory`.
     *
     * Call {@link lbServices.FeeCategory#feeSetup FeeCategory.feeSetup()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FeeCategory#feeSetup
             * @methodOf lbServices.FeeCategory
             *
             * @description
             *
             * Queries feeSetup of FeeCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#count
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Counts feeSetup of FeeCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeSetup.count = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::count::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#create
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Creates a new instance in feeSetup of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup.create = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::create::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#createMany
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Creates a new instance in feeSetup of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup.createMany = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::createMany::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#destroyAll
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Deletes all feeSetup of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetup.destroyAll = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::delete::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#destroyById
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Delete a related item by id for feeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeSetup
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetup.destroyById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::destroyById::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#findById
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Find a related item by id for feeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeSetup
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup.findById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::findById::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeCategory.feeSetup#updateById
             * @methodOf lbServices.FeeCategory.feeSetup
             *
             * @description
             *
             * Update a related item by id for feeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeeCategory id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetup
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup.updateById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::updateById::FeeCategory::feeSetup"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Onlinetransactions
 * @header lbServices.Onlinetransactions
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Onlinetransactions` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Onlinetransactions",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/onlinetransactions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Onlinetransactions.School() instead.
            "prototype$__get__School": {
              url: urlBase + "/onlinetransactions/:id/School",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.student.findById() instead.
            "prototype$__findById__student": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/onlinetransactions/:id/student/:fk",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.student.destroyById() instead.
            "prototype$__destroyById__student": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/onlinetransactions/:id/student/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Onlinetransactions.student.updateById() instead.
            "prototype$__updateById__student": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/onlinetransactions/:id/student/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Onlinetransactions.student() instead.
            "prototype$__get__student": {
              isArray: true,
              url: urlBase + "/onlinetransactions/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Onlinetransactions.student.create() instead.
            "prototype$__create__student": {
              url: urlBase + "/onlinetransactions/:id/student",
              method: "POST",
            },

            // INTERNAL. Use Onlinetransactions.student.destroyAll() instead.
            "prototype$__delete__student": {
              url: urlBase + "/onlinetransactions/:id/student",
              method: "DELETE",
            },

            // INTERNAL. Use Onlinetransactions.student.count() instead.
            "prototype$__count__student": {
              url: urlBase + "/onlinetransactions/:id/student/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#create
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/onlinetransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#createMany
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/onlinetransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#patchOrCreate
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/onlinetransactions",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#replaceOrCreate
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/onlinetransactions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#upsertWithWhere
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/onlinetransactions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#exists
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/onlinetransactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#findById
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/onlinetransactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#replaceById
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/onlinetransactions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#find
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/onlinetransactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#findOne
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/onlinetransactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#updateAll
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/onlinetransactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#deleteById
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/onlinetransactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#count
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/onlinetransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#prototype$patchAttributes
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/onlinetransactions/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#createChangeStream
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/onlinetransactions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#genarateTXNlink
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * To creates Temp token to autorize transation
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `paymentlink` – `{string=}` -
             */
            "genarateTXNlink": {
              url: urlBase + "/onlinetransactions/gateway/paynetz",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#completeTXN
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * callback from paymentgateway
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "completeTXN": {
              url: urlBase + "/onlinetransactions/gateway/ctc",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#upsert
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#updateOrCreate
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#patchOrCreateWithWhere
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#update
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#destroyById
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#removeById
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#updateAttributes
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Onlinetransactions` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Onlinetransactions#modelName
        * @propertyOf lbServices.Onlinetransactions
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Onlinetransactions`.
        */
        R.modelName = "Onlinetransactions";


            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#School
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Fetches belongsTo relation School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.School = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Onlinetransactions::School"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Onlinetransactions.student
     * @header lbServices.Onlinetransactions.student
     * @object
     * @description
     *
     * The object `Onlinetransactions.student` groups methods
     * manipulating `Student` instances related to `Onlinetransactions`.
     *
     * Call {@link lbServices.Onlinetransactions#student Onlinetransactions.student()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions#student
             * @methodOf lbServices.Onlinetransactions
             *
             * @description
             *
             * Queries student of onlinetransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#count
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Counts student of onlinetransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.student.count = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::count::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#create
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Creates a new instance in student of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student.create = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::create::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#createMany
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Creates a new instance in student of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student.createMany = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::createMany::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#destroyAll
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Deletes all student of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.student.destroyAll = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::delete::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#destroyById
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Delete a related item by id for student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for student
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.student.destroyById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::destroyById::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#findById
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Find a related item by id for student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for student
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student.findById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::findById::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Onlinetransactions.student#updateById
             * @methodOf lbServices.Onlinetransactions.student
             *
             * @description
             *
             * Update a related item by id for student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - onlinetransactions id
             *
             *  - `fk` – `{*}` - Foreign key for student
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student.updateById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::updateById::Onlinetransactions::student"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Btperms
 * @header lbServices.Btperms
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Btperms` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Btperms",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/btperms/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Btperms.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/btperms/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#create
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/btperms",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#createMany
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/btperms",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#patchOrCreate
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/btperms",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#replaceOrCreate
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/btperms/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#upsertWithWhere
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/btperms/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#exists
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/btperms/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#findById
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/btperms/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#replaceById
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/btperms/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#find
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/btperms",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#findOne
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/btperms/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#updateAll
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/btperms/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#deleteById
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/btperms/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#count
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/btperms/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#prototype$patchAttributes
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - btperms id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/btperms/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Btperms#createChangeStream
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/btperms/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Btperms#upsert
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Btperms#updateOrCreate
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Btperms#patchOrCreateWithWhere
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Btperms#update
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Btperms#destroyById
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Btperms#removeById
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Btperms#updateAttributes
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - btperms id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Btperms` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Btperms#modelName
        * @propertyOf lbServices.Btperms
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Btperms`.
        */
        R.modelName = "Btperms";


            /**
             * @ngdoc method
             * @name lbServices.Btperms#school
             * @methodOf lbServices.Btperms
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - btperms id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Btperms::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Accountant
 * @header lbServices.Accountant
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Accountant` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Accountant",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Accountants/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__findById__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Accountants/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Accountants/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__updateById__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Accountants/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Accountant.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Accountants/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Accountant.managerole() instead.
            "prototype$__get__managerole": {
              url: urlBase + "/Accountants/:id/managerole",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__get__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Queries accessTokens of Accountant.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Accountants/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__create__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Accountants/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__delete__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Accountants/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$__count__accessTokens
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Counts accessTokens of Accountant.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Accountants/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#create
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Accountants",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#createMany
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Accountants",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#patchOrCreate
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Accountants",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#replaceOrCreate
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Accountants/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#upsertWithWhere
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Accountants/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#exists
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Accountants/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#findById
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Accountants/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#replaceById
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Accountants/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#find
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Accountants",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#findOne
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Accountants/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#updateAll
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Accountants/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#deleteById
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Accountants/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#count
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Accountants/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$patchAttributes
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Accountants/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#createChangeStream
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Accountants/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#login
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Accountants/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#logout
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Accountants/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#prototype$verify
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Accountants/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#confirm
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Accountants/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#resetPassword
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Accountants/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#changePassword
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Accountants/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#setPassword
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Accountants/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#AddRoleIdtoallAccountants
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Add Role id to all Accountant
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `status` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `email` – `{string=}` -
             */
            "AddRoleIdtoallAccountants": {
              url: urlBase + "/Accountants/AddRoleIdtoallAccountants",
              method: "GET",
            },

            // INTERNAL. Use Identity.accountants.findById() instead.
            "::findById::Identity::accountants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accountants/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.accountants.destroyById() instead.
            "::destroyById::Identity::accountants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accountants/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.accountants.updateById() instead.
            "::updateById::Identity::accountants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accountants/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.accountants() instead.
            "::get::Identity::accountants": {
              isArray: true,
              url: urlBase + "/Identities/:id/accountants",
              method: "GET",
            },

            // INTERNAL. Use Identity.accountants.create() instead.
            "::create::Identity::accountants": {
              url: urlBase + "/Identities/:id/accountants",
              method: "POST",
            },

            // INTERNAL. Use Identity.accountants.createMany() instead.
            "::createMany::Identity::accountants": {
              isArray: true,
              url: urlBase + "/Identities/:id/accountants",
              method: "POST",
            },

            // INTERNAL. Use Identity.accountants.destroyAll() instead.
            "::delete::Identity::accountants": {
              url: urlBase + "/Identities/:id/accountants",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.accountants.count() instead.
            "::count::Identity::accountants": {
              url: urlBase + "/Identities/:id/accountants/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accountant#getCurrent
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Accountants" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Accountant#upsert
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Accountant#updateOrCreate
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Accountant#patchOrCreateWithWhere
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Accountant#update
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Accountant#destroyById
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Accountant#removeById
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Accountant#updateAttributes
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Accountant#getCachedCurrent
         * @methodOf lbServices.Accountant
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Accountant#login} or
         * {@link lbServices.Accountant#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Accountant instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Accountant#isAuthenticated
         * @methodOf lbServices.Accountant
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Accountant#getCurrentId
         * @methodOf lbServices.Accountant
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Accountant#modelName
        * @propertyOf lbServices.Accountant
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Accountant`.
        */
        R.modelName = "Accountant";


            /**
             * @ngdoc method
             * @name lbServices.Accountant#school
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Accountant::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Accountant#managerole
             * @methodOf lbServices.Accountant
             *
             * @description
             *
             * Fetches belongsTo relation managerole.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Accountant id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R.managerole = function() {
          var TargetResource = $injector.get("ManageRole");
          var action = TargetResource["::get::Accountant::managerole"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Smsreport
 * @header lbServices.Smsreport
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Smsreport` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Smsreport",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/smsreports/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Smsreport.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/smsreports/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/smsreports/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats.findById() instead.
            "prototype$__findById__chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/smsreports/:id/chats/:fk",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats.destroyById() instead.
            "prototype$__destroyById__chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/smsreports/:id/chats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Smsreport.chats.updateById() instead.
            "prototype$__updateById__chats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/smsreports/:id/chats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Smsreport.smsUser() instead.
            "prototype$__get__smsUser": {
              url: urlBase + "/smsreports/:id/smsUser",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats() instead.
            "prototype$__get__chats": {
              isArray: true,
              url: urlBase + "/smsreports/:id/chats",
              method: "GET",
            },

            // INTERNAL. Use Smsreport.chats.create() instead.
            "prototype$__create__chats": {
              url: urlBase + "/smsreports/:id/chats",
              method: "POST",
            },

            // INTERNAL. Use Smsreport.chats.destroyAll() instead.
            "prototype$__delete__chats": {
              url: urlBase + "/smsreports/:id/chats",
              method: "DELETE",
            },

            // INTERNAL. Use Smsreport.chats.count() instead.
            "prototype$__count__chats": {
              url: urlBase + "/smsreports/:id/chats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#create
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/smsreports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#createMany
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/smsreports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#patchOrCreate
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/smsreports",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#replaceOrCreate
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/smsreports/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#upsertWithWhere
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/smsreports/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#exists
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/smsreports/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#findById
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/smsreports/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#replaceById
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/smsreports/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#find
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/smsreports",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#findOne
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/smsreports/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#updateAll
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/smsreports/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#deleteById
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/smsreports/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#count
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/smsreports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#prototype$patchAttributes
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/smsreports/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#createChangeStream
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/smsreports/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.smsreports.findById() instead.
            "::findById::Student::smsreports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/smsreports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.smsreports.destroyById() instead.
            "::destroyById::Student::smsreports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/smsreports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.smsreports.updateById() instead.
            "::updateById::Student::smsreports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/smsreports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.smsreports() instead.
            "::get::Student::smsreports": {
              isArray: true,
              url: urlBase + "/Students/:id/smsreports",
              method: "GET",
            },

            // INTERNAL. Use Student.smsreports.create() instead.
            "::create::Student::smsreports": {
              url: urlBase + "/Students/:id/smsreports",
              method: "POST",
            },

            // INTERNAL. Use Student.smsreports.createMany() instead.
            "::createMany::Student::smsreports": {
              isArray: true,
              url: urlBase + "/Students/:id/smsreports",
              method: "POST",
            },

            // INTERNAL. Use Student.smsreports.destroyAll() instead.
            "::delete::Student::smsreports": {
              url: urlBase + "/Students/:id/smsreports",
              method: "DELETE",
            },

            // INTERNAL. Use Student.smsreports.count() instead.
            "::count::Student::smsreports": {
              url: urlBase + "/Students/:id/smsreports/count",
              method: "GET",
            },

            // INTERNAL. Use Chat.smsreports() instead.
            "::get::Chat::smsreports": {
              url: urlBase + "/Chats/:id/smsreports",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Smsreport#upsert
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#updateOrCreate
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#patchOrCreateWithWhere
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#update
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#destroyById
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#removeById
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#updateAttributes
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Smsreport` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Smsreport#modelName
        * @propertyOf lbServices.Smsreport
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Smsreport`.
        */
        R.modelName = "Smsreport";


            /**
             * @ngdoc method
             * @name lbServices.Smsreport#school
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Smsreport::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#student
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Smsreport::student"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Smsreport.chats
     * @header lbServices.Smsreport.chats
     * @object
     * @description
     *
     * The object `Smsreport.chats` groups methods
     * manipulating `Chat` instances related to `Smsreport`.
     *
     * Call {@link lbServices.Smsreport#chats Smsreport.chats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Smsreport#chats
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Queries chats of smsreport.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::get::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#count
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Counts chats of smsreport.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.chats.count = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::count::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#create
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Creates a new instance in chats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.create = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::create::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#createMany
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Creates a new instance in chats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.createMany = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::createMany::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#destroyAll
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Deletes all chats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chats.destroyAll = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::delete::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#destroyById
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Delete a related item by id for chats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for chats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chats.destroyById = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::destroyById::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#findById
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Find a related item by id for chats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for chats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.findById = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::findById::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport.chats#updateById
             * @methodOf lbServices.Smsreport.chats
             *
             * @description
             *
             * Update a related item by id for chats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `fk` – `{*}` - Foreign key for chats
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chat` object.)
             * </em>
             */
        R.chats.updateById = function() {
          var TargetResource = $injector.get("Chat");
          var action = TargetResource["::updateById::Smsreport::chats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Smsreport#smsUser
             * @methodOf lbServices.Smsreport
             *
             * @description
             *
             * Fetches belongsTo relation smsUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - smsreport id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SMUser` object.)
             * </em>
             */
        R.smsUser = function() {
          var TargetResource = $injector.get("SMUser");
          var action = TargetResource["::get::Smsreport::smsUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SchoolUser
 * @header lbServices.SchoolUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SchoolUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SchoolUser",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SchoolUsers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__findById__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SchoolUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__destroyById__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SchoolUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__updateById__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SchoolUsers/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__get__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Queries accessTokens of SchoolUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/SchoolUsers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__create__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/SchoolUsers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__delete__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/SchoolUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$__count__accessTokens
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Counts accessTokens of SchoolUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/SchoolUsers/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#create
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SchoolUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#createMany
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SchoolUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#patchOrCreate
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/SchoolUsers",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#replaceOrCreate
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/SchoolUsers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#upsertWithWhere
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/SchoolUsers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#exists
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SchoolUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#findById
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SchoolUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#replaceById
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/SchoolUsers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#find
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SchoolUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#findOne
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SchoolUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#updateAll
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/SchoolUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#deleteById
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SchoolUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#count
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SchoolUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$patchAttributes
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/SchoolUsers/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#createChangeStream
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SchoolUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#login
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/SchoolUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#logout
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/SchoolUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#prototype$verify
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/SchoolUsers/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#confirm
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/SchoolUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#resetPassword
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/SchoolUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#changePassword
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/SchoolUsers/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#setPassword
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/SchoolUsers/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#getCurrent
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/SchoolUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#upsert
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#updateOrCreate
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#patchOrCreateWithWhere
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#update
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#destroyById
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#removeById
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SchoolUser#updateAttributes
             * @methodOf lbServices.SchoolUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SchoolUser id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SchoolUser` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.SchoolUser#getCachedCurrent
         * @methodOf lbServices.SchoolUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.SchoolUser#login} or
         * {@link lbServices.SchoolUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A SchoolUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.SchoolUser#isAuthenticated
         * @methodOf lbServices.SchoolUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.SchoolUser#getCurrentId
         * @methodOf lbServices.SchoolUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.SchoolUser#modelName
        * @propertyOf lbServices.SchoolUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SchoolUser`.
        */
        R.modelName = "SchoolUser";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Identity
 * @header lbServices.Identity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Identity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Identity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Identities/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__findById__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__updateById__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.admins.findById() instead.
            "prototype$__findById__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/admins/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.admins.destroyById() instead.
            "prototype$__destroyById__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/admins/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.admins.updateById() instead.
            "prototype$__updateById__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/admins/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.accountants.findById() instead.
            "prototype$__findById__accountants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accountants/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.accountants.destroyById() instead.
            "prototype$__destroyById__accountants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accountants/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.accountants.updateById() instead.
            "prototype$__updateById__accountants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/accountants/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.students.findById() instead.
            "prototype$__findById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.students.destroyById() instead.
            "prototype$__destroyById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.students.updateById() instead.
            "prototype$__updateById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.parents.findById() instead.
            "prototype$__findById__parents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/parents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.parents.destroyById() instead.
            "prototype$__destroyById__parents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/parents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.parents.updateById() instead.
            "prototype$__updateById__parents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/parents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Identity.staffs.findById() instead.
            "prototype$__findById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/staffs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Identity.staffs.destroyById() instead.
            "prototype$__destroyById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/staffs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.staffs.updateById() instead.
            "prototype$__updateById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Identities/:id/staffs/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__get__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Queries accessTokens of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Identities/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__create__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Identities/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__delete__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Identities/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$__count__accessTokens
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Counts accessTokens of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Identities/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Identity.admins() instead.
            "prototype$__get__admins": {
              isArray: true,
              url: urlBase + "/Identities/:id/admins",
              method: "GET",
            },

            // INTERNAL. Use Identity.admins.create() instead.
            "prototype$__create__admins": {
              url: urlBase + "/Identities/:id/admins",
              method: "POST",
            },

            // INTERNAL. Use Identity.admins.destroyAll() instead.
            "prototype$__delete__admins": {
              url: urlBase + "/Identities/:id/admins",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.admins.count() instead.
            "prototype$__count__admins": {
              url: urlBase + "/Identities/:id/admins/count",
              method: "GET",
            },

            // INTERNAL. Use Identity.accountants() instead.
            "prototype$__get__accountants": {
              isArray: true,
              url: urlBase + "/Identities/:id/accountants",
              method: "GET",
            },

            // INTERNAL. Use Identity.accountants.create() instead.
            "prototype$__create__accountants": {
              url: urlBase + "/Identities/:id/accountants",
              method: "POST",
            },

            // INTERNAL. Use Identity.accountants.destroyAll() instead.
            "prototype$__delete__accountants": {
              url: urlBase + "/Identities/:id/accountants",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.accountants.count() instead.
            "prototype$__count__accountants": {
              url: urlBase + "/Identities/:id/accountants/count",
              method: "GET",
            },

            // INTERNAL. Use Identity.students() instead.
            "prototype$__get__students": {
              isArray: true,
              url: urlBase + "/Identities/:id/students",
              method: "GET",
            },

            // INTERNAL. Use Identity.students.create() instead.
            "prototype$__create__students": {
              url: urlBase + "/Identities/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Identity.students.destroyAll() instead.
            "prototype$__delete__students": {
              url: urlBase + "/Identities/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.students.count() instead.
            "prototype$__count__students": {
              url: urlBase + "/Identities/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Identity.parents() instead.
            "prototype$__get__parents": {
              isArray: true,
              url: urlBase + "/Identities/:id/parents",
              method: "GET",
            },

            // INTERNAL. Use Identity.parents.create() instead.
            "prototype$__create__parents": {
              url: urlBase + "/Identities/:id/parents",
              method: "POST",
            },

            // INTERNAL. Use Identity.parents.destroyAll() instead.
            "prototype$__delete__parents": {
              url: urlBase + "/Identities/:id/parents",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.parents.count() instead.
            "prototype$__count__parents": {
              url: urlBase + "/Identities/:id/parents/count",
              method: "GET",
            },

            // INTERNAL. Use Identity.staffs() instead.
            "prototype$__get__staffs": {
              isArray: true,
              url: urlBase + "/Identities/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use Identity.staffs.create() instead.
            "prototype$__create__staffs": {
              url: urlBase + "/Identities/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use Identity.staffs.destroyAll() instead.
            "prototype$__delete__staffs": {
              url: urlBase + "/Identities/:id/staffs",
              method: "DELETE",
            },

            // INTERNAL. Use Identity.staffs.count() instead.
            "prototype$__count__staffs": {
              url: urlBase + "/Identities/:id/staffs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#create
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Identities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#createMany
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Identities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#patchOrCreate
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Identities",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#replaceOrCreate
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Identities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#upsertWithWhere
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Identities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#exists
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Identities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#findById
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Identities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#replaceById
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Identities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#find
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Identities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#findOne
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Identities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#updateAll
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Identities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#deleteById
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Identities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#count
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Identities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$patchAttributes
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Identities/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#createChangeStream
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Identities/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#login
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Identities/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#logout
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Identities/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#prototype$verify
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Identities/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#confirm
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Identities/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#resetPassword
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Identities/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#changePassword
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Identities/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#setPassword
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Identities/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#validateotp
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * validateOTP
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `otp` – `{string}` -
             *
             *  - `cotp` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "validateotp": {
              url: urlBase + "/Identities/validateotp",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#loginwithRole
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * loginwithRole
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{string=}` -
             *
             *  - `model` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "loginwithRole": {
              url: urlBase + "/Identities/loginwithRole",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#getProfiles
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * get all profiles which are associated to the User
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getProfiles": {
              url: urlBase + "/Identities/getProfiles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#forgetmyPassword
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * get all profiles which are associated to the User
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `val` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "forgetmyPassword": {
              url: urlBase + "/Identities/forgetmyPassword",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#signup
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Signup to the User
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "signup": {
              url: urlBase + "/Identities/signup",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#validateuser
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * validate User
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `val` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "validateuser": {
              url: urlBase + "/Identities/validateuser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#updatemypassword
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * update a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `userid` – `{string}` -
             *
             *  - `pwd` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "updatemypassword": {
              url: urlBase + "/Identities/updatemypassword",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Identity#getCurrent
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Identities" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Identity#upsert
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Identity#updateOrCreate
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Identity#patchOrCreateWithWhere
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Identity#update
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Identity#destroyById
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Identity#removeById
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Identity#updateAttributes
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Identity` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Identity#getCachedCurrent
         * @methodOf lbServices.Identity
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Identity#login} or
         * {@link lbServices.Identity#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Identity instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Identity#isAuthenticated
         * @methodOf lbServices.Identity
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Identity#getCurrentId
         * @methodOf lbServices.Identity
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Identity#modelName
        * @propertyOf lbServices.Identity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Identity`.
        */
        R.modelName = "Identity";

    /**
     * @ngdoc object
     * @name lbServices.Identity.admins
     * @header lbServices.Identity.admins
     * @object
     * @description
     *
     * The object `Identity.admins` groups methods
     * manipulating `Admin` instances related to `Identity`.
     *
     * Call {@link lbServices.Identity#admins Identity.admins()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Identity#admins
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Queries admins of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#count
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Counts admins of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.admins.count = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::count::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#create
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Creates a new instance in admins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.create = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::create::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#createMany
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Creates a new instance in admins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.createMany = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::createMany::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#destroyAll
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Deletes all admins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.admins.destroyAll = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::delete::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#destroyById
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Delete a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.admins.destroyById = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::destroyById::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#findById
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Find a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.findById = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::findById::Identity::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.admins#updateById
             * @methodOf lbServices.Identity.admins
             *
             * @description
             *
             * Update a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.updateById = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::updateById::Identity::admins"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Identity.accountants
     * @header lbServices.Identity.accountants
     * @object
     * @description
     *
     * The object `Identity.accountants` groups methods
     * manipulating `Accountant` instances related to `Identity`.
     *
     * Call {@link lbServices.Identity#accountants Identity.accountants()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Identity#accountants
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Queries accountants of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R.accountants = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::get::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#count
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Counts accountants of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accountants.count = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::count::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#create
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Creates a new instance in accountants of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R.accountants.create = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::create::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#createMany
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Creates a new instance in accountants of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R.accountants.createMany = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::createMany::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#destroyAll
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Deletes all accountants of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accountants.destroyAll = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::delete::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#destroyById
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Delete a related item by id for accountants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accountants
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accountants.destroyById = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::destroyById::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#findById
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Find a related item by id for accountants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accountants
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R.accountants.findById = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::findById::Identity::accountants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.accountants#updateById
             * @methodOf lbServices.Identity.accountants
             *
             * @description
             *
             * Update a related item by id for accountants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `fk` – `{*}` - Foreign key for accountants
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accountant` object.)
             * </em>
             */
        R.accountants.updateById = function() {
          var TargetResource = $injector.get("Accountant");
          var action = TargetResource["::updateById::Identity::accountants"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Identity.students
     * @header lbServices.Identity.students
     * @object
     * @description
     *
     * The object `Identity.students` groups methods
     * manipulating `Student` instances related to `Identity`.
     *
     * Call {@link lbServices.Identity#students Identity.students()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Identity#students
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Queries students of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#count
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Counts students of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.students.count = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::count::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#create
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.create = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::create::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#createMany
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.createMany = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::createMany::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#destroyAll
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Deletes all students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyAll = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::delete::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#destroyById
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Delete a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::destroyById::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#findById
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Find a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.findById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::findById::Identity::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.students#updateById
             * @methodOf lbServices.Identity.students
             *
             * @description
             *
             * Update a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.updateById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::updateById::Identity::students"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Identity.parents
     * @header lbServices.Identity.parents
     * @object
     * @description
     *
     * The object `Identity.parents` groups methods
     * manipulating `Parent` instances related to `Identity`.
     *
     * Call {@link lbServices.Identity#parents Identity.parents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Identity#parents
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Queries parents of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parents = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::get::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#count
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Counts parents of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.parents.count = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::count::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#create
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Creates a new instance in parents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parents.create = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::create::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#createMany
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Creates a new instance in parents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parents.createMany = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::createMany::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#destroyAll
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Deletes all parents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.parents.destroyAll = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::delete::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#destroyById
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Delete a related item by id for parents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for parents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.parents.destroyById = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::destroyById::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#findById
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Find a related item by id for parents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for parents
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parents.findById = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::findById::Identity::parents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.parents#updateById
             * @methodOf lbServices.Identity.parents
             *
             * @description
             *
             * Update a related item by id for parents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `fk` – `{*}` - Foreign key for parents
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parents.updateById = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::updateById::Identity::parents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Identity.staffs
     * @header lbServices.Identity.staffs
     * @object
     * @description
     *
     * The object `Identity.staffs` groups methods
     * manipulating `Staff` instances related to `Identity`.
     *
     * Call {@link lbServices.Identity#staffs Identity.staffs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Identity#staffs
             * @methodOf lbServices.Identity
             *
             * @description
             *
             * Queries staffs of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#count
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Counts staffs of Identity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.staffs.count = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::count::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#create
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Creates a new instance in staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.create = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::create::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#createMany
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Creates a new instance in staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.createMany = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::createMany::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#destroyAll
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Deletes all staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.staffs.destroyAll = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::delete::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#destroyById
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Delete a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.staffs.destroyById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::destroyById::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#findById
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Find a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.findById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::findById::Identity::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Identity.staffs#updateById
             * @methodOf lbServices.Identity.staffs
             *
             * @description
             *
             * Update a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Identity id
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.updateById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::updateById::Identity::staffs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Complaint
 * @header lbServices.Complaint
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Complaint` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Complaint",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Complaints/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Complaint.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Complaints/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Complaint.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Complaints/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Complaint.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Complaints/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Complaint.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/Complaints/:id/staff",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#create
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Complaints",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#createMany
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Complaints",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#patchOrCreate
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Complaints",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#replaceOrCreate
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Complaints/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#upsertWithWhere
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Complaints/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#exists
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Complaints/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#findById
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Complaints/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#replaceById
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Complaints/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#find
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Complaints",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#findOne
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Complaints/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#updateAll
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Complaints/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#deleteById
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Complaints/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#count
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Complaints/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#prototype$patchAttributes
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Complaint id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Complaints/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Complaint#createChangeStream
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Complaints/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.complaints.findById() instead.
            "::findById::Student::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/complaints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.complaints.destroyById() instead.
            "::destroyById::Student::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/complaints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.complaints.updateById() instead.
            "::updateById::Student::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/complaints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.complaints() instead.
            "::get::Student::complaints": {
              isArray: true,
              url: urlBase + "/Students/:id/complaints",
              method: "GET",
            },

            // INTERNAL. Use Student.complaints.create() instead.
            "::create::Student::complaints": {
              url: urlBase + "/Students/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Student.complaints.createMany() instead.
            "::createMany::Student::complaints": {
              isArray: true,
              url: urlBase + "/Students/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Student.complaints.destroyAll() instead.
            "::delete::Student::complaints": {
              url: urlBase + "/Students/:id/complaints",
              method: "DELETE",
            },

            // INTERNAL. Use Student.complaints.count() instead.
            "::count::Student::complaints": {
              url: urlBase + "/Students/:id/complaints/count",
              method: "GET",
            },

            // INTERNAL. Use Staff.complaints.findById() instead.
            "::findById::Staff::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/complaints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Staff.complaints.destroyById() instead.
            "::destroyById::Staff::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/complaints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.complaints.updateById() instead.
            "::updateById::Staff::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/complaints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Staff.complaints() instead.
            "::get::Staff::complaints": {
              isArray: true,
              url: urlBase + "/Staffs/:id/complaints",
              method: "GET",
            },

            // INTERNAL. Use Staff.complaints.create() instead.
            "::create::Staff::complaints": {
              url: urlBase + "/Staffs/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Staff.complaints.createMany() instead.
            "::createMany::Staff::complaints": {
              isArray: true,
              url: urlBase + "/Staffs/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Staff.complaints.destroyAll() instead.
            "::delete::Staff::complaints": {
              url: urlBase + "/Staffs/:id/complaints",
              method: "DELETE",
            },

            // INTERNAL. Use Staff.complaints.count() instead.
            "::count::Staff::complaints": {
              url: urlBase + "/Staffs/:id/complaints/count",
              method: "GET",
            },

            // INTERNAL. Use Class.complaints.findById() instead.
            "::findById::Class::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/complaints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.complaints.destroyById() instead.
            "::destroyById::Class::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/complaints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.complaints.updateById() instead.
            "::updateById::Class::complaints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/complaints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.complaints() instead.
            "::get::Class::complaints": {
              isArray: true,
              url: urlBase + "/Classes/:id/complaints",
              method: "GET",
            },

            // INTERNAL. Use Class.complaints.create() instead.
            "::create::Class::complaints": {
              url: urlBase + "/Classes/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Class.complaints.createMany() instead.
            "::createMany::Class::complaints": {
              isArray: true,
              url: urlBase + "/Classes/:id/complaints",
              method: "POST",
            },

            // INTERNAL. Use Class.complaints.destroyAll() instead.
            "::delete::Class::complaints": {
              url: urlBase + "/Classes/:id/complaints",
              method: "DELETE",
            },

            // INTERNAL. Use Class.complaints.count() instead.
            "::count::Class::complaints": {
              url: urlBase + "/Classes/:id/complaints/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Complaint#upsert
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Complaint#updateOrCreate
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Complaint#patchOrCreateWithWhere
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Complaint#update
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Complaint#destroyById
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Complaint#removeById
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Complaint#updateAttributes
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Complaint id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Complaint` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Complaint#modelName
        * @propertyOf lbServices.Complaint
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Complaint`.
        */
        R.modelName = "Complaint";


            /**
             * @ngdoc method
             * @name lbServices.Complaint#school
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Complaint id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Complaint::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Complaint#class
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Complaint id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Complaint::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Complaint#student
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Complaint id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Complaint::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Complaint#staff
             * @methodOf lbServices.Complaint
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Complaint id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Complaint::staff"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Visitor
 * @header lbServices.Visitor
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Visitor` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Visitor",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Visitors/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Visitor.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Visitors/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#create
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Visitors",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#createMany
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Visitors",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#patchOrCreate
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Visitors",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#replaceOrCreate
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Visitors/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#upsertWithWhere
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Visitors/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#exists
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Visitors/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#findById
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Visitors/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#replaceById
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Visitors/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#find
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Visitors",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#findOne
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Visitors/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#updateAll
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Visitors/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#deleteById
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Visitors/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#count
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Visitors/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#prototype$patchAttributes
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Visitor id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Visitors/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Visitor#createChangeStream
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Visitors/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Visitor#upsert
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Visitor#updateOrCreate
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Visitor#patchOrCreateWithWhere
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Visitor#update
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Visitor#destroyById
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Visitor#removeById
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Visitor#updateAttributes
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Visitor id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Visitor` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Visitor#modelName
        * @propertyOf lbServices.Visitor
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Visitor`.
        */
        R.modelName = "Visitor";


            /**
             * @ngdoc method
             * @name lbServices.Visitor#school
             * @methodOf lbServices.Visitor
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Visitor id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Visitor::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AcademicBatch
 * @header lbServices.AcademicBatch
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AcademicBatch` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AcademicBatch",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/AcademicBatches/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AcademicBatch.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/AcademicBatches/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#create
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AcademicBatches",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#createMany
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AcademicBatches",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#patchOrCreate
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/AcademicBatches",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#replaceOrCreate
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/AcademicBatches/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#upsertWithWhere
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/AcademicBatches/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#exists
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AcademicBatches/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#findById
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AcademicBatches/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#replaceById
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/AcademicBatches/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#find
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AcademicBatches",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#findOne
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AcademicBatches/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#updateAll
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/AcademicBatches/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#deleteById
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AcademicBatches/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#count
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AcademicBatches/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#prototype$patchAttributes
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AcademicBatch id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/AcademicBatches/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#createChangeStream
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AcademicBatches/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#upsert
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#updateOrCreate
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#patchOrCreateWithWhere
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#update
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#destroyById
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#removeById
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#updateAttributes
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AcademicBatch id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AcademicBatch` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.AcademicBatch#modelName
        * @propertyOf lbServices.AcademicBatch
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AcademicBatch`.
        */
        R.modelName = "AcademicBatch";


            /**
             * @ngdoc method
             * @name lbServices.AcademicBatch#school
             * @methodOf lbServices.AcademicBatch
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AcademicBatch id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::AcademicBatch::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ManageRole
 * @header lbServices.ManageRole
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ManageRole` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ManageRole",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ManageRoles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ManageRole.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/ManageRoles/:id/school",
              method: "GET",
            },

            // INTERNAL. Use ManageRole.Admin() instead.
            "prototype$__get__Admin": {
              url: urlBase + "/ManageRoles/:id/Admin",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#create
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ManageRoles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#createMany
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ManageRoles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#patchOrCreate
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ManageRoles",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#replaceOrCreate
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ManageRoles/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#upsertWithWhere
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ManageRoles/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#exists
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ManageRoles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#findById
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ManageRoles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#replaceById
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ManageRoles/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#find
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ManageRoles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#findOne
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ManageRoles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#updateAll
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ManageRoles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#deleteById
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ManageRoles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#count
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ManageRoles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#prototype$patchAttributes
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ManageRole id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ManageRoles/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#createChangeStream
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ManageRoles/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.managerole() instead.
            "::get::Student::managerole": {
              url: urlBase + "/Students/:id/managerole",
              method: "GET",
            },

            // INTERNAL. Use Staff.managerole() instead.
            "::get::Staff::managerole": {
              url: urlBase + "/Staffs/:id/managerole",
              method: "GET",
            },

            // INTERNAL. Use Admin.managerole() instead.
            "::get::Admin::managerole": {
              url: urlBase + "/Admins/:id/managerole",
              method: "GET",
            },

            // INTERNAL. Use Accountant.managerole() instead.
            "::get::Accountant::managerole": {
              url: urlBase + "/Accountants/:id/managerole",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ManageRole#upsert
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#updateOrCreate
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#patchOrCreateWithWhere
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#update
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#destroyById
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#removeById
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#updateAttributes
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ManageRole id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ManageRole` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ManageRole#modelName
        * @propertyOf lbServices.ManageRole
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ManageRole`.
        */
        R.modelName = "ManageRole";


            /**
             * @ngdoc method
             * @name lbServices.ManageRole#school
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ManageRole id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::ManageRole::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ManageRole#Admin
             * @methodOf lbServices.ManageRole
             *
             * @description
             *
             * Fetches belongsTo relation Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ManageRole id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.Admin = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::ManageRole::Admin"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Discount
 * @header lbServices.Discount
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Discount` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Discount",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/discounts/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Discount#create
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/discounts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#createMany
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/discounts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#patchOrCreate
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/discounts",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#replaceOrCreate
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/discounts/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#upsertWithWhere
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/discounts/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#exists
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/discounts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#findById
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/discounts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#replaceById
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/discounts/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#find
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/discounts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#findOne
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/discounts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#updateAll
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/discounts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#deleteById
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/discounts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#count
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/discounts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#prototype$patchAttributes
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - discount id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/discounts/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Discount#createChangeStream
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/discounts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.discounts.findById() instead.
            "::findById::Student::discounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/discounts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.discounts.destroyById() instead.
            "::destroyById::Student::discounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/discounts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.discounts.updateById() instead.
            "::updateById::Student::discounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/discounts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.discounts() instead.
            "::get::Student::discounts": {
              isArray: true,
              url: urlBase + "/Students/:id/discounts",
              method: "GET",
            },

            // INTERNAL. Use Student.discounts.create() instead.
            "::create::Student::discounts": {
              url: urlBase + "/Students/:id/discounts",
              method: "POST",
            },

            // INTERNAL. Use Student.discounts.createMany() instead.
            "::createMany::Student::discounts": {
              isArray: true,
              url: urlBase + "/Students/:id/discounts",
              method: "POST",
            },

            // INTERNAL. Use Student.discounts.destroyAll() instead.
            "::delete::Student::discounts": {
              url: urlBase + "/Students/:id/discounts",
              method: "DELETE",
            },

            // INTERNAL. Use Student.discounts.count() instead.
            "::count::Student::discounts": {
              url: urlBase + "/Students/:id/discounts/count",
              method: "GET",
            },

            // INTERNAL. Use FeeItem.discounts() instead.
            "::get::FeeItem::discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "GET",
            },

            // INTERNAL. Use FeeItem.discounts.create() instead.
            "::create::FeeItem::discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "POST",
            },

            // INTERNAL. Use FeeItem.discounts.createMany() instead.
            "::createMany::FeeItem::discounts": {
              isArray: true,
              url: urlBase + "/feeItems/:id/discounts",
              method: "POST",
            },

            // INTERNAL. Use FeeItem.discounts.update() instead.
            "::update::FeeItem::discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "PUT",
            },

            // INTERNAL. Use FeeItem.discounts.destroy() instead.
            "::destroy::FeeItem::discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Discount#upsert
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Discount#updateOrCreate
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Discount#patchOrCreateWithWhere
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Discount#update
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Discount#destroyById
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Discount#removeById
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Discount#updateAttributes
             * @methodOf lbServices.Discount
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - discount id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Discount#modelName
        * @propertyOf lbServices.Discount
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Discount`.
        */
        R.modelName = "Discount";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Optionals
 * @header lbServices.Optionals
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Optionals` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Optionals",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/optionals/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Optionals.feeItems.findById() instead.
            "prototype$__findById__feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/optionals/:id/feeItems/:fk",
              method: "GET",
            },

            // INTERNAL. Use Optionals.feeItems.destroyById() instead.
            "prototype$__destroyById__feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/optionals/:id/feeItems/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Optionals.feeItems.updateById() instead.
            "prototype$__updateById__feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/optionals/:id/feeItems/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Optionals.feeItems() instead.
            "prototype$__get__feeItems": {
              isArray: true,
              url: urlBase + "/optionals/:id/feeItems",
              method: "GET",
            },

            // INTERNAL. Use Optionals.feeItems.create() instead.
            "prototype$__create__feeItems": {
              url: urlBase + "/optionals/:id/feeItems",
              method: "POST",
            },

            // INTERNAL. Use Optionals.feeItems.destroyAll() instead.
            "prototype$__delete__feeItems": {
              url: urlBase + "/optionals/:id/feeItems",
              method: "DELETE",
            },

            // INTERNAL. Use Optionals.feeItems.count() instead.
            "prototype$__count__feeItems": {
              url: urlBase + "/optionals/:id/feeItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#create
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/optionals",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#createMany
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/optionals",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#patchOrCreate
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/optionals",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#replaceOrCreate
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/optionals/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#upsertWithWhere
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/optionals/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#exists
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/optionals/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#findById
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/optionals/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#replaceById
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/optionals/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#find
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/optionals",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#findOne
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/optionals/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#updateAll
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/optionals/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#deleteById
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/optionals/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#count
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/optionals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#prototype$patchAttributes
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/optionals/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#createChangeStream
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/optionals/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Optionals#upsertoptionals
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Upser Optionals with Fee Items
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
            "upsertoptionals": {
              url: urlBase + "/optionals/upsertoptionals",
              method: "POST",
            },

            // INTERNAL. Use Student.optionals.findById() instead.
            "::findById::Student::optionals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/optionals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.optionals.destroyById() instead.
            "::destroyById::Student::optionals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/optionals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.optionals.updateById() instead.
            "::updateById::Student::optionals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/optionals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.optionals() instead.
            "::get::Student::optionals": {
              isArray: true,
              url: urlBase + "/Students/:id/optionals",
              method: "GET",
            },

            // INTERNAL. Use Student.optionals.create() instead.
            "::create::Student::optionals": {
              url: urlBase + "/Students/:id/optionals",
              method: "POST",
            },

            // INTERNAL. Use Student.optionals.createMany() instead.
            "::createMany::Student::optionals": {
              isArray: true,
              url: urlBase + "/Students/:id/optionals",
              method: "POST",
            },

            // INTERNAL. Use Student.optionals.destroyAll() instead.
            "::delete::Student::optionals": {
              url: urlBase + "/Students/:id/optionals",
              method: "DELETE",
            },

            // INTERNAL. Use Student.optionals.count() instead.
            "::count::Student::optionals": {
              url: urlBase + "/Students/:id/optionals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Optionals#upsert
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Optionals#updateOrCreate
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Optionals#patchOrCreateWithWhere
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Optionals#update
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Optionals#destroyById
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Optionals#removeById
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Optionals#updateAttributes
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Optionals` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Optionals#modelName
        * @propertyOf lbServices.Optionals
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Optionals`.
        */
        R.modelName = "Optionals";

    /**
     * @ngdoc object
     * @name lbServices.Optionals.feeItems
     * @header lbServices.Optionals.feeItems
     * @object
     * @description
     *
     * The object `Optionals.feeItems` groups methods
     * manipulating `FeeItem` instances related to `Optionals`.
     *
     * Call {@link lbServices.Optionals#feeItems Optionals.feeItems()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Optionals#feeItems
             * @methodOf lbServices.Optionals
             *
             * @description
             *
             * Queries feeItems of optionals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::get::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#count
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Counts feeItems of optionals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeItems.count = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::count::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#create
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Creates a new instance in feeItems of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.create = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::create::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#createMany
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Creates a new instance in feeItems of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.createMany = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::createMany::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#destroyAll
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Deletes all feeItems of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeItems.destroyAll = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::delete::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#destroyById
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Delete a related item by id for feeItems.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeItems
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeItems.destroyById = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::destroyById::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#findById
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Find a related item by id for feeItems.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feeItems
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.findById = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::findById::Optionals::feeItems"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Optionals.feeItems#updateById
             * @methodOf lbServices.Optionals.feeItems
             *
             * @description
             *
             * Update a related item by id for feeItems.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - optionals id
             *
             *  - `fk` – `{*}` - Foreign key for feeItems
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R.feeItems.updateById = function() {
          var TargetResource = $injector.get("FeeItem");
          var action = TargetResource["::updateById::Optionals::feeItems"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeeItem
 * @header lbServices.FeeItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeeItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeeItem",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/feeItems/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeeItem.discounts() instead.
            "prototype$__get__discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "GET",
            },

            // INTERNAL. Use FeeItem.discounts.create() instead.
            "prototype$__create__discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "POST",
            },

            // INTERNAL. Use FeeItem.discounts.update() instead.
            "prototype$__update__discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "PUT",
            },

            // INTERNAL. Use FeeItem.discounts.destroy() instead.
            "prototype$__destroy__discounts": {
              url: urlBase + "/feeItems/:id/discounts",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#create
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/feeItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#createMany
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/feeItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#patchOrCreate
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/feeItems",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#replaceOrCreate
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/feeItems/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#upsertWithWhere
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/feeItems/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#exists
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/feeItems/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#findById
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/feeItems/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#replaceById
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/feeItems/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#find
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/feeItems",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#findOne
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/feeItems/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#updateAll
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/feeItems/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#deleteById
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/feeItems/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#count
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/feeItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#prototype$patchAttributes
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/feeItems/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#createChangeStream
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/feeItems/change-stream",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feeItems.findById() instead.
            "::findById::FeeSetup::feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feeItems/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeItems.destroyById() instead.
            "::destroyById::FeeSetup::feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feeItems/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feeItems.updateById() instead.
            "::updateById::FeeSetup::feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feeItems/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeSetup.feeItems() instead.
            "::get::FeeSetup::feeItems": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feeItems.create() instead.
            "::create::FeeSetup::feeItems": {
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feeItems.createMany() instead.
            "::createMany::FeeSetup::feeItems": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feeItems.destroyAll() instead.
            "::delete::FeeSetup::feeItems": {
              url: urlBase + "/FeeSetups/:id/feeItems",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feeItems.count() instead.
            "::count::FeeSetup::feeItems": {
              url: urlBase + "/FeeSetups/:id/feeItems/count",
              method: "GET",
            },

            // INTERNAL. Use Optionals.feeItems.findById() instead.
            "::findById::Optionals::feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/optionals/:id/feeItems/:fk",
              method: "GET",
            },

            // INTERNAL. Use Optionals.feeItems.destroyById() instead.
            "::destroyById::Optionals::feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/optionals/:id/feeItems/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Optionals.feeItems.updateById() instead.
            "::updateById::Optionals::feeItems": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/optionals/:id/feeItems/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Optionals.feeItems() instead.
            "::get::Optionals::feeItems": {
              isArray: true,
              url: urlBase + "/optionals/:id/feeItems",
              method: "GET",
            },

            // INTERNAL. Use Optionals.feeItems.create() instead.
            "::create::Optionals::feeItems": {
              url: urlBase + "/optionals/:id/feeItems",
              method: "POST",
            },

            // INTERNAL. Use Optionals.feeItems.createMany() instead.
            "::createMany::Optionals::feeItems": {
              isArray: true,
              url: urlBase + "/optionals/:id/feeItems",
              method: "POST",
            },

            // INTERNAL. Use Optionals.feeItems.destroyAll() instead.
            "::delete::Optionals::feeItems": {
              url: urlBase + "/optionals/:id/feeItems",
              method: "DELETE",
            },

            // INTERNAL. Use Optionals.feeItems.count() instead.
            "::count::Optionals::feeItems": {
              url: urlBase + "/optionals/:id/feeItems/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeeItem#upsert
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#updateOrCreate
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#patchOrCreateWithWhere
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#update
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#destroyById
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#removeById
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeItem#updateAttributes
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeItem` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeeItem#modelName
        * @propertyOf lbServices.FeeItem
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeeItem`.
        */
        R.modelName = "FeeItem";

    /**
     * @ngdoc object
     * @name lbServices.FeeItem.discounts
     * @header lbServices.FeeItem.discounts
     * @object
     * @description
     *
     * The object `FeeItem.discounts` groups methods
     * manipulating `Discount` instances related to `FeeItem`.
     *
     * Call {@link lbServices.FeeItem#discounts FeeItem.discounts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FeeItem#discounts
             * @methodOf lbServices.FeeItem
             *
             * @description
             *
             * Fetches hasOne relation discounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::get::FeeItem::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeItem.discounts#create
             * @methodOf lbServices.FeeItem.discounts
             *
             * @description
             *
             * Creates a new instance in discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.create = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::create::FeeItem::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeItem.discounts#createMany
             * @methodOf lbServices.FeeItem.discounts
             *
             * @description
             *
             * Creates a new instance in discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.createMany = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::createMany::FeeItem::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeItem.discounts#destroy
             * @methodOf lbServices.FeeItem.discounts
             *
             * @description
             *
             * Deletes discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.discounts.destroy = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::destroy::FeeItem::discounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeItem.discounts#update
             * @methodOf lbServices.FeeItem.discounts
             *
             * @description
             *
             * Update discounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feeItem id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Discount` object.)
             * </em>
             */
        R.discounts.update = function() {
          var TargetResource = $injector.get("Discount");
          var action = TargetResource["::update::FeeItem::discounts"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StudentPayments
 * @header lbServices.StudentPayments
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StudentPayments` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StudentPayments",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/studentPayments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use StudentPayments.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/studentPayments/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use StudentPayments.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/studentPayments/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use StudentPayments.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/studentPayments/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use StudentPayments.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use StudentPayments.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use StudentPayments.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/studentPayments/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use StudentPayments.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/studentPayments/:id/feePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#create
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/studentPayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#createMany
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/studentPayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#patchOrCreate
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/studentPayments",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#replaceOrCreate
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/studentPayments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#upsertWithWhere
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/studentPayments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#exists
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/studentPayments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#findById
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/studentPayments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#replaceById
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/studentPayments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#find
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/studentPayments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#findOne
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/studentPayments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#updateAll
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/studentPayments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#deleteById
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/studentPayments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#count
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/studentPayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#prototype$patchAttributes
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/studentPayments/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#createChangeStream
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/studentPayments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.studentPayments.findById() instead.
            "::findById::Student::studentPayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentPayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentPayments.destroyById() instead.
            "::destroyById::Student::studentPayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentPayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentPayments.updateById() instead.
            "::updateById::Student::studentPayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentPayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentPayments() instead.
            "::get::Student::studentPayments": {
              isArray: true,
              url: urlBase + "/Students/:id/studentPayments",
              method: "GET",
            },

            // INTERNAL. Use Student.studentPayments.create() instead.
            "::create::Student::studentPayments": {
              url: urlBase + "/Students/:id/studentPayments",
              method: "POST",
            },

            // INTERNAL. Use Student.studentPayments.createMany() instead.
            "::createMany::Student::studentPayments": {
              isArray: true,
              url: urlBase + "/Students/:id/studentPayments",
              method: "POST",
            },

            // INTERNAL. Use Student.studentPayments.destroyAll() instead.
            "::delete::Student::studentPayments": {
              url: urlBase + "/Students/:id/studentPayments",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentPayments.count() instead.
            "::count::Student::studentPayments": {
              url: urlBase + "/Students/:id/studentPayments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#upsert
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#updateOrCreate
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#patchOrCreateWithWhere
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#update
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#destroyById
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#removeById
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#updateAttributes
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentPayments` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.StudentPayments#modelName
        * @propertyOf lbServices.StudentPayments
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StudentPayments`.
        */
        R.modelName = "StudentPayments";

    /**
     * @ngdoc object
     * @name lbServices.StudentPayments.feePayments
     * @header lbServices.StudentPayments.feePayments
     * @object
     * @description
     *
     * The object `StudentPayments.feePayments` groups methods
     * manipulating `FeePayment` instances related to `StudentPayments`.
     *
     * Call {@link lbServices.StudentPayments#feePayments StudentPayments.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.StudentPayments#feePayments
             * @methodOf lbServices.StudentPayments
             *
             * @description
             *
             * Queries feePayments of studentPayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#count
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Counts feePayments of studentPayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#create
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#createMany
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#destroyAll
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#destroyById
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#findById
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentPayments.feePayments#updateById
             * @methodOf lbServices.StudentPayments.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - studentPayments id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::StudentPayments::feePayments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AutoNumber
 * @header lbServices.AutoNumber
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AutoNumber` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AutoNumber",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/autoNumbers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#create
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/autoNumbers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#createMany
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/autoNumbers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#patchOrCreate
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/autoNumbers",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#replaceOrCreate
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/autoNumbers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#upsertWithWhere
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/autoNumbers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#exists
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/autoNumbers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#findById
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/autoNumbers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#replaceById
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/autoNumbers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#find
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/autoNumbers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#findOne
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/autoNumbers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#updateAll
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/autoNumbers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#deleteById
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/autoNumbers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#count
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/autoNumbers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#prototype$patchAttributes
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - autoNumber id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/autoNumbers/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#createChangeStream
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/autoNumbers/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#upsert
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#updateOrCreate
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#patchOrCreateWithWhere
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#update
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#destroyById
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#removeById
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AutoNumber#updateAttributes
             * @methodOf lbServices.AutoNumber
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - autoNumber id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AutoNumber` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.AutoNumber#modelName
        * @propertyOf lbServices.AutoNumber
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AutoNumber`.
        */
        R.modelName = "AutoNumber";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ClassStudents
 * @header lbServices.ClassStudents
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ClassStudents` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ClassStudents",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/classStudents/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#create
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/classStudents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#createMany
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/classStudents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#patchOrCreate
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/classStudents",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#replaceOrCreate
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/classStudents/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#upsertWithWhere
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/classStudents/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#exists
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/classStudents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#findById
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/classStudents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#replaceById
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/classStudents/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#find
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/classStudents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#findOne
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/classStudents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#updateAll
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/classStudents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#deleteById
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/classStudents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#count
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/classStudents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#prototype$patchAttributes
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - classStudents id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/classStudents/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#createChangeStream
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/classStudents/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#upsert
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#updateOrCreate
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#patchOrCreateWithWhere
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#update
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#destroyById
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#removeById
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ClassStudents#updateAttributes
             * @methodOf lbServices.ClassStudents
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - classStudents id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassStudents` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ClassStudents#modelName
        * @propertyOf lbServices.ClassStudents
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ClassStudents`.
        */
        R.modelName = "ClassStudents";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Deposit
 * @header lbServices.Deposit
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Deposit` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Deposit",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Deposits/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Deposit.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Deposits/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#create
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Deposits",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#createMany
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Deposits",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#patchOrCreate
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Deposits",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#replaceOrCreate
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Deposits/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#upsertWithWhere
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Deposits/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#exists
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Deposits/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#findById
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Deposits/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#replaceById
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Deposits/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#find
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Deposits",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#findOne
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Deposits/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#updateAll
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Deposits/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#deleteById
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Deposits/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#count
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Deposits/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#prototype$patchAttributes
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Deposit id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Deposits/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deposit#createChangeStream
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Deposits/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.deposits.findById() instead.
            "::findById::School::deposits": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/deposits/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.deposits.destroyById() instead.
            "::destroyById::School::deposits": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/deposits/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.deposits.updateById() instead.
            "::updateById::School::deposits": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/deposits/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.deposits() instead.
            "::get::School::deposits": {
              isArray: true,
              url: urlBase + "/Schools/:id/deposits",
              method: "GET",
            },

            // INTERNAL. Use School.deposits.create() instead.
            "::create::School::deposits": {
              url: urlBase + "/Schools/:id/deposits",
              method: "POST",
            },

            // INTERNAL. Use School.deposits.createMany() instead.
            "::createMany::School::deposits": {
              isArray: true,
              url: urlBase + "/Schools/:id/deposits",
              method: "POST",
            },

            // INTERNAL. Use School.deposits.destroyAll() instead.
            "::delete::School::deposits": {
              url: urlBase + "/Schools/:id/deposits",
              method: "DELETE",
            },

            // INTERNAL. Use School.deposits.count() instead.
            "::count::School::deposits": {
              url: urlBase + "/Schools/:id/deposits/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Deposit#upsert
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Deposit#updateOrCreate
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Deposit#patchOrCreateWithWhere
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Deposit#update
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Deposit#destroyById
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Deposit#removeById
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Deposit#updateAttributes
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Deposit id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deposit` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Deposit#modelName
        * @propertyOf lbServices.Deposit
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Deposit`.
        */
        R.modelName = "Deposit";


            /**
             * @ngdoc method
             * @name lbServices.Deposit#school
             * @methodOf lbServices.Deposit
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Deposit id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Deposit::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }
          if (config.url.search("/api/Identities/login") !== -1) {
            return config;
          }
          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
